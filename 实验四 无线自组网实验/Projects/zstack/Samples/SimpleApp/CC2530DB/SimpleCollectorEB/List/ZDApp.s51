///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               01/Dec/2011  14:21:32 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Components\stack\zdo\ZDApp.c     /
//    Command line       =  -f F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ /
//                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4. /
//                          0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl /
//                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cf /
//                          g (-DCPU32MHZ -DROOT=__near_func                  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg  /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì× /
//                          ¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZSta /
//                          ck-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Component /
//                          s\stack\zdo\ZDApp.c -D HOLD_AUTO_START -D         /
//                          BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D      /
//                          xNV_RESTORE -D ZTOOL_P1 -D MT_TASK -D             /
//                          MT_SYS_FUNC -D xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC  /
//                          -lC F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³Ì /
//                          Ðò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 /
//                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp /
//                          leApp\CC2530DB\SimpleCollectorEB\List\ -lA        /
//                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\SimpleCollectorEB\List\                /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\SimpleCollectorEB\Obj\ -e              /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì× /
//                          ¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZSta /
//                          ck-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\ /
//                          zstack\Samples\SimpleApp\CC2530DB\ -I             /
//                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\..\SOURCE\ -I                          /
//                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            /
//                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       /
//                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ /
//                           -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³Ì /
//                          Ðò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 /
//                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp /
//                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG /
//                          ET\CC2530EB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\ /
//                          10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC25 /
//                          30-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\ /
//                          Samples\SimpleApp\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\OSAL\MCU\CCSOC\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì× /
//                          ¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZSta /
//                          ck-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\ /
//                          zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\OSAL\INCLUDE\ -I                       /
//                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\    /
//                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ /
//                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4. /
//                          0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK /
//                          \ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ /
//                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. /
//                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 /
//                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- /
//                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\S /
//                          impleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \SAPI\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC /
//                          2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3 /
//                          .0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Sample /
//                          s\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ST /
//                          ACK\SYS\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__ /
//                          CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2 /
//                          .3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\ZDO\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10 /
//                          __CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530 /
//                          -2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Sa /
//                          mples\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\ZMAC\F8W\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\1 /
//                          0__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC253 /
//                          0-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\S /
//                          amples\SimpleApp\CC2530DB\..\..\..\..\..\COMPONEN /
//                          TS\ZMAC\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__ /
//                          CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2 /
//                          .3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          SERVICES\SADDR\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹â /
//                          ÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-C /
//                          C2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zsta /
//                          ck\Samples\SimpleApp\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\SERVICES\SDATA\ -I                         /
//                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ /
//                           -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³Ì /
//                          Ðò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 /
//                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp /
//                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH /
//                          _LEVEL\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__C /
//                          C2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2. /
//                          3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Sampl /
//                          es\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M /
//                          AC\LOW_LEVEL\srf04\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì× /
//                          ¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZSta /
//                          ck-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\ /
//                          zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I    /
//                          "C:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.3 Evaluation version\8051\INC\" -I "C:\Program  /
//                          Files\IAR Systems\Embedded Workbench 5.3          /
//                          Evaluation version\8051\INC\CLIB\" -Ohz           /
//    List file          =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°ü /
//                          B_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á /
//                          ½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp /
//                          p\CC2530DB\SimpleCollectorEB\List\ZDApp.s51       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??ZDAppCheckForHoldKey?relay
        EXTERN ??ZDAppDetermineDeviceType?relay
        EXTERN ??ZDApp_AnnounceNewAddress?relay
        EXTERN ??ZDApp_DeviceAuthEvt?relay
        EXTERN ??ZDApp_LeaveCtrlInit?relay
        EXTERN ??ZDApp_LeaveCtrlSet?relay
        EXTERN ??ZDApp_LeaveCtrlStartup?relay
        EXTERN ??ZDApp_LeaveReset?relay
        EXTERN ??ZDApp_LeaveUpdate?relay
        EXTERN ??ZDApp_NetworkInit?relay
        EXTERN ??ZDApp_NetworkStartEvt?relay
        EXTERN ??ZDApp_NodeProfileSync?relay
        EXTERN ??ZDApp_ProcessMsgCBs?relay
        EXTERN ??ZDApp_ProcessNetworkJoin?relay
        EXTERN ??ZDApp_ProcessOSALMsg?relay
        EXTERN ??ZDApp_RegisterCBs?relay
        EXTERN ??ZDApp_ResetTimerCancel?relay
        EXTERN ??ZDApp_ResetTimerStart?relay
        EXTERN ??ZDApp_SaveNwkKey?relay
        EXTERN ??ZDApp_SendMsg?relay
        EXTERN ??ZDOInitDevice?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AddrMgrWriteNVRequest?relay
        FUNCTION ??AddrMgrWriteNVRequest?relay,0203H
        PUBLIC ??ZDAppCheckForHoldKey?relay
        FUNCTION ??ZDAppCheckForHoldKey?relay,0203H
        PUBLIC ??ZDAppDetermineDeviceType?relay
        FUNCTION ??ZDAppDetermineDeviceType?relay,0203H
        PUBLIC ??ZDApp_AnnounceNewAddress?relay
        FUNCTION ??ZDApp_AnnounceNewAddress?relay,0203H
        PUBLIC ??ZDApp_ChangeMatchDescRespPermission?relay
        FUNCTION ??ZDApp_ChangeMatchDescRespPermission?relay,0203H
        PUBLIC ??ZDApp_CoordStartPANIDConflictCB?relay
        FUNCTION ??ZDApp_CoordStartPANIDConflictCB?relay,0203H
        PUBLIC ??ZDApp_DeviceAuthEvt?relay
        FUNCTION ??ZDApp_DeviceAuthEvt?relay,0203H
        PUBLIC ??ZDApp_InMsgCB?relay
        FUNCTION ??ZDApp_InMsgCB?relay,0203H
        PUBLIC ??ZDApp_Init?relay
        FUNCTION ??ZDApp_Init?relay,0203H
        PUBLIC ??ZDApp_InitUserDesc?relay
        FUNCTION ??ZDApp_InitUserDesc?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlBypass?relay
        FUNCTION ??ZDApp_LeaveCtrlBypass?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlInit?relay
        FUNCTION ??ZDApp_LeaveCtrlInit?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlSet?relay
        FUNCTION ??ZDApp_LeaveCtrlSet?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlStartup?relay
        FUNCTION ??ZDApp_LeaveCtrlStartup?relay,0203H
        PUBLIC ??ZDApp_LeaveReset?relay
        FUNCTION ??ZDApp_LeaveReset?relay,0203H
        PUBLIC ??ZDApp_LeaveUpdate?relay
        FUNCTION ??ZDApp_LeaveUpdate?relay,0203H
        PUBLIC ??ZDApp_NVUpdate?relay
        FUNCTION ??ZDApp_NVUpdate?relay,0203H
        PUBLIC ??ZDApp_NetworkInit?relay
        FUNCTION ??ZDApp_NetworkInit?relay,0203H
        PUBLIC ??ZDApp_NetworkStartEvt?relay
        FUNCTION ??ZDApp_NetworkStartEvt?relay,0203H
        PUBLIC ??ZDApp_NodeProfileSync?relay
        FUNCTION ??ZDApp_NodeProfileSync?relay,0203H
        PUBLIC ??ZDApp_NwkStateUpdateCB?relay
        FUNCTION ??ZDApp_NwkStateUpdateCB?relay,0203H
        PUBLIC ??ZDApp_ProcessMsgCBs?relay
        FUNCTION ??ZDApp_ProcessMsgCBs?relay,0203H
        PUBLIC ??ZDApp_ProcessNetworkJoin?relay
        FUNCTION ??ZDApp_ProcessNetworkJoin?relay,0203H
        PUBLIC ??ZDApp_ProcessOSALMsg?relay
        FUNCTION ??ZDApp_ProcessOSALMsg?relay,0203H
        PUBLIC ??ZDApp_ProcessSecEvent?relay
        FUNCTION ??ZDApp_ProcessSecEvent?relay,0203H
        PUBLIC ??ZDApp_ProcessSecMsg?relay
        FUNCTION ??ZDApp_ProcessSecMsg?relay,0203H
        PUBLIC ??ZDApp_ReadNetworkRestoreState?relay
        FUNCTION ??ZDApp_ReadNetworkRestoreState?relay,0203H
        PUBLIC ??ZDApp_RegisterCBs?relay
        FUNCTION ??ZDApp_RegisterCBs?relay,0203H
        PUBLIC ??ZDApp_ResetNwkKey?relay
        FUNCTION ??ZDApp_ResetNwkKey?relay,0203H
        PUBLIC ??ZDApp_ResetTimerCancel?relay
        FUNCTION ??ZDApp_ResetTimerCancel?relay,0203H
        PUBLIC ??ZDApp_ResetTimerStart?relay
        FUNCTION ??ZDApp_ResetTimerStart?relay,0203H
        PUBLIC ??ZDApp_RestoreNetworkState?relay
        FUNCTION ??ZDApp_RestoreNetworkState?relay,0203H
        PUBLIC ??ZDApp_RestoreNwkKey?relay
        FUNCTION ??ZDApp_RestoreNwkKey?relay,0203H
        PUBLIC ??ZDApp_SaveNetworkStateEvt?relay
        FUNCTION ??ZDApp_SaveNetworkStateEvt?relay,0203H
        PUBLIC ??ZDApp_SaveNwkKey?relay
        FUNCTION ??ZDApp_SaveNwkKey?relay,0203H
        PUBLIC ??ZDApp_SecInit?relay
        FUNCTION ??ZDApp_SecInit?relay,0203H
        PUBLIC ??ZDApp_SendEventMsg?relay
        FUNCTION ??ZDApp_SendEventMsg?relay,0203H
        PUBLIC ??ZDApp_SendMsg?relay
        FUNCTION ??ZDApp_SendMsg?relay,0203H
        PUBLIC ??ZDApp_StartJoiningCycle?relay
        FUNCTION ??ZDApp_StartJoiningCycle?relay,0203H
        PUBLIC ??ZDApp_StopJoiningCycle?relay
        FUNCTION ??ZDApp_StopJoiningCycle?relay,0203H
        PUBLIC ??ZDApp_event_loop?relay
        FUNCTION ??ZDApp_event_loop?relay,0203H
        PUBLIC ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,0203H
        PUBLIC ??ZDO_AddrChangeIndicationCB?relay
        FUNCTION ??ZDO_AddrChangeIndicationCB?relay,0203H
        PUBLIC ??ZDO_ConcentratorIndicationCB?relay
        FUNCTION ??ZDO_ConcentratorIndicationCB?relay,0203H
        PUBLIC ??ZDO_JoinConfirmCB?relay
        FUNCTION ??ZDO_JoinConfirmCB?relay,0203H
        PUBLIC ??ZDO_JoinIndicationCB?relay
        FUNCTION ??ZDO_JoinIndicationCB?relay,0203H
        PUBLIC ??ZDO_LeaveCnf?relay
        FUNCTION ??ZDO_LeaveCnf?relay,0203H
        PUBLIC ??ZDO_LeaveInd?relay
        FUNCTION ??ZDO_LeaveInd?relay,0203H
        PUBLIC ??ZDO_ManytoOneFailureIndicationCB?relay
        FUNCTION ??ZDO_ManytoOneFailureIndicationCB?relay,0203H
        PUBLIC ??ZDO_NetworkDiscoveryConfirmCB?relay
        FUNCTION ??ZDO_NetworkDiscoveryConfirmCB?relay,0203H
        PUBLIC ??ZDO_NetworkFormationConfirmCB?relay
        FUNCTION ??ZDO_NetworkFormationConfirmCB?relay,0203H
        PUBLIC ??ZDO_PollConfirmCB?relay
        FUNCTION ??ZDO_PollConfirmCB?relay,0203H
        PUBLIC ??ZDO_StartRouterConfirmCB?relay
        FUNCTION ??ZDO_StartRouterConfirmCB?relay,0203H
        PUBLIC ??ZDO_SyncIndicationCB?relay
        FUNCTION ??ZDO_SyncIndicationCB?relay,0203H
        PUBLIC ??ZDO_UpdateDeviceIndication?relay
        FUNCTION ??ZDO_UpdateDeviceIndication?relay,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBWEAK WDCTL
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,021203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 54, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,021203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RestoreNetworkState
        FUNCTION ZDApp_RestoreNetworkState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDOInitDevice
        FUNCTION ZDOInitDevice,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        PUBWEAK __Constant_3e8
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkFrameCounterChanges
        PUBLIC nwkStatus
        PUBLIC retryCnt
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoDiscCounter
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
ZDO_Init            SYMBOL "ZDO_Init"
afRegister          SYMBOL "afRegister"
HalLedBlink         SYMBOL "HalLedBlink"
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
osal_set_event      SYMBOL "osal_set_event"
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
zgInitItems         SYMBOL "zgInitItems"
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
osal_rand           SYMBOL "osal_rand"
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
NLME_StartRouterRequest SYMBOL "NLME_StartRouterRequest"
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
NLME_InitNV         SYMBOL "NLME_InitNV"
NLME_RestoreFromNV  SYMBOL "NLME_RestoreFromNV"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
osal_memset         SYMBOL "osal_memset"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_read        SYMBOL "osal_nv_read"
HalKeyRead          SYMBOL "HalKeyRead"
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
ZMacSetReq          SYMBOL "ZMacSetReq"
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
osal_mem_free       SYMBOL "osal_mem_free"
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
ZDMatchSendState    SYMBOL "ZDMatchSendState"
ZDO_ParseEndDeviceBindReq SYMBOL "ZDO_ParseEndDeviceBindReq"
ZDO_MatchEndDeviceBind SYMBOL "ZDO_MatchEndDeviceBind"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
osal_nv_write       SYMBOL "osal_nv_write"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
NLME_RemoveChild    SYMBOL "NLME_RemoveChild"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_memcpy         SYMBOL "osal_memcpy"
osal_msg_send       SYMBOL "osal_msg_send"
sAddrExtCmp         SYMBOL "sAddrExtCmp"
HalLedSet           SYMBOL "HalLedSet"
NLME_LeaveRsp       SYMBOL "NLME_LeaveRsp"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
NLME_RouteDiscoveryRequest SYMBOL "NLME_RouteDiscoveryRequest"
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
afSetMatch          SYMBOL "afSetMatch"
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
nwk_getNetworkDesc  SYMBOL "nwk_getNetworkDesc"
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
??HalKeyRead?relay  SYMBOL "?relay", HalKeyRead
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetEnergyThreshold?relay SYMBOL "?relay", NLME_GetEnergyThreshold
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_InitNV?relay SYMBOL "?relay", NLME_InitNV
??NLME_JoinRequest?relay SYMBOL "?relay", NLME_JoinRequest
??NLME_LeaveRsp?relay SYMBOL "?relay", NLME_LeaveRsp
??NLME_ReJoinRequest?relay SYMBOL "?relay", NLME_ReJoinRequest
??NLME_RemoveChild?relay SYMBOL "?relay", NLME_RemoveChild
??NLME_RestoreFromNV?relay SYMBOL "?relay", NLME_RestoreFromNV
??NLME_RouteDiscoveryRequest?relay SYMBOL "?relay", NLME_RouteDiscoveryRequest
??NLME_SetBroadcastFilter?relay SYMBOL "?relay", NLME_SetBroadcastFilter
??NLME_SetEnergyThreshold?relay SYMBOL "?relay", NLME_SetEnergyThreshold
??NLME_SetPollRate?relay SYMBOL "?relay", NLME_SetPollRate
??NLME_SetQueuedPollRate?relay SYMBOL "?relay", NLME_SetQueuedPollRate
??NLME_SetResponseRate?relay SYMBOL "?relay", NLME_SetResponseRate
??NLME_StartRouterRequest?relay SYMBOL "?relay", NLME_StartRouterRequest
??SSP_ReadNwkActiveKey?relay SYMBOL "?relay", SSP_ReadNwkActiveKey
??ZDConfig_InitDescriptors?relay SYMBOL "?relay", ZDConfig_InitDescriptors
??ZDMatchSendState?relay SYMBOL "?relay", ZDMatchSendState
??ZDO_Init?relay    SYMBOL "?relay", ZDO_Init
??ZDO_MatchEndDeviceBind?relay SYMBOL "?relay", ZDO_MatchEndDeviceBind
??ZDO_ParseAddrRsp?relay SYMBOL "?relay", ZDO_ParseAddrRsp
??ZDO_ParseBindUnbindReq?relay SYMBOL "?relay", ZDO_ParseBindUnbindReq
??ZDO_ParseEndDeviceBindReq?relay SYMBOL "?relay", ZDO_ParseEndDeviceBindReq
??ZDO_ProcessBindUnbindReq?relay SYMBOL "?relay", ZDO_ProcessBindUnbindReq
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDO_StartDevice?relay SYMBOL "?relay", ZDO_StartDevice
??ZDO_UpdateAddrManager?relay SYMBOL "?relay", ZDO_UpdateAddrManager
??ZDO_UpdateNwkStatus?relay SYMBOL "?relay", ZDO_UpdateNwkStatus
??ZDP_DeviceAnnce?relay SYMBOL "?relay", ZDP_DeviceAnnce
??ZDP_GenericRsp?relay SYMBOL "?relay", ZDP_GenericRsp
??ZDP_IncomingData?relay SYMBOL "?relay", ZDP_IncomingData
??ZDSecMgrInit?relay SYMBOL "?relay", ZDSecMgrInit
??ZDSecMgrNewDeviceEvent?relay SYMBOL "?relay", ZDSecMgrNewDeviceEvent
??ZDSecMgrSwitchKeyInd?relay SYMBOL "?relay", ZDSecMgrSwitchKeyInd
??ZDSecMgrTransportKeyInd?relay SYMBOL "?relay", ZDSecMgrTransportKeyInd
??ZDSecMgrUpdateDeviceInd?relay SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
??afRegister?relay  SYMBOL "?relay", afRegister
??afSetMatch?relay  SYMBOL "?relay", afSetMatch
??nwkNeighborInitTable?relay SYMBOL "?relay", nwkNeighborInitTable
??nwk_ExtPANIDValid?relay SYMBOL "?relay", nwk_ExtPANIDValid
??nwk_getNetworkDesc?relay SYMBOL "?relay", nwk_getNetworkDesc
??osal_get_timeoutEx?relay SYMBOL "?relay", osal_get_timeoutEx
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_pwrmgr_device?relay SYMBOL "?relay", osal_pwrmgr_device
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??sAddrExtCmp?relay SYMBOL "?relay", sAddrExtCmp
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
??zgInitItems?relay SYMBOL "?relay", zgInitItems
??zgReadStartupOptions?relay SYMBOL "?relay", zgReadStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
??AddrMgrWriteNVRequest?relay SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
??ZDAppCheckForHoldKey?relay SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
??ZDAppDetermineDeviceType?relay SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
??ZDApp_AnnounceNewAddress?relay SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
??ZDApp_ChangeMatchDescRespPermission?relay SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
??ZDApp_CoordStartPANIDConflictCB?relay SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
??ZDApp_DeviceAuthEvt?relay SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
??ZDApp_InMsgCB?relay SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
??ZDApp_Init?relay  SYMBOL "?relay", ZDApp_Init
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
??ZDApp_InitUserDesc?relay SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
??ZDApp_LeaveCtrlBypass?relay SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
??ZDApp_LeaveCtrlInit?relay SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
??ZDApp_LeaveCtrlSet?relay SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
??ZDApp_LeaveCtrlStartup?relay SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
??ZDApp_LeaveReset?relay SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
??ZDApp_LeaveUpdate?relay SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
??ZDApp_NVUpdate?relay SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
??ZDApp_NetworkInit?relay SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
??ZDApp_NetworkStartEvt?relay SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
??ZDApp_NodeProfileSync?relay SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
??ZDApp_NwkStateUpdateCB?relay SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
??ZDApp_ProcessMsgCBs?relay SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
??ZDApp_ProcessNetworkJoin?relay SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
??ZDApp_ProcessOSALMsg?relay SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
??ZDApp_ProcessSecEvent?relay SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
??ZDApp_ProcessSecMsg?relay SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
??ZDApp_ReadNetworkRestoreState?relay SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
??ZDApp_RegisterCBs?relay SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
??ZDApp_ResetNwkKey?relay SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
??ZDApp_ResetTimerCancel?relay SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
??ZDApp_ResetTimerStart?relay SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNetworkState SYMBOL "ZDApp_RestoreNetworkState"
??ZDApp_RestoreNetworkState?relay SYMBOL "?relay", ZDApp_RestoreNetworkState
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
??ZDApp_RestoreNwkKey?relay SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
??ZDApp_SaveNetworkStateEvt?relay SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
??ZDApp_SaveNwkKey?relay SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
??ZDApp_SecInit?relay SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
??ZDApp_SendEventMsg?relay SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
??ZDApp_SendMsg?relay SYMBOL "?relay", ZDApp_SendMsg
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
??ZDApp_StartJoiningCycle?relay SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
??ZDApp_StopJoiningCycle?relay SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
??ZDApp_event_loop?relay SYMBOL "?relay", ZDApp_event_loop
ZDOInitDevice       SYMBOL "ZDOInitDevice"
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
??ZDO_AddrChangeIndicationCB?relay SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
??ZDO_ConcentratorIndicationCB?relay SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
??ZDO_JoinConfirmCB?relay SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
??ZDO_JoinIndicationCB?relay SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
??ZDO_LeaveCnf?relay SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
??ZDO_LeaveInd?relay SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
??ZDO_ManytoOneFailureIndicationCB?relay SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
??ZDO_NetworkDiscoveryConfirmCB?relay SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
??ZDO_NetworkFormationConfirmCB?relay SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
??ZDO_PollConfirmCB?relay SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
??ZDO_StartRouterConfirmCB?relay SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
??ZDO_SyncIndicationCB?relay SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
??ZDO_UpdateDeviceIndication?relay SYMBOL "?relay", ZDO_UpdateDeviceIndication

        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_StartRouterRequest
        FUNCTION NLME_StartRouterRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitNV
        FUNCTION NLME_InitNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RestoreFromNV
        FUNCTION NLME_RestoreFromNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDMatchSendState
        FUNCTION ZDMatchSendState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEndDeviceBindReq
        FUNCTION ZDO_ParseEndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_MatchEndDeviceBind
        FUNCTION ZDO_MatchEndDeviceBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RemoveChild
        FUNCTION NLME_RemoveChild,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RouteDiscoveryRequest
        FUNCTION NLME_RouteDiscoveryRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNetworkDesc
        FUNCTION nwk_getNetworkDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalKeyRead?relay
        FUNCTION ??HalKeyRead?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetEnergyThreshold?relay
        FUNCTION ??NLME_GetEnergyThreshold?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_InitNV?relay
        FUNCTION ??NLME_InitNV?relay,00H
        EXTERN ??NLME_JoinRequest?relay
        FUNCTION ??NLME_JoinRequest?relay,00H
        EXTERN ??NLME_LeaveRsp?relay
        FUNCTION ??NLME_LeaveRsp?relay,00H
        EXTERN ??NLME_ReJoinRequest?relay
        FUNCTION ??NLME_ReJoinRequest?relay,00H
        EXTERN ??NLME_RemoveChild?relay
        FUNCTION ??NLME_RemoveChild?relay,00H
        EXTERN ??NLME_RestoreFromNV?relay
        FUNCTION ??NLME_RestoreFromNV?relay,00H
        EXTERN ??NLME_RouteDiscoveryRequest?relay
        FUNCTION ??NLME_RouteDiscoveryRequest?relay,00H
        EXTERN ??NLME_SetBroadcastFilter?relay
        FUNCTION ??NLME_SetBroadcastFilter?relay,00H
        EXTERN ??NLME_SetEnergyThreshold?relay
        FUNCTION ??NLME_SetEnergyThreshold?relay,00H
        EXTERN ??NLME_SetPollRate?relay
        FUNCTION ??NLME_SetPollRate?relay,00H
        EXTERN ??NLME_SetQueuedPollRate?relay
        FUNCTION ??NLME_SetQueuedPollRate?relay,00H
        EXTERN ??NLME_SetResponseRate?relay
        FUNCTION ??NLME_SetResponseRate?relay,00H
        EXTERN ??NLME_StartRouterRequest?relay
        FUNCTION ??NLME_StartRouterRequest?relay,00H
        EXTERN ??SSP_ReadNwkActiveKey?relay
        FUNCTION ??SSP_ReadNwkActiveKey?relay,00H
        EXTERN ??ZDConfig_InitDescriptors?relay
        FUNCTION ??ZDConfig_InitDescriptors?relay,00H
        EXTERN ??ZDMatchSendState?relay
        FUNCTION ??ZDMatchSendState?relay,00H
        EXTERN ??ZDO_Init?relay
        FUNCTION ??ZDO_Init?relay,00H
        EXTERN ??ZDO_MatchEndDeviceBind?relay
        FUNCTION ??ZDO_MatchEndDeviceBind?relay,00H
        EXTERN ??ZDO_ParseAddrRsp?relay
        FUNCTION ??ZDO_ParseAddrRsp?relay,00H
        EXTERN ??ZDO_ParseBindUnbindReq?relay
        FUNCTION ??ZDO_ParseBindUnbindReq?relay,00H
        EXTERN ??ZDO_ParseEndDeviceBindReq?relay
        FUNCTION ??ZDO_ParseEndDeviceBindReq?relay,00H
        EXTERN ??ZDO_ProcessBindUnbindReq?relay
        FUNCTION ??ZDO_ProcessBindUnbindReq?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDO_StartDevice?relay
        FUNCTION ??ZDO_StartDevice?relay,00H
        EXTERN ??ZDO_UpdateAddrManager?relay
        FUNCTION ??ZDO_UpdateAddrManager?relay,00H
        EXTERN ??ZDO_UpdateNwkStatus?relay
        FUNCTION ??ZDO_UpdateNwkStatus?relay,00H
        EXTERN ??ZDP_DeviceAnnce?relay
        FUNCTION ??ZDP_DeviceAnnce?relay,00H
        EXTERN ??ZDP_GenericRsp?relay
        FUNCTION ??ZDP_GenericRsp?relay,00H
        EXTERN ??ZDP_IncomingData?relay
        FUNCTION ??ZDP_IncomingData?relay,00H
        EXTERN ??ZDSecMgrInit?relay
        FUNCTION ??ZDSecMgrInit?relay,00H
        EXTERN ??ZDSecMgrNewDeviceEvent?relay
        FUNCTION ??ZDSecMgrNewDeviceEvent?relay,00H
        EXTERN ??ZDSecMgrSwitchKeyInd?relay
        FUNCTION ??ZDSecMgrSwitchKeyInd?relay,00H
        EXTERN ??ZDSecMgrTransportKeyInd?relay
        FUNCTION ??ZDSecMgrTransportKeyInd?relay,00H
        EXTERN ??ZDSecMgrUpdateDeviceInd?relay
        FUNCTION ??ZDSecMgrUpdateDeviceInd?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??afSetMatch?relay
        FUNCTION ??afSetMatch?relay,00H
        EXTERN ??nwkNeighborInitTable?relay
        FUNCTION ??nwkNeighborInitTable?relay,00H
        EXTERN ??nwk_ExtPANIDValid?relay
        FUNCTION ??nwk_ExtPANIDValid?relay,00H
        EXTERN ??nwk_getNetworkDesc?relay
        FUNCTION ??nwk_getNetworkDesc?relay,00H
        EXTERN ??osal_get_timeoutEx?relay
        FUNCTION ??osal_get_timeoutEx?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_pwrmgr_device?relay
        FUNCTION ??osal_pwrmgr_device?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??sAddrExtCmp?relay
        FUNCTION ??sAddrExtCmp?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN ??zgInitItems?relay
        FUNCTION ??zgInitItems?relay,00H
        EXTERN ??zgReadStartupOptions?relay
        FUNCTION ??zgReadStartupOptions?relay,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN matchED
        EXTERN nwkFrameCounter
        EXTERN zgConcentratorRC
        EXTERN zgConcentratorRadius
        EXTERN zgConfigPANID
        EXTERN zgDefaultStartingScanDuration
        EXTERN zgDeviceLogicalType
        EXTERN zgStackProfile

// F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the use can change. This also contains the Task functions.
//    8 
//    9 
//   10   Copyright 2004-2007 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com. 
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 #include "ZComDef.h"
//   45 #include "ZMac.h"
//   46 #include "OSAL.h"
//   47 #include "OSAL_Tasks.h"
//   48 #include "OSAL_PwrMgr.h"
//   49 #include "OSAL_Nv.h"
//   50 #include "AF.h"
//   51 #include "APSMEDE.h"
//   52 #include "NLMEDE.h"
//   53 #include "AddrMgr.h"
//   54 #include "ZDProfile.h"
//   55 #include "ZDObject.h"
//   56 #include "ZDConfig.h"
//   57 #include "ZDSecMgr.h"
//   58 #include "ZDApp.h"
//   59 #include "DebugTrace.h"
//   60 #include "nwk_util.h"
//   61 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1
//   62 #include "ZGlobals.h"
//   63 #include "ZDNwkMgr.h"
//   64 #include "rtg.h"
//   65 
//   66 #include "ssp.h"
//   67 
//   68 #if defined( MT_ZDO_FUNC )
//   69   #include "MT_ZDO.h"
//   70 #endif
//   71 
//   72 /* HAL */
//   73 #include "hal_led.h"
//   74 #include "hal_lcd.h"
//   75 #include "hal_key.h"
//   76 
//   77 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   78   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   79 #endif
//   80 /*********************************************************************
//   81  * MACROS
//   82  */
//   83 
//   84 /*********************************************************************
//   85  * CONSTANTS
//   86  */
//   87 #if !defined( NWK_START_DELAY )
//   88   #define NWK_START_DELAY             100   // in milliseconds
//   89 #endif
//   90 
//   91 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   92   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   93 #endif
//   94 
//   95 #if !defined( BEACON_REQUEST_DELAY )
//   96   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//   97 #endif
//   98 
//   99 #if !defined( BEACON_REQ_DELAY_MASK )
//  100   #define BEACON_REQ_DELAY_MASK       0x007F
//  101 #endif
//  102 
//  103 #define MAX_RESUME_RETRY            3
//  104 
//  105 #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
//  106 
//  107 // Beacon Order Settings (see NLMEDE.h)
//  108 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//  109 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//  110 
//  111 #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
//  112   // The number of times the frame counter can change before
//  113   // saving to NV
//  114   #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
//  115 #endif
//  116 
//  117 // Leave control bits
//  118 #define ZDAPP_LEAVE_CTRL_INIT 0
//  119 #define ZDAPP_LEAVE_CTRL_SET  1
//  120 #define ZDAPP_LEAVE_CTRL_RA   2
//  121 
//  122 // Standard time to update NWK NV data
//  123 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//  124 
//  125 // Address Manager Stub Implementation
//  126 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  127 
//  128 /*********************************************************************
//  129  * TYPEDEFS
//  130  */
//  131 
//  132 /*********************************************************************
//  133  * GLOBAL VARIABLES
//  134  */
//  135 
//  136 #if defined( LCD_SUPPORTED )
//  137   uint8 MatchRsps = 0;
//  138 #endif
//  139 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  140 uint8 zdoDiscCounter = 1;
zdoDiscCounter:
        DS 1
        REQUIRE `?<Initializer for zdoDiscCounter>`
        REQUIRE __INIT_XDATA_I
//  141 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  142 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  143 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  144 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  145 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  146 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  147 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  148 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  149 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  150 uint16 nwkFrameCounterChanges = 0;
nwkFrameCounterChanges:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  151 uint8 continueJoining = TRUE;
continueJoining:
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  152 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  153 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  154 
//  155 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  156 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  157 
//  158 /*********************************************************************
//  159  * EXTERNAL VARIABLES
//  160  */
//  161 
//  162 /*********************************************************************
//  163  * EXTERNAL FUNCTIONS
//  164  */
//  165 
//  166 /*********************************************************************
//  167  * LOCAL FUNCTIONS
//  168  */
//  169 
//  170 void ZDApp_NetworkStartEvt( void );
//  171 void ZDApp_DeviceAuthEvt( void );
//  172 void ZDApp_SaveNetworkStateEvt( void );
//  173 
//  174 uint8 ZDApp_ReadNetworkRestoreState( void );
//  175 uint8 ZDApp_RestoreNetworkState( void );
//  176 void ZDAppDetermineDeviceType( void );
//  177 void ZDApp_InitUserDesc( void );
//  178 void ZDAppCheckForHoldKey( void );
//  179 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  180 void ZDApp_ProcessNetworkJoin( void );
//  181 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  182 void ZDApp_SaveNwkKey( void );
//  183 uint8 ZDApp_RestoreNwkKey( void );
//  184   
//  185 void ZDApp_SecInit( uint8 state );
//  186 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  187 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  188 
//  189 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  190 
//  191 void ZDApp_ResetTimerStart( uint16 delay );
//  192 void ZDApp_ResetTimerCancel( void );
//  193 void ZDApp_LeaveCtrlInit( void );
//  194 void ZDApp_LeaveCtrlSet( uint8 ra );
//  195 uint8 ZDApp_LeaveCtrlBypass( void );
//  196 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  197 void ZDApp_LeaveReset( uint8 ra );
//  198 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
//  199                         uint8 removeChildren );
//  200 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
//  201 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  202 void ZDApp_RegisterCBs( void );
//  203 
//  204 /*********************************************************************
//  205  * LOCAL VARIABLES
//  206  */
//  207 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  208 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  209 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  210 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  211 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  212 
//  213 #if defined( HOLD_AUTO_START )

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  214   devStates_t devState = DEV_HOLD;
devState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  215 #else
//  216   devStates_t devState = DEV_INIT;
//  217 #endif
//  218 
//  219 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  220   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
devStartMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  221   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  222                         // to parent. Set to make the device do an Orphan scan.
//  223 #else
//  224   // Set the default to coodinator
//  225   devStartModes_t devStartMode = MODE_HARD;
//  226 #endif
//  227 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  228 uint8 retryCnt;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  229 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  230 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DS 6
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  231 {
//  232   ZDO_EP,
//  233   &ZDAppTaskID,
//  234   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  235   (afNetworkLatencyReq_t)0            // No Network Latency req
//  236 };
//  237 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  238 uint16 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DS 2
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  239 
//  240 /*********************************************************************
//  241  * @fn      ZDApp_Init
//  242  *
//  243  * @brief   ZDApp Initialization function.
//  244  *
//  245  * @param   task_id - ZDApp Task ID
//  246  *
//  247  * @return  None
//  248  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  249 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDApp_Init
//  250 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDAppCheckForHoldKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  251   // Save the task ID
//  252   ZDAppTaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#ZDAppTaskID
        MOVX    @DPTR,A
//  253 
//  254   // Initialize the ZDO global device short address storage
//  255   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV     A,#0x2
        MOV     DPTR,#(ZDAppNwkAddr + 8)
        MOVX    @DPTR,A
//  256   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDAppNwkAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  257   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
//  258 
//  259   // Check for manual "Hold Auto Start"
//  260   ZDAppCheckForHoldKey();
        ; Setup parameters for call to function ZDAppCheckForHoldKey
        LCALL   ??ZDAppCheckForHoldKey?relay
//  261 
//  262   // Initialize ZDO items and setup the device - type of device to create.
//  263   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL   ??ZDO_Init?relay
//  264 
//  265   // Register the endpoint description with the AF
//  266   // This task doesn't have a Simple description, but we still need
//  267   // to register the endpoint.
//  268   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#(ZDApp_epDesc & 0xff)
        MOV     R3,#((ZDApp_epDesc >> 8) & 0xff)
        LCALL   ??afRegister?relay
//  269 
//  270 #if defined( ZDO_USERDESC_RESPONSE )
//  271   ZDApp_InitUserDesc();
//  272 #endif // ZDO_USERDESC_RESPONSE
//  273 
//  274   // Start the device?
//  275   if ( devState != DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JZ      ??ZDApp_Init_0
//  276   {
//  277     ZDOInitDevice( 0 );
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay
        SJMP    ??ZDApp_Init_1
//  278   }
//  279   else
//  280   {
//  281     // Blink LED to indicate HOLD_START
//  282     HalLedBlink ( HAL_LED_4, 0, 50, 500 );
??ZDApp_Init_0:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  283   }
//  284   
//  285   ZDApp_RegisterCBs();
??ZDApp_Init_1:
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL   ??ZDApp_RegisterCBs?relay
//  286 } /* ZDApp_Init() */
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  287 
//  288 /*********************************************************************
//  289  * @fn          ZDApp_SecInit
//  290  *
//  291  * @brief       ZDApp initialize security.
//  292  *
//  293  * @param       state - device initialization state
//  294  *
//  295  * @return      none
//  296  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  297 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ZDApp_SecInit
//  298 {  
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  299   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  300   {
//  301     // Set the Trust Center bit
//  302     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
//  303   }
//  304 
//  305   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
//  306   {
//  307     ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
//  308   }
//  309     
//  310   // Initialize ZigBee Device Security Manager
//  311   ZDSecMgrInit();
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL   ??ZDSecMgrInit?relay
//  312 
//  313   if ( ZG_SECURE_ENABLED )
//  314   {
//  315     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  316     {
//  317       nwkFrameCounter = 0;
//  318   
//  319       if( _NIB.nwkKeyLoaded == FALSE )
//  320       {
//  321         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  322              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
//  323         {
//  324             SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0);
//  325             SSP_SwitchNwkKey( 0 );
//  326         }
//  327       }
//  328     }
//  329   }    
//  330 }
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock1
//  331 
//  332 /*********************************************************************
//  333  * @fn      ZDApp_event_loop()
//  334  *
//  335  * @brief   Main event loop for Zigbee device objects task. This function
//  336  *          should be called at periodic intervals.
//  337  *
//  338  * @param   task_id - Task ID
//  339  * @param   events  - Bitmap of events
//  340  *
//  341  * @return  none
//  342  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  343 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDApp_event_loop
//  344 {
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_NetworkStartEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_pwrmgr_device
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  345   uint8 *msg_ptr;
//  346 
//  347   if ( events & SYS_EVENT_MSG )
        MOV     A,#-0x80
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_event_loop_0
        MOV     A,R1
??ZDApp_event_loop_0:
        JNZ     ??ZDApp_event_loop_1
//  348   {
//  349     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  350     {
//  351       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  352 
//  353       // Release the memory
//  354       osal_msg_deallocate( msg_ptr );
//  355     }
//  356 
//  357     // Return unprocessed events
//  358     return (events ^ SYS_EVENT_MSG);
//  359   }
//  360 
//  361   if ( events & ZDO_NETWORK_INIT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_event_loop_2
//  362   {
//  363     // Initialize apps and start the network
//  364     devState = DEV_INIT;
        MOV     A,#0x1
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  365     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  366                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV     R4,#0xf
        MOV     R3,#0xf
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R1,A
        LCALL   ??ZDO_StartDevice?relay
//  367 
//  368     // Return unprocessed events
//  369     return (events ^ ZDO_NETWORK_INIT);
        MOV     A,#0x1
??ZDApp_event_loop_3:
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
??ZDApp_event_loop_4:
        MOV     R3,A
        LJMP    ??ZDApp_event_loop_5 & 0xFFFF
//  370   }
??ZDApp_event_loop_6:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL   ??ZDApp_ProcessOSALMsg?relay
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??ZDApp_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        JNZ     ??ZDApp_event_loop_7
        MOV     A,R3
??ZDApp_event_loop_7:
        JNZ     ??ZDApp_event_loop_6
        MOV     A,R6
        MOV     R2,A
        MOV     A,#-0x80
??ZDApp_event_loop_8:
        XRL     A,R7
        SJMP    ??ZDApp_event_loop_4
//  371 
//  372   if ( ZSTACK_ROUTER_BUILD )
??ZDApp_event_loop_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_event_loop_9
        XRL     A,#0x1
        JNZ     ??ZDApp_event_loop_10
//  373   {
//  374     if ( events & ZDO_NETWORK_START )
??ZDApp_event_loop_9:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??ZDApp_event_loop_11
//  375     {
//  376       ZDApp_NetworkStartEvt();
        ; Setup parameters for call to function ZDApp_NetworkStartEvt
        LCALL   ??ZDApp_NetworkStartEvt?relay
//  377   
//  378       // Return unprocessed events
//  379       return (events ^ ZDO_NETWORK_START);
        MOV     A,#0x2
        SJMP    ??ZDApp_event_loop_3
//  380     }
//  381 
//  382     if ( events & ZDO_ROUTER_START )
??ZDApp_event_loop_11:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??ZDApp_event_loop_10
//  383     {
//  384       if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_event_loop_12
//  385       {
//  386         if ( devState == DEV_END_DEVICE )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??ZDApp_event_loop_13
//  387           devState = DEV_ROUTER;
        MOV     A,#0x7
        MOVX    @DPTR,A
//  388   
//  389         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_event_loop_13:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   ??osal_pwrmgr_device?relay
//  390       }
//  391       else
//  392       {
//  393         // remain as end device!!
//  394       }
//  395       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_event_loop_12:
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine3 & 0xFFFF
//  396   
//  397       // Return unprocessed events
//  398       return (events ^ ZDO_ROUTER_START);
??CrossCallReturnLabel_27:
        MOV     A,#0x20
        SJMP    ??ZDApp_event_loop_3
//  399     }
//  400   }
//  401   
//  402   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_10:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??ZDApp_event_loop_14
//  403   {
//  404     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_UpdateNwkStatus?relay
//  405 
//  406     // Return unprocessed events
//  407     return (events ^ ZDO_STATE_CHANGE_EVT);
        MOV     A,#0x10
        SJMP    ??ZDApp_event_loop_3
//  408   }
//  409 
//  410   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_14:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDApp_event_loop_15
//  411   {
//  412     // User defined logic
//  413 
//  414     // Return unprocessed events
//  415     return (events ^ ZDO_COMMAND_CNF);
        MOV     A,#0x8
        XRL     A,R6
        MOV     R2,A
        SJMP    ??ZDApp_event_loop_5
//  416   }
//  417   
//  418   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_15:
        MOV     A,#0x2
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_event_loop_16
        MOV     A,R1
??ZDApp_event_loop_16:
        JZ      ??ZDApp_event_loop_17
//  419   {
//  420     ZDApp_SaveNetworkStateEvt();
//  421 
//  422     // Return unprocessed events
//  423     return (events ^ ZDO_NWK_UPDATE_NV);
        MOV     A,#0x2
        SJMP    ??ZDApp_event_loop_8
//  424   }
//  425 
//  426   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_17:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??ZDApp_event_loop_18
//  427   {
//  428     // The device has been in the UNAUTH state, so reset
//  429     // Note: there will be no return from this call
//  430     SystemReset();
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??ZDApp_event_loop_19:
        NOP
        SJMP    ??ZDApp_event_loop_19
//  431   }
//  432 
//  433   if ( ZG_SECURE_ENABLED )
//  434   {
//  435     return ( ZDApp_ProcessSecEvent( task_id, events ) );
//  436   }
//  437   else
//  438   {
//  439     // Discard or make more handlers
//  440     return 0;
??ZDApp_event_loop_18:
        MOV     R2,#0x0
        MOV     R3,#0x0
//  441   }
??ZDApp_event_loop_5:
        LJMP    ??Subroutine33_0 & 0xFFFF
        CFI EndBlock cfiBlock2
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  442 }
//  443 
//  444 /*********************************************************************
//  445  * @fn      ZDApp_ProcessSecEvent()
//  446  *
//  447  * @brief   Process incoming security events.
//  448  *
//  449  * @param   task_id - Task ID
//  450  * @param   events  - Bitmap of events
//  451  *
//  452  * @return  none
//  453  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  454 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ZDApp_ProcessSecEvent
//  455 {
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrNewDeviceEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  456   (void)task_id;  // Intentionally unreferenced parameter
//  457   
//  458   if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessSecEvent_0
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessSecEvent_1
//  459   {
//  460     if ( events & ZDO_NEW_DEVICE )
??ZDApp_ProcessSecEvent_0:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??ZDApp_ProcessSecEvent_1
//  461     {
//  462       // process the new device event
//  463       if ( ZDSecMgrNewDeviceEvent() == TRUE )
        ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
        LCALL   ??ZDSecMgrNewDeviceEvent?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_9
//  464       {
//  465         osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x40
        LCALL   ?Subroutine8 & 0xFFFF
//  466       }
//  467 
//  468       // Return unprocessed events
//  469       return (events ^ ZDO_NEW_DEVICE);
??CrossCallReturnLabel_9:
        MOV     A,#0x40
??ZDApp_ProcessSecEvent_2:
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_3
//  470     }
//  471   }
//  472 
//  473   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH) 
//  474       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
//  475   {
//  476     if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  477     { 
//  478       if ( events & ZDO_SECMGR_EVENT )
//  479       {
//  480         ZDSecMgrEvent();
//  481 
//  482         // Return unprocessed events
//  483         return (events ^ ZDO_SECMGR_EVENT);
//  484       }
//  485     }
//  486   }
//  487   
//  488   if ( events & ZDO_DEVICE_AUTH )
??ZDApp_ProcessSecEvent_1:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??ZDApp_ProcessSecEvent_4
//  489   {
//  490     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL   ??ZDApp_DeviceAuthEvt?relay
//  491 
//  492     // Return unprocessed events
//  493     return (events ^ ZDO_DEVICE_AUTH);
        MOV     A,#-0x80
        SJMP    ??ZDApp_ProcessSecEvent_2
//  494   }
//  495 
//  496   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_4:
        MOV     A,#0x4
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_ProcessSecEvent_5
        MOV     A,R1
??ZDApp_ProcessSecEvent_5:
        JZ      ??ZDApp_ProcessSecEvent_6
//  497   {
//  498     if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
        MOV     DPTR,#nwkFrameCounterChanges
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#nwkFrameCounterChanges
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x17
        MOV     A,R1
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessSecEvent_7
//  499       ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   ??ZDApp_SaveNwkKey?relay
//  500 
//  501     // Return unprocessed events
//  502     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
??ZDApp_ProcessSecEvent_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,#0x4
        XRL     A,R7
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_3
//  503   }
//  504   
//  505   // Discard or make more handlers
//  506   return 0;
??ZDApp_ProcessSecEvent_6:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock3
??ZDApp_ProcessSecEvent_3:
        REQUIRE ?Subroutine21
        ; // Fall through to label ?Subroutine21
//  507 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  508 
//  509 /*********************************************************************
//  510  * Application Functions
//  511  */
//  512 
//  513 /*********************************************************************
//  514  * @fn      ZDOInitDevice
//  515  *
//  516  * @brief   Start the device in the network.  This function will read
//  517  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  518  *   restore the network state of the device.
//  519  *
//  520  * @param   startDelay - timeDelay to start device (in milliseconds).
//  521  *      There is a jitter added to this delay:
//  522  *              ((NWK_START_DELAY + startDelay)
//  523  *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  524  *
//  525  * NOTE:    If the application would like to force a "new" join, the
//  526  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  527  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  528  *          this function. "new" join means to not restore the network
//  529  *          state of the device. Use zgWriteStartupOptions() to set these
//  530  *          options.
//  531  *
//  532  * @return
//  533  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  534  *          restored.
//  535  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  536  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  537  *          it could mean that there was no network state to restore.
//  538  *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
//  539  *          with the rejoin option set to TRUE.  So, the device was not
//  540  *          started in the network (one time only).  The next time this
//  541  *          function is called it will start.
//  542  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  543 uint8 ZDOInitDevice( uint16 startDelay )
ZDOInitDevice:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ZDOInitDevice
//  544 {
        FUNCALL ZDOInitDevice, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlStartup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  545   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  546   uint16 extendedDelay = 0;
//  547 
//  548   if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_0
//  549   {    
//  550     // Initialize the RAM items table, in case an NV item has been updated.
//  551     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV     R1,#0x0
        LCALL   ??zgInitItems?relay
//  552   }
//  553 
//  554   ZDConfig_InitDescriptors();
??ZDOInitDevice_0:
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL   ??ZDConfig_InitDescriptors?relay
//  555   //devtag.071807.todo - fix this temporary solution
//  556   _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 14)
        MOVX    @DPTR,A
//  557   
//  558   devState = DEV_INIT;    // Remove the Hold state
        MOV     A,#0x1
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  559 
//  560   // Initialize leave control logic
//  561   ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL   ??ZDApp_LeaveCtrlInit?relay
//  562 
//  563   // Check leave control reset settings
//  564   ZDApp_LeaveCtrlStartup( &devState, &startDelay );
        ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#(devState & 0xff)
        MOV     R3,#((devState >> 8) & 0xff)
        LCALL   ??ZDApp_LeaveCtrlStartup?relay
//  565 
//  566   // Leave may make the hold state come back
//  567   if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_1
//  568     return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
        MOV     R1,#0x2
        SJMP    ??ZDOInitDevice_2
//  569 
//  570 #if defined ( NV_RESTORE )
//  571   // Get Keypad directly to see if a reset nv is needed.
//  572   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  573   // while booting to skip past NV Restore.
//  574   if ( HalKeyRead() == SW_BYPASS_NV )
//  575     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  576   else
//  577   {
//  578     // Determine if NV should be restored
//  579     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  580   }
//  581 
//  582   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  583   {
//  584     networkStateNV = ZDApp_RestoreNetworkState();
//  585   }
//  586   else
//  587   {
//  588     // Wipe out the network state in NV
//  589     NLME_InitNV();
//  590     NLME_SetDefaultNV();
//  591   }
//  592 #endif
//  593 
//  594   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
//  595   {
//  596     ZDAppDetermineDeviceType();
??ZDOInitDevice_1:
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL   ??ZDAppDetermineDeviceType?relay
//  597 
//  598     // Only delay if joining network - not restoring network state
//  599     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  600               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     R0,?V0 + 0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x7f
        ANL     A,R0
        MOV     R0,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x64
        ADD     A,R0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  601   }
//  602 
//  603   // Initialize the security for type of device
//  604   ZDApp_SecInit( networkStateNV );
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL   ??ZDSecMgrInit?relay
//  605   
//  606   // Trigger the network start
//  607   ZDApp_NetworkInit( extendedDelay );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDApp_NetworkInit?relay
//  608 
//  609   // set broadcast address mask to support broadcast filtering
//  610   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??NLME_SetBroadcastFilter?relay
//  611   
//  612   return ( networkStateNV );
        MOV     R1,#0x1
??ZDOInitDevice_2:
        LJMP    ?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock5
//  613 }
//  614 
//  615 /*********************************************************************
//  616  * @fn      ZDApp_ReadNetworkRestoreState
//  617  *
//  618  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  619  *          or not to restore the network state.
//  620  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  621  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  622  *
//  623  * @param   none
//  624  *
//  625  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  626  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  627  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  628  *          ZCD_NV_STARTUP_OPTION
//  629  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  630 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ZDApp_ReadNetworkRestoreState
//  631 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  632   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV     R6,#0x0
//  633 
//  634   // Look for the New Network State option.
//  635   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL   ??zgReadStartupOptions?relay
        MOV     A,R1
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_ReadNetworkRestoreState_0
//  636   {
//  637     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        INC     R6
//  638   }
//  639 
//  640   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock6
//  641 }
//  642 
//  643 /*********************************************************************
//  644  * @fn      ZDAppDetermineDeviceType()
//  645  *
//  646  * @brief   Determines the type of device to start. 
//  647  *
//  648  *          Looks at zgDeviceLogicalType and determines what type of
//  649  *          device to start.  The types are:
//  650  *            ZG_DEVICETYPE_COORDINATOR
//  651  *            ZG_DEVICETYPE_ROUTER
//  652  *            ZG_DEVICETYPE_ENDDEVICE
//  653  *
//  654  * @param   none
//  655  *
//  656  * @return  none
//  657  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  658 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ZDAppDetermineDeviceType
//  659 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  660   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDAppDetermineDeviceType_0
//  661   {
//  662     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV     A,#0x2
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
//  663     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        SJMP    ??ZDAppDetermineDeviceType_1
//  664   }
//  665   else
//  666   {
//  667     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        XRL     A,#0x1
        JNZ     ??ZDAppDetermineDeviceType_2
//  668       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x1
        SJMP    ??ZDAppDetermineDeviceType_3
//  669     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDAppDetermineDeviceType_4
//  670       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x2
??ZDAppDetermineDeviceType_3:
        MOVX    @DPTR,A
//  671     
//  672     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  673     // The device shall do rejoin the network. Otherwise, do normal join
//  674     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#(AIB_apsUseExtendedPANID & 0xff)
        MOV     R3,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
        LCALL   ??nwk_ExtPANIDValid?relay
        MOV     A,R1
        JNZ     ??ZDAppDetermineDeviceType_5
//  675     {
//  676       devStartMode = MODE_JOIN;     // Assume joining
        CLR     A
        SJMP    ??ZDAppDetermineDeviceType_6
//  677     }
//  678     else
//  679     {
//  680       devStartMode = MODE_REJOIN;  
??ZDAppDetermineDeviceType_5:
        MOV     A,#0x3
??ZDAppDetermineDeviceType_6:
        MOV     DPTR,#devStartMode
??ZDAppDetermineDeviceType_1:
        MOVX    @DPTR,A
//  681     }
//  682   }
//  683 }
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock7
//  684 
//  685 /*********************************************************************
//  686  * @fn      ZDApp_NetworkStartEvt()
//  687  *
//  688  * @brief   Process the Network Start Event
//  689  *
//  690  * @param   none
//  691  *
//  692  * @return  none
//  693  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  694 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ZDApp_NetworkStartEvt
//  695 {
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  696   if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NetworkStartEvt_0
//  697   {
//  698     // Successfully started a ZigBee network
//  699     if ( devState == DEV_COORD_STARTING )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??ZDApp_NetworkStartEvt_1
//  700     {
//  701       devState = DEV_ZB_COORD;
        MOV     A,#0x9
        MOVX    @DPTR,A
//  702     }
//  703 
//  704     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   ??osal_pwrmgr_device?relay
//  705     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        SJMP    ??ZDApp_NetworkStartEvt_2
//  706   }
//  707   else
//  708   {
//  709     // Try again with a higher energy threshold !!
//  710     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   ??NLME_GetEnergyThreshold?relay
        MOV     A,R1
        MOV     R0,A
        MOV     A,#0x10
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JNC     ??ZDApp_NetworkStartEvt_3
//  711     {
//  712       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   ??NLME_GetEnergyThreshold?relay
        MOV     A,R1
        ADD     A,#0x10
        MOV     R1,A
        LCALL   ??NLME_SetEnergyThreshold?relay
//  713       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        SJMP    ??ZDApp_NetworkStartEvt_4
//  714     }
//  715     else
//  716     {
//  717       // Failed to start network. Enter a dormant state (until user intervenes)
//  718       devState = DEV_INIT;
??ZDApp_NetworkStartEvt_3:
        MOV     A,#0x1
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  719       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
??ZDApp_NetworkStartEvt_2:
        MOV     R2,#0x10
//  720     }
//  721   }
??ZDApp_NetworkStartEvt_4:
        LJMP    ?Subroutine18 & 0xFFFF
        CFI EndBlock cfiBlock8
//  722 }
//  723 
//  724 /*********************************************************************
//  725  * @fn      ZDApp_DeviceAuthEvt()
//  726  *
//  727  * @brief   Process the Device Authentic Event
//  728  *
//  729  * @param   none
//  730  *
//  731  * @return  none
//  732  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  733 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ZDApp_DeviceAuthEvt
//  734 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_StartRouterRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  735   // received authentication from trust center
//  736   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDApp_DeviceAuthEvt_0
//  737   {
//  738     // Stop the reset timer so it doesn't reset
//  739     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL   ??ZDApp_ResetTimerCancel?relay
//  740 
//  741     devState = DEV_END_DEVICE;
        LCALL   ?Subroutine0 & 0xFFFF
//  742     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  743 
//  744     // Set the Power Manager Device
//  745 #if defined ( POWER_SAVING )
//  746     osal_pwrmgr_device( PWRMGR_BATTERY );
//  747 #endif
//  748 
//  749     if ( ZSTACK_ROUTER_BUILD )
??CrossCallReturnLabel_32:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_DeviceAuthEvt_1
        XRL     A,#0x1
        JNZ     ??ZDApp_DeviceAuthEvt_2
//  750     {
//  751       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_DeviceAuthEvt_1:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??ZDApp_DeviceAuthEvt_2
//  752       {
//  753         // NOTE: first two parameters are not used, see NLMEDE.h for details
//  754         NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??NLME_StartRouterRequest?relay
//  755       }
//  756     }
//  757 
//  758     // Notify to save info into NV
//  759     ZDApp_NVUpdate();
//  760 
//  761     // Save off the security
//  762     ZDApp_SaveNwkKey();
??ZDApp_DeviceAuthEvt_2:
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   ??ZDApp_SaveNwkKey?relay
//  763 
//  764     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
//  765     
//  766     if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JC      ??ZDApp_DeviceAuthEvt_0
//  767     {
//  768       NLME_SetPollRate( ZDApp_SavedPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ??Subroutine31_0 & 0xFFFF
//  769     }
//  770   }
??CrossCallReturnLabel_55:
        LCALL   ??NLME_SetPollRate?relay
//  771   else
//  772   {
//  773     ZDApp_NVUpdate();
//  774   }
//  775 }
??ZDApp_DeviceAuthEvt_0:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock9
//  776 
//  777 /*********************************************************************
//  778  * @fn      ZDApp_SaveNetworkStateEvt()
//  779  *
//  780  * @brief   Process the Save the Network State Event
//  781  *
//  782  * @param   none
//  783  *
//  784  * @return  none
//  785  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  786 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ZDApp_SaveNetworkStateEvt
//  787 {
        ; Saved register size: 0
        ; Auto size: 0
//  788 #if defined ( NV_RESTORE )
//  789  #if defined ( NV_TURN_OFF_RADIO )
//  790   // Turn off the radio's receiver during an NV update
//  791   uint8 RxOnIdle;
//  792   uint8 x = false;
//  793   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
//  794   ZMacSetReq( ZMacRxOnIdle, &x );
//  795  #endif
//  796 
//  797   // Update the Network State in NV
//  798   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
//  799                  NWK_NV_DEVICELIST_ENABLE |
//  800                  NWK_NV_BINDING_ENABLE    |
//  801                  NWK_NV_ADDRMGR_ENABLE );
//  802 
//  803   // Reset the NV startup option to resume from NV by
//  804   // clearing the "New" join option.
//  805   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  806 
//  807  #if defined ( NV_TURN_OFF_RADIO )
//  808   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
//  809  #endif
//  810 #endif  // NV_RESTORE
//  811 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
//  812 
//  813 /*********************************************************************
//  814  * @fn      ZDApp_RestoreNetworkState()
//  815  *
//  816  * @brief   This function will restore the network state of the
//  817  *          device if the network state is stored in NV.
//  818  *
//  819  * @param   none
//  820  *
//  821  * @return
//  822  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  823  *          restored.
//  824  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
//  825  *          This could mean that zgStartupOption said to not restore, or
//  826  *          it could mean that there was no network state to restore.
//  827  *
//  828  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  829 uint8 ZDApp_RestoreNetworkState( void )
ZDApp_RestoreNetworkState:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function ZDApp_RestoreNetworkState
//  830 {
        FUNCALL ZDApp_RestoreNetworkState, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_RestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  831   uint8 nvStat;
//  832   nwkActiveKeyItems keyItems;
//  833 
//  834   // Initialize NWK NV items
//  835   nvStat = NLME_InitNV();
        ; Setup parameters for call to function NLME_InitNV
        LCALL   ??NLME_InitNV?relay
        MOV     A,R1
        MOV     R6,A
//  836 
//  837   if ( nvStat != NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R6
        JZ      ??ZDApp_RestoreNetworkState_0
//  838   {
//  839     if ( NLME_RestoreFromNV() )
        ; Setup parameters for call to function NLME_RestoreFromNV
        LCALL   ??NLME_RestoreFromNV?relay
        MOV     A,R1
        JZ      ??ZDApp_RestoreNetworkState_0
//  840     {
//  841       // Are we a coordinator
//  842       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPTR,#ZDAppNwkAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  843       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        JNZ     ??ZDApp_RestoreNetworkState_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_RestoreNetworkState_1:
        JNZ     ??ZDApp_RestoreNetworkState_2
//  844         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
//  845       devStartMode = MODE_RESUME;
??ZDApp_RestoreNetworkState_2:
        MOV     A,#0x1
        MOV     DPTR,#devStartMode
        LCALL   ?Subroutine1 & 0xFFFF
//  846       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
//  847     }
//  848     else
//  849       nvStat = NV_ITEM_UNINIT;
//  850 
//  851     if ( ZG_SECURE_ENABLED )
//  852     {
//  853       nwkFrameCounterChanges = 0;
//  854       osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
//  855       osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
//  856 
//  857       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  858       {
//  859         ZDApp_RestoreNwkKey();
//  860       }
//  861     }
//  862 
//  863     // The default for RxOnWhenIdle is true for Routers and false for end devices
//  864     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
//  865     // other than default.
//  866   }
//  867 
//  868   if ( nvStat == ZSUCCESS )
??CrossCallReturnLabel_0:
        MOV     A,R6
        JNZ     ??ZDApp_RestoreNetworkState_0
//  869     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
        MOV     R1,#0x0
        SJMP    ??ZDApp_RestoreNetworkState_3
//  870   else
//  871     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
??ZDApp_RestoreNetworkState_0:
        MOV     R1,#0x1
??ZDApp_RestoreNetworkState_3:
        LJMP    ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock11
//  872 }
//  873 
//  874 /*********************************************************************
//  875  * @fn      ZDApp_InitUserDesc()
//  876  *
//  877  * @brief   Initialize the User Descriptor, the descriptor is read from NV
//  878  *          when needed.  If you want to initialize the User descriptor to
//  879  *          something other than all zero, do it here.
//  880  *
//  881  * @param   none
//  882  *
//  883  * @return  none
//  884  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  885 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ZDApp_InitUserDesc
//  886 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  887   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
//  888 
//  889   // Initialize the User Descriptor, the descriptor is read from NV
//  890   // when needed.  If you want to initialize the User descriptor to something
//  891   // other than all zero, do it here.
//  892   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        LCALL   ?Subroutine12 & 0xFFFF
//  893   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
//  894          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
??CrossCallReturnLabel_18:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
//  895   {
//  896     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
//  897          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
//  898     {
//  899       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDApp_InitUserDesc_0
//  900       {
//  901         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        MOVX    @DPTR,A
//  902       }
//  903     }
//  904   }
//  905 }
??ZDApp_InitUserDesc_0:
        MOV     A,#0x11
        LJMP    ??Subroutine32_0 & 0xFFFF
        CFI EndBlock cfiBlock12
//  906 
//  907 /*********************************************************************
//  908  * @fn      ZDAppCheckForHoldKey()
//  909  *
//  910  * @brief   Check for key to set the device into Hold Auto Start
//  911  *
//  912  * @param   none
//  913  *
//  914  * @return  none
//  915  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  916 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function ZDAppCheckForHoldKey
//  917 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  918 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  919   // Get Keypad directly to see if a HOLD_START is needed.
//  920   // Hold down the SW_BYPASS_START key (see OnBoard.h)
//  921   // while booting to avoid starting up the device.
//  922   if ( HalKeyRead () == SW_BYPASS_START)
        ; Setup parameters for call to function HalKeyRead
        LCALL   ??HalKeyRead?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDAppCheckForHoldKey_0
//  923   {
//  924     // Change the device state to HOLD on start up
//  925     devState = DEV_HOLD;
        CLR     A
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  926   }
//  927 #endif // HAL_KEY
//  928 }
??ZDAppCheckForHoldKey_0:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock13
//  929 
//  930 /*********************************************************************
//  931  * @fn      ZDApp_ProcessOSALMsg()
//  932  *
//  933  * @brief   Process the incoming task message.
//  934  *
//  935  * @param   msgPtr - message to process
//  936  *
//  937  * @return  none
//  938  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  939 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function ZDApp_ProcessOSALMsg
//  940 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessNetworkJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  941   // Data Confirmation message fields
//  942   uint8 sentEP;       // This should always be 0
//  943   uint8 sentStatus;
//  944   afDataConfirm_t *afDataConfirm;
//  945   uint8 tmp;
//  946 
//  947   switch ( msgPtr->event )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessOSALMsg>_0`:
        DATA
        DB        0
        DB        5
        DB        1
        DW        ??ZDApp_ProcessOSALMsg_0
        DB        2
        DW        ??ZDApp_ProcessOSALMsg_1
        DB        3
        DW        ??ZDApp_ProcessOSALMsg_2
        DB        26
        DW        ??ZDApp_ProcessOSALMsg_3
        DB        211
        DW        ??ZDApp_ProcessOSALMsg_4
        DW        ??ZDApp_ProcessOSALMsg_5
        CODE
//  948   {
//  949     // Incoming ZDO Message
//  950     case AF_INCOMING_MSG_CMD:
//  951       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_3:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL   ??ZDP_IncomingData?relay
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
//  952       break;
//  953       
//  954     case ZDO_CB_MSG:
//  955       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_4:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL   ??ZDApp_ProcessMsgCBs?relay
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
//  956       break;
//  957 
//  958     case AF_DATA_CONFIRM_CMD:
//  959       // This message is received as a confirmation of a data packet sent.
//  960       // The status is of ZStatus_t type [defined in NLMEDE.h]
//  961       // The message fields are defined in AF.h
//  962       afDataConfirm = (afDataConfirm_t *)msgPtr;
//  963       sentEP = afDataConfirm->endpoint;
//  964       sentStatus = afDataConfirm->hdr.status;
//  965 
//  966       // Action taken when confirmation is received.
//  967 #if defined ( ZIGBEE_FREQ_AGILITY )
//  968       if ( pZDNwkMgr_ProcessDataConfirm )
//  969         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
//  970 #endif
//  971       (void)sentEP;
//  972       (void)sentStatus;
//  973       break;
//  974 
//  975     case ZDO_NWK_DISC_CNF:
//  976       if (devState != DEV_NWK_DISC)
??ZDApp_ProcessOSALMsg_0:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
//  977         break;
//  978       
//  979       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_6
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
//  980       {
//  981         if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
??ZDApp_ProcessOSALMsg_6:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
        MOV     DPTR,#zdoDiscCounter
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
//  982         {
//  983           if ( devStartMode == MODE_JOIN )
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessOSALMsg_8
//  984           {
//  985             devState = DEV_NWK_JOINING;
        MOV     A,#0x3
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  986   
//  987             ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        LCALL   ??ZDApp_NodeProfileSync?relay
//  988   
//  989             if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
//  990                  BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
//  991                  ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
//  992                  ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
        ; Setup parameters for call to function NLME_JoinRequest
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??NLME_JoinRequest?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        SJMP    ??ZDApp_ProcessOSALMsg_9
//  993             {
//  994               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
//  995                   + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
//  996             }
//  997           }
//  998           else if ( devStartMode == MODE_REJOIN )
??ZDApp_ProcessOSALMsg_8:
        XRL     A,#0x3
        JNZ     ??CrossCallReturnLabel_14
//  999           {
// 1000             devState = DEV_NWK_REJOIN;
        MOV     A,#0x4
        MOV     DPTR,#devState
        MOVX    @DPTR,A
// 1001 
// 1002             // Before trying to do rejoin, check if the device has a valid short address
// 1003             // If not, generate a random short address for itself
// 1004             if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
        MOV     DPTR,#(_NIB + 20)
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessOSALMsg_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDApp_ProcessOSALMsg_10:
        JNZ     ??ZDApp_ProcessOSALMsg_11
// 1005             {
// 1006               _NIB.nwkDevAddress = osal_rand();
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     DPTR,#(_NIB + 20)
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1007               ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#((_NIB + 20) & 0xff)
        MOV     R3,#(((_NIB + 20) >> 8) & 0xff)
        MOV     R1,#0x53
        LCALL   ??ZMacSetReq?relay
// 1008             }
// 1009 
// 1010             // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1011             if ( _NIB.nwkPanId == INVALID_PAN_ID )
??ZDApp_ProcessOSALMsg_11:
        MOV     DPTR,#(_NIB + 33)
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessOSALMsg_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDApp_ProcessOSALMsg_12:
        JNZ     ??ZDApp_ProcessOSALMsg_13
// 1012             {
// 1013               _NIB.nwkPanId = BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB );
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPTR,#(_NIB + 33)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1014               ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#((_NIB + 33) & 0xff)
        MOV     R3,#(((_NIB + 33) >> 8) & 0xff)
        MOV     R1,#0x50
        LCALL   ??ZMacSetReq?relay
// 1015             }
// 1016 
// 1017             tmp = true;
??ZDApp_ProcessOSALMsg_13:
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1018             ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin 
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x52
        LCALL   ??ZMacSetReq?relay
// 1019             if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel) != ZSuccess )
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??NLME_ReJoinRequest?relay
??ZDApp_ProcessOSALMsg_9:
        MOV     A,R1
        JZ      ??CrossCallReturnLabel_14
// 1020             {
// 1021               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1022                   + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        LCALL   ?Subroutine10 & 0xFFFF
// 1023             }
// 1024           }
// 1025   
// 1026           if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_14:
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_ProcessOSALMsg_5
// 1027           {
// 1028             // The receiver is on, turn network layer polling off.
// 1029             NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        LCALL   ?Subroutine11 & 0xFFFF
// 1030             NLME_SetQueuedPollRate( 0 );
// 1031             NLME_SetResponseRate( 0 );
// 1032           }
// 1033           else
// 1034           {
// 1035             if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
// 1036             {
// 1037               ZDApp_SavedPollRate = zgPollRate;
// 1038               NLME_SetPollRate( zgRejoinPollRate );
// 1039             }
// 1040           }
// 1041         }
??CrossCallReturnLabel_16:
        SJMP    ??ZDApp_ProcessOSALMsg_5
// 1042         else
// 1043         {
// 1044           if ( continueJoining )
??ZDApp_ProcessOSALMsg_7:
        MOV     DPTR,#continueJoining
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessOSALMsg_5
// 1045           {
// 1046     #if defined ( MANAGED_SCAN )
// 1047             ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
// 1048     #else
// 1049             zdoDiscCounter++;
        MOV     DPTR,#zdoDiscCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1050             ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
// 1051                   + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     A,#-0x1
        ANL     A,?V0 + 0
        MOV     R0,A
        MOV     A,#0x64
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        SJMP    ??ZDApp_ProcessOSALMsg_14
// 1052     #endif
// 1053           }
// 1054         }
// 1055       }
// 1056       break;
// 1057 
// 1058     case ZDO_NWK_JOIN_IND:
// 1059       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessOSALMsg_1:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_15
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessOSALMsg_5
// 1060       {
// 1061         ZDApp_ProcessNetworkJoin();
??ZDApp_ProcessOSALMsg_15:
        ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
        LCALL   ??ZDApp_ProcessNetworkJoin?relay
        SJMP    ??ZDApp_ProcessOSALMsg_5
// 1062       }
// 1063       break;
// 1064 
// 1065     case ZDO_NWK_JOIN_REQ:
// 1066       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessOSALMsg_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_16
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessOSALMsg_5
// 1067       {
// 1068         retryCnt = 0;
??ZDApp_ProcessOSALMsg_16:
        CLR     A
        MOV     DPTR,#retryCnt
        MOVX    @DPTR,A
// 1069         devStartMode = MODE_RESUME;
        MOV     A,#0x1
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
// 1070         _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        LCALL   ?Subroutine1 & 0xFFFF
// 1071         osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1072         zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
??CrossCallReturnLabel_1:
        MOV     A,#0x2
        MOV     DPTR,#zgDefaultStartingScanDuration
        MOVX    @DPTR,A
// 1073         ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_ProcessOSALMsg_14:
        LCALL   ??ZDApp_NetworkInit?relay
// 1074       }
// 1075       break;
// 1076 
// 1077     default:
// 1078       if ( ZG_SECURE_ENABLED )
// 1079         ZDApp_ProcessSecMsg( msgPtr );
// 1080       break;
// 1081   }
// 1082 
// 1083 }
??ZDApp_ProcessOSALMsg_5:
        MOV     A,#0x1
        CFI EndBlock cfiBlock14
        REQUIRE ?Subroutine22
        ; // Fall through to label ?Subroutine22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function sAddrExtCpy
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#((_NIB + 53) & 0xff)
        MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??sAddrExtCpy?relay
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
// 1084 
// 1085 /*********************************************************************
// 1086  * @fn      ZDApp_ProcessMsgCBs()
// 1087  *
// 1088  * @brief   Process response messages
// 1089  *
// 1090  * @param   none
// 1091  *
// 1092  * @return  none
// 1093  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1094 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function ZDApp_ProcessMsgCBs
// 1095 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDMatchSendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseEndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_MatchEndDeviceBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 44
        MOV     A,#-0x2c
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1096   switch ( inMsg->clusterID )
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DW        3
        DW        33
        DW        34
        DW        ??ZDApp_ProcessMsgCBs_0
        DW        32768
        DW        32769
        DW        ??ZDApp_ProcessMsgCBs_1
        DW        32801
        DW        32802
        DW        ??ZDApp_ProcessMsgCBs_2
        DW        1
        DW        32
        DW        ??ZDApp_ProcessMsgCBs_3
        DW        ??ZDApp_ProcessMsgCBs_4
        CODE
// 1097   {
// 1098 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1099     case NWK_addr_rsp:
// 1100     case IEEE_addr_rsp:
// 1101       {
// 1102         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1103         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL   ??ZDO_ParseAddrRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
// 1104         if ( pAddrRsp )
        MOV     A,R6
        JNZ     ??ZDApp_ProcessMsgCBs_5
        MOV     A,R7
??ZDApp_ProcessMsgCBs_5:
        JNZ     $+5
        LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
// 1105         {
// 1106           if ( pAddrRsp->status == ZSuccess )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_6
// 1107           {
// 1108             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        INC     DPTR
        LCALL   ??Subroutine31_0 & 0xFFFF
// 1109           }
??CrossCallReturnLabel_56:
        LCALL   ??ZDO_UpdateAddrManager?relay
// 1110           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_6:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        LJMP    ??ZDApp_ProcessMsgCBs_7 & 0xFFFF
// 1111         }
// 1112       }
// 1113       break;
// 1114 #endif
// 1115       
// 1116 #if defined ( REFLECTOR )
// 1117     case Bind_req:
// 1118     case Unbind_req:
// 1119       {
// 1120         ZDO_BindUnbindReq_t bindReq;
// 1121         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseBindUnbindReq?relay
// 1122         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDO_ProcessBindUnbindReq?relay
        SJMP    ??ZDApp_ProcessMsgCBs_4
// 1123       }
// 1124       break;
// 1125 #endif      
// 1126       
// 1127 #if defined ( ZDO_COORDINATOR )
// 1128     case Bind_rsp:
// 1129     case Unbind_rsp:
// 1130       if ( matchED )
??ZDApp_ProcessMsgCBs_2:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_8
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_ProcessMsgCBs_8:
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1131       {
// 1132         ZDMatchSendState(
// 1133              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1134              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
        MOV     A,#0x21
        XRL     A,?V0 + 0
        JNZ     ??ZDApp_ProcessMsgCBs_9
        MOV     A,#-0x80
        XRL     A,?V0 + 1
??ZDApp_ProcessMsgCBs_9:
        JNZ     ??ZDApp_ProcessMsgCBs_10
        MOV     R1,#0x3
        SJMP    ??ZDApp_ProcessMsgCBs_11
??ZDApp_ProcessMsgCBs_10:
        MOV     R1,#0x2
??ZDApp_ProcessMsgCBs_11:
        ; Setup parameters for call to function ZDMatchSendState
        LCALL   ?Subroutine15 & 0xFFFF
// 1135       }
??CrossCallReturnLabel_53:
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x13
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ??ZDMatchSendState?relay
        SJMP    ??ZDApp_ProcessMsgCBs_4
// 1136       break;
// 1137       
// 1138     case End_Device_Bind_req:
// 1139       {
// 1140         ZDEndDeviceBind_t bindReq;
// 1141         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_3:
        ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseEndDeviceBindReq?relay
// 1142         ZDO_MatchEndDeviceBind( &bindReq );
        ; Setup parameters for call to function ZDO_MatchEndDeviceBind
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDO_MatchEndDeviceBind?relay
// 1143         
// 1144         // Freeing the cluster lists - if allocated.
// 1145         if ( bindReq.numInClusters )
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_12
// 1146           osal_mem_free( bindReq.inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   ??osal_mem_free?relay
// 1147         if ( bindReq.numOutClusters )
??ZDApp_ProcessMsgCBs_12:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1148           osal_mem_free( bindReq.outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_ProcessMsgCBs_7:
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
// 1149       }
// 1150       break;
// 1151 #endif      
// 1152   }
// 1153 }
??ZDApp_ProcessMsgCBs_4:
        MOV     A,#0x2c
        LJMP    ??Subroutine32_0 & 0xFFFF
        CFI EndBlock cfiBlock19
// 1154 
// 1155 /*********************************************************************
// 1156  * @fn      ZDApp_RegisterCBs()
// 1157  *
// 1158  * @brief   Process response messages
// 1159  *
// 1160  * @param   none
// 1161  *
// 1162  * @return  none
// 1163  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1164 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function ZDApp_RegisterCBs
// 1165 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1166 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1167   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x1
        LCALL   ?Subroutine4 & 0xFFFF
// 1168 #endif
// 1169 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1170   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x0
        LCALL   ?Subroutine4 & 0xFFFF
// 1171 #endif  
// 1172 #if defined ( ZDO_COORDINATOR )
// 1173   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
??CrossCallReturnLabel_38:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        LCALL   ?Subroutine4 & 0xFFFF
// 1174   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
??CrossCallReturnLabel_39:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        LCALL   ?Subroutine4 & 0xFFFF
// 1175   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
??CrossCallReturnLabel_40:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#0x0
        LCALL   ??Subroutine27_0 & 0xFFFF
// 1176 #endif
// 1177 #if defined ( REFLECTOR )
// 1178   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
??CrossCallReturnLabel_41:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   ??Subroutine27_0 & 0xFFFF
// 1179   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
??CrossCallReturnLabel_42:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??Subroutine27_0 & 0xFFFF
// 1180 #endif  
// 1181 }
??CrossCallReturnLabel_43:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond22) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond22) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond22) CFA_SP SP+-5
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond23) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond23) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond23) CFA_SP SP+-5
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond24) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond24) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond24) CFA_SP SP+-5
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOV     R3,#-0x80
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond27) CFA_SP SP+-5
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond28) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond28) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond28) CFA_SP SP+-5
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond29) CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond30) CFA_SP SP+-5
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond31) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond31) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond31) CFA_SP SP+-5
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond32) CFA_SP SP+-5
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33
// 1182 
// 1183 /*********************************************************************
// 1184  * @fn      ZDApp_ProcessSecMsg()
// 1185  *
// 1186  * @brief   Process the incoming security message.
// 1187  *
// 1188  * @param   msgPtr - message to process
// 1189  *
// 1190  * @return  none
// 1191  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1192 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function ZDApp_ProcessSecMsg
// 1193 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrTransportKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrUpdateDeviceInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrSwitchKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1194   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessSecMsg>_0`:
        DATA
        DB        0
        DB        3
        DB        6
        DW        ??ZDApp_ProcessSecMsg_0
        DB        7
        DW        ??ZDApp_ProcessSecMsg_1
        DB        10
        DW        ??ZDApp_ProcessSecMsg_2
        DW        ??ZDApp_ProcessSecMsg_3
        CODE
// 1195   {
// 1196     case ZDO_ESTABLISH_KEY_CFM:
// 1197       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1198       {
// 1199         ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
// 1200       }
// 1201       break;
// 1202 
// 1203     case ZDO_ESTABLISH_KEY_IND:
// 1204       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1205       {
// 1206         if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1207         {
// 1208           ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
// 1209         }
// 1210       }
// 1211       break;
// 1212 
// 1213     case ZDO_TRANSPORT_KEY_IND:
// 1214       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_0:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessSecMsg_4
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessSecMsg_3
// 1215       {
// 1216         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_4:
        ; Setup parameters for call to function ZDSecMgrTransportKeyInd
        LCALL   ??ZDSecMgrTransportKeyInd?relay
        SJMP    ??ZDApp_ProcessSecMsg_3
// 1217       }
// 1218       break;
// 1219 
// 1220     case ZDO_UPDATE_DEVICE_IND:
// 1221       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
??ZDApp_ProcessSecMsg_1:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessSecMsg_3
// 1222       {
// 1223         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
        ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
        LCALL   ??ZDSecMgrUpdateDeviceInd?relay
        SJMP    ??ZDApp_ProcessSecMsg_3
// 1224       }
// 1225       break;
// 1226 
// 1227     case ZDO_REMOVE_DEVICE_IND:
// 1228       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1229       {
// 1230         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1231       }
// 1232       break;
// 1233 
// 1234     case ZDO_REQUEST_KEY_IND:
// 1235       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1236       {
// 1237         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1238         {
// 1239           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
// 1240         }
// 1241       }
// 1242       break;
// 1243 
// 1244     case ZDO_SWITCH_KEY_IND:
// 1245       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessSecMsg_5
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessSecMsg_3
// 1246       {
// 1247         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_5:
        ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
        LCALL   ??ZDSecMgrSwitchKeyInd?relay
// 1248       }
// 1249       break;
// 1250     
// 1251     case ZDO_AUTHENTICATE_IND:
// 1252       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1253       {
// 1254         ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
// 1255       }
// 1256       break;
// 1257 
// 1258     case ZDO_AUTHENTICATE_CFM:
// 1259       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1260       {
// 1261         ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
// 1262       }
// 1263       break;
// 1264 
// 1265     default:
// 1266       // Unsupported messages
// 1267       break;
// 1268   }
// 1269 }
??ZDApp_ProcessSecMsg_3:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock34
// 1270 
// 1271 /*********************************************************************
// 1272  * @fn      ZDApp_ProcessNetworkJoin()
// 1273  *
// 1274  * @brief
// 1275  *
// 1276  *   Save off the Network key information.
// 1277  *
// 1278  * @param   none
// 1279  *
// 1280  * @return  none
// 1281  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1282 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function ZDApp_ProcessNetworkJoin
// 1283 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1284   if ( (devState == DEV_NWK_JOINING) ||
// 1285       ((devState == DEV_NWK_ORPHAN)  &&
// 1286        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??ZDApp_ProcessNetworkJoin_0
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
// 1287   {
// 1288     // Result of a Join attempt by this device.
// 1289     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_3
// 1290     {
// 1291       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine3 & 0xFFFF
// 1292 
// 1293 #if defined ( POWER_SAVING )
// 1294       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1295 #endif
// 1296 
// 1297       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
// 1298       {
// 1299         // wait for auth from trust center!!
// 1300         devState = DEV_END_DEVICE_UNAUTH;
// 1301 
// 1302         // Start the reset timer for MAX UNAUTH time
// 1303         ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
// 1304       }
// 1305       else
// 1306       {
// 1307         if ( ZSTACK_ROUTER_BUILD )
??CrossCallReturnLabel_28:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessNetworkJoin_4
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_5
// 1308         {
// 1309           if ( devState == DEV_NWK_ORPHAN 
// 1310             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_4:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??ZDApp_ProcessNetworkJoin_5
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??ZDApp_ProcessNetworkJoin_6
// 1311           {
// 1312             // Change NIB state to router for restore
// 1313             _NIB.nwkState = NWK_ROUTER;
        MOV     A,#0x8
        MOV     DPTR,#(_NIB + 35)
        MOVX    @DPTR,A
        SJMP    ??ZDApp_ProcessNetworkJoin_6
// 1314           }
// 1315         }
// 1316                 
// 1317         if ( devState == DEV_NWK_JOINING )
??ZDApp_ProcessNetworkJoin_5:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDApp_ProcessNetworkJoin_6
// 1318         {
// 1319           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
// 1320         }
// 1321         
// 1322         devState = DEV_END_DEVICE;
??ZDApp_ProcessNetworkJoin_6:
        MOV     A,#0x6
        MOV     DPTR,#devState
        MOVX    @DPTR,A
// 1323         if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessNetworkJoin_7
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_15 & 0xFFFF
// 1324         {
// 1325           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1326           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_7:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_15 & 0xFFFF
// 1327           {
// 1328             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??NLME_StartRouterRequest?relay
        LJMP    ??CrossCallReturnLabel_15 & 0xFFFF
// 1329           }
// 1330         }
// 1331       }
// 1332     }
// 1333     else
// 1334     {
// 1335       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
??ZDApp_ProcessNetworkJoin_3:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_8
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessNetworkJoin_8
// 1336       {
// 1337         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ     ??ZDApp_ProcessNetworkJoin_9
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_9:
        JZ      ??ZDApp_ProcessNetworkJoin_10
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDApp_ProcessNetworkJoin_11
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_11:
        JNZ     ??ZDApp_ProcessNetworkJoin_12
// 1338           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_10:
        CLR     A
        MOV     DPTR,#devStartMode
        SJMP    ??ZDApp_ProcessNetworkJoin_13
// 1339         else
// 1340         {
// 1341           devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_12:
        MOV     A,#0x3
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
// 1342           _tmpRejoinState = true;
        MOV     A,#0x1
        MOV     DPTR,#_tmpRejoinState
??ZDApp_ProcessNetworkJoin_13:
        MOVX    @DPTR,A
// 1343         }
// 1344       }
// 1345 
// 1346       if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 1347            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??ZDApp_ProcessNetworkJoin_8:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#-0x2
        XRL     A,?V0 + 0
        JNZ     ??ZDApp_ProcessNetworkJoin_14
        MOV     A,#-0x1
        XRL     A,?V0 + 1
??ZDApp_ProcessNetworkJoin_14:
        JNZ     ??ZDApp_ProcessNetworkJoin_15
        MOV     DPTR,#(_NIB + 20)
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_16
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDApp_ProcessNetworkJoin_16:
        JZ      ??ZDApp_ProcessNetworkJoin_17
// 1348       {
// 1349         uint16 addr = INVALID_NODE_ADDR;
??ZDApp_ProcessNetworkJoin_15:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1350         // Invalidate nwk addr so end device does not use in its data reqs.
// 1351         _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#(_NIB + 20)
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1352         ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
        ; Setup parameters for call to function ZMacSetReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x53
        LCALL   ??ZMacSetReq?relay
// 1353       }
// 1354 
// 1355       zdoDiscCounter = 1;
??ZDApp_ProcessNetworkJoin_17:
        MOV     A,#0x1
        MOV     DPTR,#zdoDiscCounter
??ZDApp_ProcessNetworkJoin_18:
        MOVX    @DPTR,A
// 1356 
// 1357 //      ZDApp_NetworkInit( (uint16)
// 1358 //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
// 1359 //                          (NWK_START_DELAY * 5)) );
// 1360       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1361            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        SJMP    ??ZDApp_ProcessNetworkJoin_19
// 1362     }
// 1363   }
// 1364   else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
??ZDApp_ProcessNetworkJoin_1:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??CrossCallReturnLabel_15
// 1365   {
// 1366     // results of an orphaning attempt by this device
// 1367     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_20
// 1368     {
// 1369       if ( ZG_SECURE_ENABLED )
// 1370       {
// 1371         ZDApp_RestoreNwkKey();
// 1372       }
// 1373       
// 1374       devState = DEV_END_DEVICE;
        LCALL   ?Subroutine0 & 0xFFFF
// 1375       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1376       // setup Power Manager Device
// 1377 #if defined ( POWER_SAVING )
// 1378       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1379 #endif
// 1380 
// 1381       if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_33:
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??CrossCallReturnLabel_17
// 1382       {
// 1383         // The receiver is on, turn network layer polling off.
// 1384         NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        LCALL   ?Subroutine11 & 0xFFFF
// 1385         NLME_SetQueuedPollRate( 0 );
// 1386         NLME_SetResponseRate( 0 );
// 1387       }
// 1388 
// 1389       if ( ZSTACK_ROUTER_BUILD )
??CrossCallReturnLabel_17:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessNetworkJoin_21
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_22
// 1390       {
// 1391         // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1392         if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_21:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      ??ZDApp_ProcessNetworkJoin_22
// 1393         {
// 1394           NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??NLME_StartRouterRequest?relay
// 1395         }
// 1396       }
// 1397       
// 1398       ZDApp_AnnounceNewAddress();
??ZDApp_ProcessNetworkJoin_22:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
        SJMP    ??CrossCallReturnLabel_15
// 1399     }
// 1400     else
// 1401     {
// 1402       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_20:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_19
// 1403       {
// 1404         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDApp_ProcessNetworkJoin_23
// 1405         {
// 1406           if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        JNZ     ??ZDApp_ProcessNetworkJoin_24
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_24:
        JZ      ??ZDApp_ProcessNetworkJoin_25
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDApp_ProcessNetworkJoin_26
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_26:
        JNZ     ??ZDApp_ProcessNetworkJoin_27
// 1407             devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_25:
        CLR     A
        MOV     DPTR,#devStartMode
        SJMP    ??ZDApp_ProcessNetworkJoin_18
// 1408           else
// 1409           {
// 1410             devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_27:
        MOV     A,#0x3
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
// 1411             _tmpRejoinState = true;
        MOV     A,#0x1
        MOV     DPTR,#_tmpRejoinState
        SJMP    ??ZDApp_ProcessNetworkJoin_18
// 1412           }
// 1413         }
// 1414         // Do a normal join to the network after certain times of rejoin retries
// 1415         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_23:
        MOV     DPTR,#AIB_apsUseInsecureJoin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessNetworkJoin_25
// 1416         {
// 1417           devStartMode = MODE_JOIN;
// 1418         }
// 1419       }
// 1420 
// 1421 
// 1422       // setup a retry for later...
// 1423       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1424            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
??ZDApp_ProcessNetworkJoin_19:
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        LCALL   ?Subroutine10 & 0xFFFF
// 1425     }
// 1426   }
// 1427 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
// 1428   else
// 1429   {
// 1430     // Assume from address conflict
// 1431     if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
// 1432     {
// 1433       // Notify the network
// 1434       ZDApp_AnnounceNewAddress();
// 1435       
// 1436       // Notify apps
// 1437       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1438     }
// 1439   }
// 1440 #endif
// 1441 }
??CrossCallReturnLabel_15:
        LJMP    ?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetPollRate?relay
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetQueuedPollRate?relay
        ; Setup parameters for call to function NLME_SetResponseRate
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetResponseRate?relay
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     A,#0x7f
        ANL     A,?V0 + 0
        MOV     R0,A
        MOV     A,#0x64
        ADD     A,R0
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??ZDApp_NetworkInit?relay
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOV     DPTR,#(_NIB + 33)
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#-0x1
        XRL     A,R0
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        MOV     A,#0x6
        MOV     DPTR,#devState
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
        REQUIRE ?Subroutine23
        ; // Fall through to label ?Subroutine23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond58) CFA_SP SP+-5
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond59) CFA_SP SP+-5
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond60) CFA_SP SP+-5
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond61) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond61) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond61) CFA_SP SP+-5
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond62) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond62) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond62) CFA_SP SP+-5
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
// 1442 
// 1443 /*********************************************************************
// 1444  * @fn      ZDApp_SaveNwkKey()
// 1445  *
// 1446  * @brief   Save off the Network key information.
// 1447  *
// 1448  * @param   none
// 1449  *
// 1450  * @return  none
// 1451  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1452 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function ZDApp_SaveNwkKey
// 1453 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1454   nwkActiveKeyItems keyItems;
// 1455 
// 1456   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SSP_ReadNwkActiveKey?relay
// 1457   keyItems.frameCounter++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
// 1458 
// 1459   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1460                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1461 
// 1462   nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock64
// 1463 }
        REQUIRE ?Subroutine24
        ; // Fall through to label ?Subroutine24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x15
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73
// 1464 
// 1465 /*********************************************************************
// 1466  * @fn      ZDApp_ResetNwkKey()
// 1467  *
// 1468  * @brief   Reset the Network key information in NV.
// 1469  *
// 1470  * @param   none
// 1471  *
// 1472  * @return  none
// 1473  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1474 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function ZDApp_ResetNwkKey
// 1475 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1476   nwkActiveKeyItems keyItems;
// 1477 
// 1478   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        LCALL   ?Subroutine12 & 0xFFFF
// 1479   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1480                 (void *)&keyItems );
??CrossCallReturnLabel_19:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1481 }
        MOV     A,#0x15
        LJMP    ??Subroutine32_0 & 0xFFFF
        CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77
// 1482 
// 1483 /*********************************************************************
// 1484  * @fn      ZDApp_RestoreNwkKey()
// 1485  *
// 1486  * @brief
// 1487  *
// 1488  *   Save off the Network key information.
// 1489  *
// 1490  * @param   none
// 1491  *
// 1492  * @return  true if restored from NV, false if not
// 1493  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1494 uint8 ZDApp_RestoreNwkKey( void )
ZDApp_RestoreNwkKey:
        CFI Block cfiBlock78 Using cfiCommon0
        CFI Function ZDApp_RestoreNwkKey
// 1495 {
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1496   nwkActiveKeyItems keyItems;
// 1497   uint8 ret = false;
        MOV     R6,#0x0
// 1498 
// 1499   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1500       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,R6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??ZDApp_RestoreNwkKey_0
// 1501   {
// 1502     if ( keyItems.frameCounter > 0 )
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??ZDApp_RestoreNwkKey_1
// 1503     {
// 1504       // Restore the key information
// 1505       keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
// 1506       nwkFrameCounter = keyItems.frameCounter;
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     DPTR,#nwkFrameCounter
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 1507       ret = true;
        INC     R6
// 1508     }
// 1509 
// 1510     // Force a save for the first frame counter increment
// 1511     nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
??ZDApp_RestoreNwkKey_1:
        MOV     DPTR,#nwkFrameCounterChanges
        MOV     A,#-0x17
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1512   }
// 1513   return ( ret );
??ZDApp_RestoreNwkKey_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ?Subroutine24 & 0xFFFF
        CFI EndBlock cfiBlock78
// 1514 }
// 1515 
// 1516 /*********************************************************************
// 1517  * @fn      ZDApp_ResetTimerStart
// 1518  *
// 1519  * @brief   Start the reset timer.
// 1520  *
// 1521  * @param   delay - delay time(ms) before reset
// 1522  *
// 1523  * @return  none
// 1524  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1525 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function ZDApp_ResetTimerStart
// 1526 {
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1527   // Start the rest timer
// 1528   osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x4
        LCALL   ?Subroutine8 & 0xFFFF
// 1529 }
??CrossCallReturnLabel_10:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond80 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond81) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond81) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond81) CFA_SP SP+-5
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond82) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond82) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond82) CFA_SP SP+-5
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83
// 1530 
// 1531 /*********************************************************************
// 1532  * @fn      ZDApp_ResetTimerCancel
// 1533  *
// 1534  * @brief   Cancel the reset timer.
// 1535  *
// 1536  * @param   none
// 1537  *
// 1538  * @return  none
// 1539  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1540 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function ZDApp_ResetTimerCancel
// 1541 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1542   // Cancel the reset timer
// 1543   osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
// 1544 }
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock84
// 1545 
// 1546 /*********************************************************************
// 1547  * @fn      ZDApp_LeaveCtrlInit
// 1548  *
// 1549  * @brief   Initialize the leave control logic.
// 1550  *
// 1551  * @param   none
// 1552  *
// 1553  * @return  none
// 1554  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1555 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
        CFI Block cfiBlock85 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlInit
// 1556 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1557   uint8 status;
// 1558 
// 1559 
// 1560   // Initialize control state
// 1561   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL   ?Subroutine2 & 0xFFFF
// 1562 
// 1563   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 1564                               sizeof(ZDApp_LeaveCtrl),
// 1565                               &ZDApp_LeaveCtrl );
// 1566 
// 1567   if ( status == ZSUCCESS )
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??ZDApp_LeaveCtrlInit_0
// 1568   {
// 1569     // Read saved control
// 1570     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 1571                   0,
// 1572                   sizeof( uint8 ),
// 1573                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1574   }
// 1575 }
??ZDApp_LeaveCtrlInit_0:
        LJMP    ??Subroutine33_0 & 0xFFFF
        CFI EndBlock cfiBlock85
// 1576 
// 1577 /*********************************************************************
// 1578  * @fn      ZDApp_LeaveCtrlSet
// 1579  *
// 1580  * @brief   Set the leave control logic.
// 1581  *
// 1582  * @param   ra - reassociate flag
// 1583  *
// 1584  * @return  none
// 1585  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1586 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
        CFI Block cfiBlock86 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlSet
// 1587 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1588   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV     A,#0x1
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    @DPTR,A
// 1589 
// 1590   if ( ra == TRUE )
        XRL     A,R1
        JNZ     ??ZDApp_LeaveCtrlSet_0
// 1591   {
// 1592     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1593   }
// 1594 
// 1595   // Write the leave control
// 1596   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1597                  0,
// 1598                  sizeof( uint8 ),
// 1599                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_46:
        LJMP    ??Subroutine32_0 & 0xFFFF
        CFI EndBlock cfiBlock86
// 1600 }
// 1601 
// 1602 /*********************************************************************
// 1603  * @fn      ZDApp_LeaveCtrlBypass
// 1604  *
// 1605  * @brief   Check if NV restore should be skipped during a leave reset.
// 1606  *
// 1607  * @param   none
// 1608  *
// 1609  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 1610  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1611 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
        CFI Block cfiBlock87 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlBypass
// 1612 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1613   uint8 bypass;
// 1614 
// 1615   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 1616   {
// 1617     bypass = TRUE;
// 1618   }
// 1619   else
// 1620   {
// 1621     bypass = FALSE;
// 1622   }
// 1623 
// 1624   return bypass;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R1,A
        SJMP    ??Subroutine29_0
        CFI EndBlock cfiBlock87
// 1625 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiBlock88 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine23 & 0xFFFF
        CFI EndBlock cfiBlock88
??CrossCallReturnLabel_30:
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
        CFI Block cfiBlock89 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock89
// 1626 
// 1627 /*********************************************************************
// 1628  * @fn      ZDApp_LeaveCtrlStartup
// 1629  *
// 1630  * @brief   Check for startup conditions during a leave reset.
// 1631  *
// 1632  * @param   state      - devState_t determined by leave control logic
// 1633  * @param   startDelay - startup delay
// 1634  *
// 1635  * @return  none
// 1636  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1637 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlStartup
// 1638 {
        FUNCALL ZDApp_LeaveCtrlStartup, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1639   *startDelay = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1640 
// 1641   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_LeaveCtrlStartup_0
// 1642   {
// 1643     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_LeaveCtrlStartup_1
// 1644     {
// 1645       *startDelay = 5000;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x78
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x13
        SJMP    ??ZDApp_LeaveCtrlStartup_2
// 1646     }
// 1647     else
// 1648     {
// 1649       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        CLR     A
        MOV     DPL,R2
        MOV     DPH,R3
??ZDApp_LeaveCtrlStartup_2:
        MOVX    @DPTR,A
// 1650     }
// 1651 
// 1652     // Set leave control to initialized state
// 1653     ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL   ?Subroutine2 & 0xFFFF
// 1654 
// 1655     // Write initialized control
// 1656     osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1657                   0,
// 1658                   sizeof( uint8 ),
// 1659                   &ZDApp_LeaveCtrl);
// 1660   }
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1661 }
??ZDApp_LeaveCtrlStartup_0:
        LJMP    ??Subroutine33_0 & 0xFFFF
        CFI EndBlock cfiBlock90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        CLR     A
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93
// 1662 
// 1663 /*********************************************************************
// 1664  * @fn      ZDApp_LeaveReset
// 1665  *
// 1666  * @brief   Setup a device reset due to a leave indication/confirm.
// 1667  *
// 1668  * @param   ra - reassociate flag
// 1669  *
// 1670  * @return  none
// 1671  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1672 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
        CFI Block cfiBlock94 Using cfiCommon0
        CFI Function ZDApp_LeaveReset
// 1673 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1674   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL   ??ZDApp_LeaveCtrlSet?relay
// 1675 
// 1676   ZDApp_ResetTimerStart( 5000 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??ZDApp_ResetTimerStart?relay
// 1677 }
        SJMP    ??Subroutine29_0
        CFI EndBlock cfiBlock94
// 1678 
// 1679 /*********************************************************************
// 1680  * @fn      ZDApp_LeaveUpdate
// 1681  *
// 1682  * @brief   Update local device data related to leaving device.
// 1683  *
// 1684  * @param   nwkAddr        - NWK address of leaving device
// 1685  * @param   extAddr        - EXT address of leaving device
// 1686  * @param   removeChildren - remove children of leaving device
// 1687  *
// 1688  * @return  none
// 1689  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1690 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
        CFI Block cfiBlock95 Using cfiCommon0
        CFI Function ZDApp_LeaveUpdate
// 1691                         uint8 removeChildren )
// 1692 {
        FUNCALL ZDApp_LeaveUpdate, NLME_RemoveChild
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
// 1693   /*
// 1694   AddrMgrEntry_t entry;
// 1695   */
// 1696   (void)nwkAddr;  // Intentionally unreferenced parameter
// 1697 
// 1698   // Remove if child
// 1699   if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_LeaveUpdate_0
        XRL     A,#0x1
        JNZ     ??ZDApp_LeaveUpdate_1
// 1700   {
// 1701     NLME_RemoveChild( extAddr, removeChildren );
??ZDApp_LeaveUpdate_0:
        ; Setup parameters for call to function NLME_RemoveChild
        LCALL   ??NLME_RemoveChild?relay
// 1702   }
// 1703 
// 1704   /*
// 1705   // Set NWK address to invalid
// 1706   entry.user    = ADDRMGR_USER_DEFAULT;
// 1707   entry.nwkAddr = INVALID_NODE_ADDR;
// 1708   AddrMgrExtAddrSet( entry.extAddr, extAddr );
// 1709   AddrMgrEntryUpdate( &entry );
// 1710 
// 1711   // Check
// 1712   if ( removeChildren == TRUE )
// 1713   {
// 1714     // Set index to INVALID_NODE_ADDR to start search
// 1715     entry.index = INVALID_NODE_ADDR;
// 1716 
// 1717     // Get first entry
// 1718     AddrMgrEntryGetNext( &entry );
// 1719 
// 1720     // Remove all descendents
// 1721     while ( entry.index != INVALID_NODE_ADDR )
// 1722     {
// 1723       // Check NWK address allocation algorithm
// 1724       if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
// 1725       {
// 1726         // Set NWK address to invalid
// 1727         entry.nwkAddr = INVALID_NODE_ADDR;
// 1728         AddrMgrEntryUpdate( &entry );
// 1729       }
// 1730 
// 1731       // Get next entry
// 1732       AddrMgrEntryGetNext( &entry );
// 1733     }
// 1734   }
// 1735   */
// 1736 }
??ZDApp_LeaveUpdate_1:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock95
// 1737 
// 1738 /*********************************************************************
// 1739  * CALLBACK FUNCTIONS
// 1740  */
// 1741 
// 1742 
// 1743 /*********************************************************************
// 1744  * @fn      ZDApp_SendEventMsg()
// 1745  *
// 1746  * @brief
// 1747  *
// 1748  *   Sends a Network Join message
// 1749  *
// 1750  * @param  cmd - command ID
// 1751  * @param  len - length (in bytes) of the buf field
// 1752  * @param  buf - buffer for the rest of the message.
// 1753  *
// 1754  * @return  none
// 1755  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1756 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendEventMsg:
        CFI Block cfiBlock96 Using cfiCommon0
        CFI Function ZDApp_SendEventMsg
// 1757 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1758   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     A,R2
        MOV     R3,A
        MOV     A,R1
        MOV     R2,A
        CFI EndBlock cfiBlock96
        REQUIRE ?Subroutine26
        ; // Fall through to label ?Subroutine26
// 1759 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiBlock97 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_34:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock97
// 1760 
// 1761 /*********************************************************************
// 1762  * @fn      ZDApp_SendMsg()
// 1763  *
// 1764  * @brief   Sends a OSAL message
// 1765  *
// 1766  * @param  taskID - Where to send the message
// 1767  * @param  cmd - command ID
// 1768  * @param  len - length (in bytes) of the buf field
// 1769  * @param  buf - buffer for the rest of the message.
// 1770  *
// 1771  * @return  none
// 1772  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1773 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendMsg:
        CFI Block cfiBlock98 Using cfiCommon0
        CFI Function ZDApp_SendMsg
// 1774 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     ?V0 + 3,R1
// 1775   osal_event_hdr_t *msgPtr;
// 1776 
// 1777   // Send the address to the task
// 1778   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        MOV     DPL,R3
        MOV     R6,DPL
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,R6
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
// 1779   if ( msgPtr )
        MOV     A,R2
        JNZ     ??ZDApp_SendMsg_0
        MOV     A,R3
??ZDApp_SendMsg_0:
        JZ      ??ZDApp_SendMsg_1
// 1780   {
// 1781     if ( (len > 0) && (buf != NULL) )
        MOV     A,R6
        JZ      ??ZDApp_SendMsg_2
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??ZDApp_SendMsg_3
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_SendMsg_3:
        JZ      ??ZDApp_SendMsg_2
// 1782       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
// 1783 
// 1784     msgPtr->event = cmd;
??ZDApp_SendMsg_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    @DPTR,A
// 1785     osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R1,?V0 + 3
        LCALL   ??osal_msg_send?relay
// 1786   }
// 1787 }
??ZDApp_SendMsg_1:
        MOV     A,#0x3
        CFI EndBlock cfiBlock98
        REQUIRE ?Subroutine25
        ; // Fall through to label ?Subroutine25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiBlock99 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Valid
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock99
// 1788 
// 1789 /*********************************************************************
// 1790  * Call Back Functions from NWK  - API
// 1791  */
// 1792 
// 1793 /*********************************************************************
// 1794  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 1795  *
// 1796  * @brief       This function returns a choice of PAN to join.
// 1797  *
// 1798  * @param       ResultCount - Number of routers discovered
// 1799  * @param               NetworkList - Pointer to list of network descriptors
// 1800  *
// 1801  * @return      ZStatus_t
// 1802  */
// 1803 #define STACK_PROFILE_MAX 2

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1804 ZStatus_t ZDO_NetworkDiscoveryConfirmCB( uint8 ResultCount,
ZDO_NetworkDiscoveryConfirmCB:
        CFI Block cfiBlock100 Using cfiCommon0
        CFI Function ZDO_NetworkDiscoveryConfirmCB
// 1805                                          networkDesc_t *NetworkList )
// 1806 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0 + 3,R1
// 1807   networkDesc_t *pNwkDesc;
// 1808   ZDO_NetworkDiscoveryCfm_t msg;
// 1809   uint8  i;
// 1810   uint8 stackProfile;
// 1811   uint8 stackProfilePro;
// 1812   uint8 selected;
// 1813 
// 1814 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1815   if ( zdappMgmtNwkDiscReqInProgress )
// 1816   {
// 1817     zdappMgmtNwkDiscReqInProgress = false;
// 1818     ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
// 1819     return ( ZSuccess );
// 1820   }
// 1821 #endif
// 1822 
// 1823   // process discovery results
// 1824   stackProfilePro = FALSE;
        MOV     ?V0 + 1,#0x0
// 1825   selected = FALSE;
// 1826 
// 1827   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV     ?V0 + 2,#0x0
// 1828   {
// 1829     pNwkDesc = NetworkList;
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1830     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV     ?V0 + 0,#0x0
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
// 1831     {
// 1832       if ( zgConfigPANID != 0xFFFF )
// 1833       {
// 1834         // PAN Id is preconfigured. check if it matches
// 1835         if ( pNwkDesc->panId != zgConfigPANID )
// 1836           continue;
// 1837       }
// 1838       
// 1839 
// 1840       if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true ) 
// 1841       {
// 1842         // If the extended Pan ID is commissioned to a non zero value
// 1843         // Only join the Pan that has match EPID
// 1844         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 1845           continue;
// 1846         
// 1847       }
// 1848 
// 1849 
// 1850         // check that network is allowing joining
// 1851         if ( ZSTACK_ROUTER_BUILD )
// 1852         {
// 1853           if ( stackProfilePro == FALSE )
// 1854           {
// 1855             if ( !pNwkDesc->routerCapacity )
// 1856             {
// 1857               continue;
// 1858             }
// 1859           }
// 1860           else
// 1861           {
// 1862             if ( !pNwkDesc->deviceCapacity )
// 1863             {
// 1864               continue;
// 1865             }
// 1866           }
// 1867         }
// 1868         else if ( ZSTACK_END_DEVICE_BUILD )
// 1869         {
// 1870           if ( !pNwkDesc->deviceCapacity )
// 1871           {
// 1872             continue;
// 1873           }
// 1874         }
// 1875 
// 1876         // check version of zigbee protocol
// 1877         if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 1878           continue;
// 1879 
// 1880         // check version of stack profile
// 1881         if ( pNwkDesc->stackProfile != zgStackProfile  )
// 1882         {
// 1883           if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE)) 
// 1884               || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
??ZDO_NetworkDiscoveryConfirmCB_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
// 1885             stackProfilePro = TRUE;
??ZDO_NetworkDiscoveryConfirmCB_4:
        MOV     ?V0 + 1,#0x1
// 1886           
// 1887           if ( stackProfile == 0 )
??ZDO_NetworkDiscoveryConfirmCB_3:
        MOV     A,?V0 + 2
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
??ZDO_NetworkDiscoveryConfirmCB_6:
        INC     ?V0 + 0
        MOV     A,R6
        ADD     A,#0x16
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??ZDO_NetworkDiscoveryConfirmCB_1:
        MOV     A,R6
        ADD     A,#0x7
        MOV     ?V0 + 6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     A,R6
        ADD     A,#0xd
        MOV     ?V0 + 4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,?V0 + 3
        JC      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_7 & 0xFFFF
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDO_NetworkDiscoveryConfirmCB_8:
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_9
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_NetworkDiscoveryConfirmCB_10:
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_6
??ZDO_NetworkDiscoveryConfirmCB_9:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??nwk_ExtPANIDValid?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_11
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
??ZDO_NetworkDiscoveryConfirmCB_11:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_12
        XRL     A,#0x1
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_13
??ZDO_NetworkDiscoveryConfirmCB_12:
        MOV     A,?V0 + 1
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_14
        MOV     DPL,R6
        MOV     DPH,R7
??ZDO_NetworkDiscoveryConfirmCB_15:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_16
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
??ZDO_NetworkDiscoveryConfirmCB_14:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_15
??ZDO_NetworkDiscoveryConfirmCB_13:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_14
??ZDO_NetworkDiscoveryConfirmCB_16:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(_NIB + 17)
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_5
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
        MOV     A,#0x2
        XRL     A,R2
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
// 1888           {
// 1889             continue;
// 1890           }
// 1891         }
// 1892 
// 1893       // check if beacon order is the right value..
// 1894       //  if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
// 1895       //    continue;
// 1896 
// 1897       // choose this pan for joining
// 1898       break;
// 1899     } 
// 1900     if (i < ResultCount)
// 1901     {
// 1902      selected = TRUE;
// 1903       break;
// 1904     }
// 1905    
// 1906     // break if selected or stack profile pro wasn't found
// 1907     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
??ZDO_NetworkDiscoveryConfirmCB_7:
        MOV     A,?V0 + 1
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_17
// 1908     {
// 1909       break;
// 1910     }
// 1911   }
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x2
        JNC     $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
// 1912 
// 1913   if ( i == ResultCount )
??ZDO_NetworkDiscoveryConfirmCB_17:
        MOV     A,?V0 + 3
        XRL     A,?V0 + 0
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_5
// 1914   {
// 1915     msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_18
// 1916   }
// 1917   else
// 1918   {
// 1919     msg.hdr.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_5:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1920     msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1921     msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1922     msg.logicalChannel = pNwkDesc->logicalChannel;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1923     msg.version = pNwkDesc->version;
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1924     osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
// 1925   }
// 1926 
// 1927   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (uint8 *)&msg );
??ZDO_NetworkDiscoveryConfirmCB_18:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0xe
        MOV     R2,#0x1
        LCALL   ?Subroutine7 & 0xFFFF
// 1928 
// 1929   return (ZSuccess);
??CrossCallReturnLabel_35:
        MOV     R1,#0x0
        MOV     A,#0x10
        LJMP    ?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock100
// 1930 }  // ZDO_NetworkDiscoveryConfirmCB
// 1931 
// 1932 /*********************************************************************
// 1933  * @fn          ZDO_NetworkFormationConfirmCB
// 1934  *
// 1935  * @brief       This function reports the results of the request to
// 1936  *              initialize a coordinator in a network.
// 1937  *
// 1938  * @param       Status - Result of NLME_NetworkFormationRequest()
// 1939  *
// 1940  * @return      none
// 1941  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1942 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
        CFI Block cfiBlock101 Using cfiCommon0
        CFI Function ZDO_NetworkFormationConfirmCB
// 1943 {
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1944   nwkStatus = (byte)Status;
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 1945 
// 1946   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_NetworkFormationConfirmCB_0
// 1947   {
// 1948     // LED on shows Coordinator started
// 1949     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine16 & 0xFFFF
// 1950 
// 1951     // LED off forgets HOLD_AUTO_START
// 1952     HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
// 1953 
// 1954 #if defined ( ZBIT )
// 1955     SIM_SetColor(0xd0ffd0);
// 1956 #endif
// 1957 
// 1958     if ( devState == DEV_HOLD )
??CrossCallReturnLabel_24:
        JNZ     ??ZDO_NetworkFormationConfirmCB_1
// 1959     {
// 1960       // Began with HOLD_AUTO_START
// 1961       devState = DEV_COORD_STARTING;
        MOV     A,#0x8
        MOVX    @DPTR,A
        SJMP    ??ZDO_NetworkFormationConfirmCB_1
// 1962     }
// 1963   }
// 1964 #if defined(BLINK_LEDS)
// 1965   else
// 1966     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
// 1967 #endif
// 1968 
// 1969   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LJMP    ?Subroutine18 & 0xFFFF
        CFI EndBlock cfiBlock101
// 1970 }
// 1971 
// 1972 /*********************************************************************
// 1973  * @fn          ZDO_StartRouterConfirmCB
// 1974  *
// 1975  * @brief       This function reports the results of the request to
// 1976  *              start functioning as a router in a network.
// 1977  *
// 1978  * @param       Status - Result of NLME_StartRouterRequest()
// 1979  *
// 1980  * @return      none
// 1981  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1982 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
        CFI Block cfiBlock102 Using cfiCommon0
        CFI Function ZDO_StartRouterConfirmCB
// 1983 {
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1984   nwkStatus = (byte)Status;
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 1985 
// 1986   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_StartRouterConfirmCB_0
// 1987   {
// 1988     // LED on shows Router started
// 1989     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine16 & 0xFFFF
// 1990     // LED off forgets HOLD_AUTO_START
// 1991     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 1992     if ( devState == DEV_HOLD )
??CrossCallReturnLabel_25:
        JNZ     ??ZDO_StartRouterConfirmCB_1
// 1993     {
// 1994       // Began with HOLD_AUTO_START
// 1995       devState = DEV_END_DEVICE;
        MOV     A,#0x6
        MOVX    @DPTR,A
        SJMP    ??ZDO_StartRouterConfirmCB_1
// 1996     }
// 1997   }
// 1998 #if defined(BLINK_LEDS)
// 1999   else
// 2000     HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
// 2001 #endif
// 2002 
// 2003   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        LJMP    ?Subroutine18 & 0xFFFF
        CFI EndBlock cfiBlock102
// 2004 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond103 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond104) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond104) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond104) CFA_SP SP+-5
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond105) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond105) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond105) CFA_SP SP+-5
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106
// 2005 
// 2006 /*********************************************************************
// 2007  * @fn          ZDO_JoinConfirmCB
// 2008  *
// 2009  * @brief       This function allows the next hight layer to be notified
// 2010  *              of the results of its request to join itself or another
// 2011  *              device to a network.
// 2012  *
// 2013  * @param       Status - Result of NLME_JoinRequest()
// 2014  *
// 2015  * @return      none
// 2016  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2017 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
        CFI Block cfiBlock107 Using cfiCommon0
        CFI Function ZDO_JoinConfirmCB
// 2018 {
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2019   (void)PanId;  // remove if this parameter is used.
// 2020   
// 2021   nwkStatus = (byte)Status;
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2022 
// 2023   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_JoinConfirmCB_0
// 2024   {
// 2025     // LED on shows device joined
// 2026     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine16 & 0xFFFF
// 2027     // LED off forgets HOLD_AUTO_START
// 2028     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2029     if ( (devState == DEV_HOLD) )
??CrossCallReturnLabel_26:
        JNZ     ??ZDO_JoinConfirmCB_1
// 2030     {
// 2031       // Began with HOLD_AUTO_START
// 2032       devState = DEV_NWK_JOINING;
        MOV     A,#0x3
        MOVX    @DPTR,A
        SJMP    ??ZDO_JoinConfirmCB_1
// 2033     }
// 2034 
// 2035     if ( !ZG_SECURE_ENABLED )
// 2036     {
// 2037       // Notify to save info into NV
// 2038       ZDApp_NVUpdate();
// 2039     }
// 2040   }
// 2041 #if defined(BLINK_LEDS)
// 2042   else
// 2043     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_JoinConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
// 2044 #endif
// 2045 
// 2046   // Notify ZDApp
// 2047   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x2
        LJMP    ?Subroutine26 & 0xFFFF
        CFI EndBlock cfiBlock107
// 2048 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond108 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond110) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond110) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond110) CFA_SP SP+-5
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond111) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond111) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond111) CFA_SP SP+-5
        CFI Block cfiPicker112 Using cfiCommon1
        CFI (cfiPicker112) NoFunction
        CFI (cfiPicker112) Picker
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_SendMsg?relay
        RET
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiPicker112
// 2049 
// 2050 /*********************************************************************
// 2051  * @fn          ZDO_AddrChangeIndicationCB
// 2052  *
// 2053  * @brief       This function notifies the application that this
// 2054  *              device's address has changed.  Could happen in 
// 2055  *              a network with stochastic addressing (PRO).
// 2056  *
// 2057  * @param       newAddr - the new address
// 2058  *
// 2059  * @return      none
// 2060  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2061 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
ZDO_AddrChangeIndicationCB:
        CFI Block cfiBlock113 Using cfiCommon0
        CFI Function ZDO_AddrChangeIndicationCB
// 2062 {
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2063   (void)newAddr;  // remove if this parameter is used
// 2064   
// 2065   // Notify to save info into NV
// 2066   ZDApp_NVUpdate();
// 2067 
// 2068   // Notify the applications   
// 2069   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine3 & 0xFFFF
// 2070 
// 2071   // Send out a device announce
// 2072   ZDApp_AnnounceNewAddress();
??CrossCallReturnLabel_29:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
// 2073 }
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock113
// 2074 
// 2075 /*********************************************************************
// 2076  * @fn          ZDO_JoinIndicationCB
// 2077  *
// 2078  * @brief       This function allows the next higher layer of a
// 2079  *              coordinator to be notified of a remote join request.
// 2080  *
// 2081  * @param       ShortAddress - 16-bit address
// 2082  * @param       ExtendedAddress - IEEE (64-bit) address
// 2083  * @param       CapabilityInformation - Association Capability Information
// 2084  * @param       type - of joining - 
// 2085  *                          NWK_ASSOC_JOIN
// 2086  *                          NWK_ASSOC_REJOIN_UNSECURE
// 2087  *                          NWK_ASSOC_REJOIN_SECURE
// 2088  *
// 2089  * @return      ZStatus_t
// 2090  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2091 ZStatus_t ZDO_JoinIndicationCB( uint16 ShortAddress, uint8 *ExtendedAddress,
ZDO_JoinIndicationCB:
// 2092                                 uint8 CapabilityInformation, uint8 type )
// 2093 {
        ; Saved register size: 0
        ; Auto size: 0
// 2094   (void)ShortAddress;
// 2095   (void)ExtendedAddress;
// 2096   (void)CapabilityInformation;
// 2097   
// 2098     // Notify to save info into NV
// 2099     ZDApp_NVUpdate();
// 2100   
// 2101     // send notification to TC of new device..
// 2102     if ( ZG_SECURE_ENABLED )
// 2103     {
// 2104       if ( type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE )
// 2105       {
// 2106         osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
// 2107       }
// 2108     }
// 2109   
// 2110     return ( ZSuccess );
        REQUIRE ?Subroutine19
        ; // Fall through to label ?Subroutine19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiBlock114 Using cfiCommon0
        CFI NoFunction
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock114
// 2111 }
// 2112 
// 2113 /*********************************************************************
// 2114  * @fn          ZDO_ConcentratorIndicationCB
// 2115  *
// 2116  * @brief       This function allows the next higher layer of a
// 2117  *              device to be notified of existence of the concentrator.
// 2118  *
// 2119  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 2120  *
// 2121  * @return      void 
// 2122  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2123 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr )
ZDO_ConcentratorIndicationCB:
        CFI Block cfiBlock115 Using cfiCommon0
        CFI Function ZDO_ConcentratorIndicationCB
// 2124 {
        ; Saved register size: 0
        ; Auto size: 0
// 2125   // Write your code here to do something with the concentrator's
// 2126   // address.
// 2127   (void)nwkAddr;
// 2128 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock115
// 2129 
// 2130 /*********************************************************************
// 2131  * @fn          ZDO_LeaveCnf
// 2132  *
// 2133  * @brief       This function allows the next higher layer to be
// 2134  *              notified of the results of its request for this or
// 2135  *              a child device to leave the network.
// 2136  *
// 2137  * @param       cnf - NLME_LeaveCnf_t
// 2138  *
// 2139  * @return      none
// 2140  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2141 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
        CFI Block cfiBlock116 Using cfiCommon0
        CFI Function ZDO_LeaveCnf
// 2142 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2143   // Check for this device
// 2144   if ( osal_ExtAddrEqual( cnf->extAddr,
// 2145                           NLME_GetExtAddr() ) == TRUE )
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        ; Setup parameters for call to function sAddrExtCmp
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveCnf_0
// 2146   {
// 2147     // Prepare to leave with reset
// 2148     ZDApp_LeaveReset( cnf->rejoin );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     A,R6
        ADD     A,#0xb
        LCALL   ??Subroutine30_0 & 0xFFFF
// 2149   }
??CrossCallReturnLabel_50:
        MOV     R1,A
        LCALL   ??ZDApp_LeaveReset?relay
        SJMP    ??ZDO_LeaveCnf_1
// 2150   else if ( ZSTACK_ROUTER_BUILD )
??ZDO_LeaveCnf_0:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDO_LeaveCnf_2
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveCnf_1
// 2151   {
// 2152     // Remove device address(optionally descendents) from data
// 2153     ZDApp_LeaveUpdate( cnf->dstAddr,
// 2154                        cnf->extAddr,
// 2155                        cnf->removeChildren );
??ZDO_LeaveCnf_2:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        LCALL   ?Subroutine5 & 0xFFFF
// 2156   }
??CrossCallReturnLabel_58:
        LCALL   ??ZDApp_LeaveUpdate?relay
// 2157 }
??ZDO_LeaveCnf_1:
        LJMP    ??Subroutine33_0 & 0xFFFF
        CFI EndBlock cfiBlock116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond117 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        MOV     A,R6
        ADD     A,#0xf
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
        CFI Block cfiCond120 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker127 Using cfiCommon1
        CFI (cfiPicker127) NoFunction
        CFI (cfiPicker127) Picker
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiCond134 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker139 Using cfiCommon1
        CFI (cfiPicker139) NoFunction
        CFI (cfiPicker139) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiPicker139
// 2158 
// 2159 /*********************************************************************
// 2160  * @fn          ZDO_LeaveInd
// 2161  *
// 2162  * @brief       This function allows the next higher layer of a
// 2163  *              device to be notified of a remote leave request or
// 2164  *              indication.
// 2165  *
// 2166  * @param       ind - NLME_LeaveInd_t
// 2167  *
// 2168  * @return      none
// 2169  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2170 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
        CFI Block cfiBlock140 Using cfiCommon0
        CFI Function ZDO_LeaveInd
// 2171 {
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2172   uint8 leave;
// 2173 
// 2174 
// 2175   // Parent is requesting the leave - NWK layer filters out illegal
// 2176   // requests
// 2177   if ( ind->request == TRUE )
        MOV     A,R6
        ADD     A,#0xc
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,R6
        ADD     A,#0xb
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveInd_0
// 2178   {
// 2179     // Notify network of leave
// 2180     if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDO_LeaveInd_1
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveInd_2
// 2181     {
// 2182       NLME_LeaveRsp_t rsp;
// 2183       rsp.rejoin         = ind->rejoin;
??ZDO_LeaveInd_1:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2184       rsp.removeChildren = ind->removeChildren;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2185       NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??NLME_LeaveRsp?relay
// 2186     }
// 2187 
// 2188     // Prepare to leave with reset
// 2189     ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_2:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_LeaveReset?relay
        SJMP    ??ZDO_LeaveInd_3
// 2190   }
// 2191   else
// 2192   {
// 2193     leave = FALSE;
// 2194 
// 2195     // Check if this device needs to leave as a child or descendent
// 2196     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,?V0 + 4
        XRL     A,R2
        JNZ     ??ZDO_LeaveInd_4
        MOV     A,?V0 + 5
        XRL     A,R3
??ZDO_LeaveInd_4:
        JNZ     ??ZDO_LeaveInd_5
// 2197     {
// 2198       if ( ( ind->removeChildren == TRUE               ) ||
// 2199            ( ZDO_Config_Node_Descriptor.LogicalType ==
// 2200              NODETYPE_DEVICE                           )    )
        MOV     A,#0x1
        XRL     A,R1
        JZ      ??ZDO_LeaveInd_2
        LCALL   ?Subroutine6 & 0xFFFF
// 2201       {
// 2202         leave = TRUE;
// 2203       }
// 2204     }
??CrossCallReturnLabel_8:
        JZ      ??ZDO_LeaveInd_2
// 2205     else if ( ind->removeChildren == TRUE )
// 2206     {
// 2207       // Check NWK address allocation algorithm
// 2208       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 2209     }
// 2210 
// 2211     if ( leave == TRUE )
// 2212     {
// 2213       // Prepare to leave with reset
// 2214       ZDApp_LeaveReset( ind->rejoin );
// 2215     }
// 2216     else
// 2217     {
// 2218       // Remove device address(optionally descendents) from data
// 2219       ZDApp_LeaveUpdate( ind->srcAddr,
// 2220                          ind->extAddr,
// 2221                          ind->removeChildren );
??ZDO_LeaveInd_5:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ??ZDApp_LeaveUpdate?relay
// 2222     }
// 2223   }
// 2224 }
??ZDO_LeaveInd_3:
        MOV     A,#0x2
        LJMP    ?Subroutine25 & 0xFFFF
        CFI EndBlock cfiBlock140
// 2225 
// 2226 /*********************************************************************
// 2227  * @fn          ZDO_SyncIndicationCB
// 2228  *
// 2229  * @brief       This function allows the next higher layer of a
// 2230  *              coordinator to be notified of a loss of synchronization
// 2231  *                          with the parent/child device.
// 2232  *
// 2233  * @param       type: 0 - child; 1 - parent
// 2234  *
// 2235  *
// 2236  * @return      none
// 2237  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2238 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
        CFI Block cfiBlock141 Using cfiCommon0
        CFI Function ZDO_SyncIndicationCB
// 2239 {
        FUNCALL ZDO_SyncIndicationCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SyncIndicationCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2240   (void)shortAddr;  // Remove this line if this parameter is used.
// 2241   
// 2242   if ( ZSTACK_END_DEVICE_BUILD
// 2243     || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityInfo & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??ZDO_SyncIndicationCB_0
        MOVX    A,@DPTR
        JZ      ??ZDO_SyncIndicationCB_1
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_36
??ZDO_SyncIndicationCB_1:
        MOV     DPTR,#(_NIB + 14)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      ??CrossCallReturnLabel_36
// 2244   {
// 2245     if ( type == 1 )
??ZDO_SyncIndicationCB_0:
        MOV     A,#0x1
        XRL     A,R1
        JNZ     ??CrossCallReturnLabel_36
// 2246     {
// 2247       // We lost contact with our parent.  Clear the neighbor Table.
// 2248       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 2249       
// 2250       // Start the rejoin process.
// 2251       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x3
        LCALL   ?Subroutine7 & 0xFFFF
// 2252     }
// 2253   }
// 2254 }
??CrossCallReturnLabel_36:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock141
// 2255 
// 2256 /*********************************************************************
// 2257  * @fn          ZDO_ManytoOneFailureIndicationCB
// 2258  *
// 2259  * @brief       This function allows the next higher layer of a
// 2260  *              concentrator to be notified of a many-to-one route 
// 2261  *              failure. 
// 2262  *
// 2263  * @param       none
// 2264  *
// 2265  *
// 2266  * @return      none
// 2267  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2268 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
        CFI Block cfiBlock142 Using cfiCommon0
        CFI Function ZDO_ManytoOneFailureIndicationCB
// 2269 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, NLME_RouteDiscoveryRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ManytoOneFailureIndicationCB, NLME_RouteDiscoveryRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2270   // By default, the concentrator automatically redo many-to-one route 
// 2271   // discovery to update all many-to-one routes in the network
// 2272   // If you want anything processing other than the default,
// 2273   // please replace the following code.
// 2274   
// 2275   if( zgConcentratorRC == true )  // concentrator with route cache
        MOV     DPTR,#zgConcentratorRC
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPTR,#zgConcentratorRadius
        JNZ     ??ZDO_ManytoOneFailureIndicationCB_0
// 2276   {
// 2277     NLME_RouteDiscoveryRequest( 0x00, MTO_ROUTE, zgConcentratorRadius);
        ; Setup parameters for call to function NLME_RouteDiscoveryRequest
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R1,#0x1
        SJMP    ??ZDO_ManytoOneFailureIndicationCB_1
// 2278   }
// 2279   else
// 2280   { // Concentrator with no route cache
// 2281     NLME_RouteDiscoveryRequest( 0x00, MTO_ROUTE | NO_ROUTE_CACHE, zgConcentratorRadius);
??ZDO_ManytoOneFailureIndicationCB_0:
        ; Setup parameters for call to function NLME_RouteDiscoveryRequest
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R1,#0x3
??ZDO_ManytoOneFailureIndicationCB_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_RouteDiscoveryRequest?relay
// 2282   } 
// 2283 }
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock142
// 2284 
// 2285 
// 2286 /*********************************************************************
// 2287  * @fn          ZDO_PollConfirmCB
// 2288  *
// 2289  * @brief       This function allows the next higher layer to be
// 2290  *              notified of a Poll Confirm.
// 2291  *
// 2292  * @param       none
// 2293  *
// 2294  * @return      none
// 2295  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2296 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
        CFI Block cfiBlock143 Using cfiCommon0
        CFI Function ZDO_PollConfirmCB
// 2297 {
        ; Saved register size: 0
        ; Auto size: 0
// 2298   (void)status;  // Remove this line if this parameter is used.
// 2299   return;
        LJMP    ?BRET
        CFI EndBlock cfiBlock143
// 2300 }
// 2301 
// 2302 /******************************************************************************
// 2303  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 2304  *
// 2305  * @brief       Stub routine implemented by NHLE. NHLE should call
// 2306  *              <AddrMgrWriteNV> when appropriate.
// 2307  *
// 2308  * @param       none
// 2309  *
// 2310  * @return      none
// 2311  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2312 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
        CFI Block cfiBlock144 Using cfiCommon0
        CFI Function AddrMgrWriteNVRequest
// 2313 {
        ; Saved register size: 0
        ; Auto size: 0
// 2314 #if defined ( NV_RESTORE )  
// 2315   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
// 2316   {
// 2317     // Trigger to save info into NV
// 2318     ZDApp_NVUpdate();
// 2319   }
// 2320 #endif
// 2321 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock144
// 2322 
// 2323 /*********************************************************************
// 2324  * Call Back Functions from Security  - API
// 2325  */
// 2326 
// 2327  /*********************************************************************
// 2328  * @fn          ZDO_UpdateDeviceIndication
// 2329  *
// 2330  * @brief       This function notifies the "Trust Center" of a
// 2331  *              network when a device joins or leaves the network.
// 2332  *
// 2333  * @param       extAddr - pointer to 64 bit address of new device
// 2334  * @param       status  - 0 if a new device joined securely
// 2335  *                      - 1 if a new device joined un-securely
// 2336  *                      - 2 if a device left the network
// 2337  *
// 2338  * @return      true if newly joined device should be allowed to
// 2339  *                                              remain on network
// 2340  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2341 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
        CFI Block cfiBlock145 Using cfiCommon0
        CFI Function ZDO_UpdateDeviceIndication
// 2342 {
        ; Saved register size: 0
        ; Auto size: 0
// 2343   // can implement a network access policy based on the
// 2344   // IEEE address of newly joining devices...
// 2345   (void)extAddr;
// 2346   (void)status;
// 2347   
// 2348   return ZSuccess;
        LJMP    ?Subroutine19 & 0xFFFF
        CFI EndBlock cfiBlock145
// 2349 }
// 2350 
// 2351 /*********************************************************************
// 2352  * @fn          ZDApp_InMsgCB
// 2353  *
// 2354  * @brief       This function is called to pass up any message that is
// 2355  *              not yet supported.  This allows for the developer to
// 2356  *              support features themselves..
// 2357  *
// 2358  * @return      none
// 2359  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2360 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
        CFI Block cfiBlock146 Using cfiCommon0
        CFI Function ZDApp_InMsgCB
// 2361 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2362   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     R1,A
        MOV     A,#-0x80
        ANL     A,R1
        MOV     R3,A
        CLR     A
        JNZ     ??ZDApp_InMsgCB_0
        MOV     A,R3
??ZDApp_InMsgCB_0:
        JNZ     ??ZDApp_InMsgCB_1
// 2363   {
// 2364     // Handle the response message
// 2365   }
// 2366   else
// 2367   {
// 2368     // Handle the request message by sending a generic "not supported".
// 2369     // Device Announce doesn't have a response.
// 2370     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        MOV     A,R6
        ADD     A,#0xb
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_51:
        JNZ     ??ZDApp_InMsgCB_1
        MOV     A,#0x13
        XRL     A,R0
        JNZ     ??ZDApp_InMsgCB_2
        MOV     A,R1
??ZDApp_InMsgCB_2:
        JZ      ??ZDApp_InMsgCB_1
// 2371     {
// 2372       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 2373                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#-0x80
        ORL     A,R1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ??Subroutine30_0 & 0xFFFF
// 2374     }
// 2375   }
??CrossCallReturnLabel_52:
        MOV     R5,A
        MOV     R4,#-0x7c
        MOV     A,R6
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     R1,A
        LCALL   ??ZDP_GenericRsp?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 2376 }
??ZDApp_InMsgCB_1:
        LJMP    ??Subroutine33_0 & 0xFFFF
        CFI EndBlock cfiBlock146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond147 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker149 Using cfiCommon1
        CFI (cfiPicker149) NoFunction
        CFI (cfiPicker149) Picker
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiPicker149
// 2377 
// 2378 
// 2379 /*********************************************************************
// 2380  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 2381  *
// 2382  * @brief   Changes the Match Descriptor Response permission.
// 2383  *
// 2384  * @param   endpoint - endpoint to allow responses
// 2385  * @param   action - true to allow responses, false to not
// 2386  *
// 2387  * @return  none
// 2388  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2389 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
        CFI Block cfiBlock150 Using cfiCommon0
        CFI Function ZDApp_ChangeMatchDescRespPermission
// 2390 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2391   // Store the action
// 2392   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL   ??afSetMatch?relay
// 2393 }
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock150
// 2394 
// 2395 /*********************************************************************
// 2396  * @fn      ZDApp_NetworkInit()
// 2397  *
// 2398  * @brief   Used to start the network joining process
// 2399  *
// 2400  * @param   delay - mSec delay to wait before starting
// 2401  *
// 2402  * @return  none
// 2403  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2404 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
        CFI Block cfiBlock151 Using cfiCommon0
        CFI Function ZDApp_NetworkInit
// 2405 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2406   if ( delay )
        MOV     A,R2
        JNZ     ??ZDApp_NetworkInit_0
        MOV     A,R3
??ZDApp_NetworkInit_0:
        JZ      ??ZDApp_NetworkInit_1
// 2407   {
// 2408     // Wait awhile before starting the device
// 2409     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x1
        LCALL   ?Subroutine8 & 0xFFFF
// 2410   }
??CrossCallReturnLabel_11:
        SJMP    ??CrossCallReturnLabel_31
// 2411   else
// 2412   {
// 2413     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        LCALL   ?Subroutine23 & 0xFFFF
// 2414   }
// 2415 }
??CrossCallReturnLabel_31:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock151

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond154) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond154) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond154) CFA_SP SP+-5
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        MOV     R2,#0x10
        LJMP    ?Subroutine23 & 0xFFFF
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155
// 2416 
// 2417 /*********************************************************************
// 2418  * @fn      ZDApp_NwkStateUpdateCB()
// 2419  *
// 2420  * @brief   This function notifies that this device's network 
// 2421  *          state info has been changed.
// 2422  *
// 2423  * @param   none
// 2424  *
// 2425  * @return  none
// 2426  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2427 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
        CFI Block cfiBlock156 Using cfiCommon0
        CFI Function ZDApp_NwkStateUpdateCB
// 2428 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2429   // Notify to save info into NV
// 2430   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x2
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_get_timeoutEx?relay
// 2431   {
// 2432     // Trigger to save info into NV
// 2433     ZDApp_NVUpdate();
// 2434   }
// 2435 }
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock156
// 2436 
// 2437 /*********************************************************************
// 2438  * @fn      ZDApp_NodeProfileSync()
// 2439  *
// 2440  * @brief   Sync node with stack profile.
// 2441  *
// 2442  * @param   cfm - ZDO_NetworkDiscoveryCfm_t
// 2443  *
// 2444  * @return  none
// 2445  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2446 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
ZDApp_NodeProfileSync:
        CFI Block cfiBlock157 Using cfiCommon0
        CFI Function ZDApp_NodeProfileSync
// 2447 {
        FUNCALL ZDApp_NodeProfileSync, nwk_getNetworkDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2448   networkDesc_t* desc;
// 2449   uint16         panID;
// 2450 
// 2451   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_NodeProfileSync_0
// 2452   {
// 2453     panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
// 2454 
// 2455     desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
        ; Setup parameters for call to function nwk_getNetworkDesc
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R2
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??nwk_getNetworkDesc?relay
        MOV     DPL,R2
        MOV     DPH,R3
// 2456 
// 2457     if (desc != NULL)
        MOV     A,DPL
        JNZ     ??ZDApp_NodeProfileSync_1
        MOV     A,DPH
??ZDApp_NodeProfileSync_1:
        JZ      ??ZDApp_NodeProfileSync_0
// 2458     {
// 2459       if ( desc->stackProfile != zgStackProfile )
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      ??ZDApp_NodeProfileSync_0
// 2460       {
// 2461         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x2
        MOVX    @DPTR,A
// 2462         ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV     A,#0xc
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    @DPTR,A
// 2463         NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     R1,A
        LCALL   ??NLME_SetBroadcastFilter?relay
// 2464       }
// 2465     }
// 2466   }
// 2467 }
??ZDApp_NodeProfileSync_0:
        SJMP    ??Subroutine33_0
        CFI EndBlock cfiBlock157
// 2468 
// 2469 /*********************************************************************
// 2470  * @fn      ZDApp_StartJoiningCycle()
// 2471  *
// 2472  * @brief   Starts the joining cycle of a device.  This will only 
// 2473  *          continue an already started (or stopped) joining cycle.
// 2474  *
// 2475  * @param   none
// 2476  *
// 2477  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 2478  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2479 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
        CFI Block cfiBlock158 Using cfiCommon0
        CFI Function ZDApp_StartJoiningCycle
// 2480 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2481   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StartJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StartJoiningCycle_1
// 2482   {
// 2483     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV     A,#0x1
        MOV     DPTR,#continueJoining
        MOVX    @DPTR,A
// 2484     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDApp_NetworkInit?relay
// 2485 
// 2486     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StartJoiningCycle_2
// 2487   }
// 2488   else
// 2489     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock158
// 2490 }
// 2491 
// 2492 /*********************************************************************
// 2493  * @fn      ZDApp_StopJoiningCycle()
// 2494  *
// 2495  * @brief   Stops the joining or rejoining process of a device.
// 2496  *
// 2497  * @param   none
// 2498  *
// 2499  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 2500  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2501 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
        CFI Block cfiBlock159 Using cfiCommon0
        CFI Function ZDApp_StopJoiningCycle
// 2502 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2503   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StopJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StopJoiningCycle_1
// 2504   {
// 2505     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        CLR     A
        MOV     DPTR,#continueJoining
        MOVX    @DPTR,A
// 2506     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StopJoiningCycle_2
// 2507   }
// 2508   else
// 2509     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock159
// 2510 }
// 2511 
// 2512 /*********************************************************************
// 2513  * @fn      ZDApp_AnnounceNewAddress()
// 2514  *
// 2515  * @brief   Send Device Announce and hold all transmissions for 
// 2516  *          new address timeout.
// 2517  *
// 2518  * @param   none
// 2519  *
// 2520  * @return  none
// 2521  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2522 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
        CFI Block cfiBlock160 Using cfiCommon0
        CFI Function ZDApp_AnnounceNewAddress
// 2523 {
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2524 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 2525   // Turn off data request hold
// 2526   APSME_HoldDataRequests( 0 );
// 2527 #endif
// 2528   
// 2529   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 2530                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     R5,?V0 + 1
        LCALL   ??ZDP_DeviceAnnce?relay
        MOV     A,#0x1
        SJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock160
// 2531   
// 2532 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 2533   // Setup the timeout
// 2534   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
// 2535 #endif  
// 2536 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiBlock161 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock161
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiBlock162 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock162
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiBlock163 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock163
// 2537 
// 2538 /*********************************************************************
// 2539  * @fn          ZDApp_NVUpdate
// 2540  *
// 2541  * @brief       Set the NV Update Timer.
// 2542  *
// 2543  * @param       none
// 2544  *
// 2545  * @return      none
// 2546  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2547 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
        CFI Block cfiBlock164 Using cfiCommon0
        CFI Function ZDApp_NVUpdate
// 2548 {
        ; Saved register size: 0
        ; Auto size: 0
// 2549 #if defined ( NV_RESTORE )
// 2550   osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
// 2551 #endif
// 2552 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock164
// 2553 
// 2554 /*********************************************************************
// 2555  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 2556  *
// 2557  * @brief   Returns a PAN ID for the network layer to use during
// 2558  *          a coordinator start and there is another network with 
// 2559  *          the intended PANID.
// 2560  *
// 2561  * @param   panid - the intended PAN ID
// 2562  *
// 2563  * @return  PANID to try
// 2564  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2565 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
        CFI Block cfiBlock165 Using cfiCommon0
        CFI Function ZDApp_CoordStartPANIDConflictCB
// 2566 {
        ; Saved register size: 0
        ; Auto size: 0
// 2567   return ( panid + 1 );
        MOV     A,#0x1
        ADD     A,R2
        INC     R2
        CLR     A
        ADDC    A,R3
        MOV     R3,A
        LJMP    ?BRET
        CFI EndBlock cfiBlock165
// 2568 }

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zdoDiscCounter>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for continueJoining>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDApp_epDesc>`:
        DB 0
        DW ZDAppTaskID, 0H
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDApp_SavedPollRate>`:
        DW 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SecInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_event_loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessSecEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDOInitDevice?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDOInitDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ReadNetworkRestoreState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDAppDetermineDeviceType?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NetworkStartEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_DeviceAuthEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SaveNetworkStateEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RestoreNetworkState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RestoreNetworkState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_InitUserDesc?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDAppCheckForHoldKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessOSALMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessMsgCBs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RegisterCBs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessSecMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessNetworkJoin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SaveNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RestoreNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetTimerStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetTimerCancel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlBypass?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlStartup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SendEventMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SendMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_NetworkDiscoveryConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_NetworkFormationConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_StartRouterConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_JoinConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_AddrChangeIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_JoinIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_ConcentratorIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_LeaveCnf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_LeaveInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_SyncIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_ManytoOneFailureIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_PollConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AddrMgrWriteNVRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_UpdateDeviceIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_InMsgCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ChangeMatchDescRespPermission?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NetworkInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NwkStateUpdateCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NodeProfileSync?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_StartJoiningCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_StopJoiningCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_AnnounceNewAddress?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NVUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_CoordStartPANIDConflictCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_CoordStartPANIDConflictCB

        END
// 2569 
// 2570 /*********************************************************************
// 2571 *********************************************************************/
// 
// 4 401 bytes in segment BANKED_CODE
//   330 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    10 bytes in segment XDATA_I
//    10 bytes in segment XDATA_ID
//    12 bytes in segment XDATA_ROM_C
//    41 bytes in segment XDATA_Z
// 
// 4 741 bytes of CODE  memory
//     0 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  2 bytes shared)
//    51 bytes of XDATA memory
//
//Errors: none
//Warnings: none
