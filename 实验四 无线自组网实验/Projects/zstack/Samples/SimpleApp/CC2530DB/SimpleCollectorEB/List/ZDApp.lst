###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                01/Dec/2011  14:21:32 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Components\stack\zdo\ZDApp.c        #
#    Command line       =  -f F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg    #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Components\stack\zdo\ZDApp.c -D     #
#                          HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR  #
#                          -D NV_INIT -D xNV_RESTORE -D ZTOOL_P1 -D MT_TASK   #
#                          -D MT_SYS_FUNC -D xMT_SAPI_FUNC -D                 #
#                          xMT_SAPI_CB_FUNC -lC F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹ #
#                          âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-C #
#                          C2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstac #
#                          k\Samples\SimpleApp\CC2530DB\SimpleCollectorEB\Lis #
#                          t\ -lA F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\SimpleCollectorEB\List\             #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\Obj\ -e                  #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼ #
#                          þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack #
#                          -CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zst #
#                          ack\Samples\SimpleApp\CC2530DB\ -I                 #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\SOURCE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ #
#                          ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack- #
#                          CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zsta #
#                          ck\Samples\SimpleApp\CC2530DB\..\..\..\ZMAIN\TI253 #
#                          0DB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC253 #
#                          0EB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC #
#                          2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3. #
#                          0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\ #
#                          SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ #
#                          INCLUDE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__C #
#                          C2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3 #
#                          .0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples #
#                          \SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC #
#                          K\AF\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N #
#                          WK\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC #
#                          \ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³Ì #
#                          Ðò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4. #
#                          0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simple #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ #
#                           -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ #
#                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0 #
#                          _Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\   #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\    #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\  #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDAT #
#                          A\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD #
#                          E\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L #
#                          EVEL\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW #
#                          _LEVEL\srf04\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\ #
#                          10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC253 #
#                          0-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Sa #
#                          mples\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS #
#                          \MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\" -I "C:\Program       #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\List\ZDApp.lst           #
#    Object file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\Obj\ZDApp.r51            #
#                                                                             #
#                                                                             #
###############################################################################

F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the use can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2007 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com. 
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "ZMac.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Tasks.h"
     48          #include "OSAL_PwrMgr.h"
     49          #include "OSAL_Nv.h"
     50          #include "AF.h"
     51          #include "APSMEDE.h"
     52          #include "NLMEDE.h"
     53          #include "AddrMgr.h"
     54          #include "ZDProfile.h"
     55          #include "ZDObject.h"
     56          #include "ZDConfig.h"
     57          #include "ZDSecMgr.h"
     58          #include "ZDApp.h"
     59          #include "DebugTrace.h"
     60          #include "nwk_util.h"
     61          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     62          #include "ZGlobals.h"
     63          #include "ZDNwkMgr.h"
     64          #include "rtg.h"
     65          
     66          #include "ssp.h"
     67          
     68          #if defined( MT_ZDO_FUNC )
     69            #include "MT_ZDO.h"
     70          #endif
     71          
     72          /* HAL */
     73          #include "hal_led.h"
     74          #include "hal_lcd.h"
     75          #include "hal_key.h"
     76          
     77          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     78            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     79          #endif
     80          /*********************************************************************
     81           * MACROS
     82           */
     83          
     84          /*********************************************************************
     85           * CONSTANTS
     86           */
     87          #if !defined( NWK_START_DELAY )
     88            #define NWK_START_DELAY             100   // in milliseconds
     89          #endif
     90          
     91          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     92            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     93          #endif
     94          
     95          #if !defined( BEACON_REQUEST_DELAY )
     96            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     97          #endif
     98          
     99          #if !defined( BEACON_REQ_DELAY_MASK )
    100            #define BEACON_REQ_DELAY_MASK       0x007F
    101          #endif
    102          
    103          #define MAX_RESUME_RETRY            3
    104          
    105          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    106          
    107          // Beacon Order Settings (see NLMEDE.h)
    108          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    109          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    110          
    111          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    112            // The number of times the frame counter can change before
    113            // saving to NV
    114            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    115          #endif
    116          
    117          // Leave control bits
    118          #define ZDAPP_LEAVE_CTRL_INIT 0
    119          #define ZDAPP_LEAVE_CTRL_SET  1
    120          #define ZDAPP_LEAVE_CTRL_RA   2
    121          
    122          // Standard time to update NWK NV data
    123          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          /*********************************************************************
    129           * TYPEDEFS
    130           */
    131          
    132          /*********************************************************************
    133           * GLOBAL VARIABLES
    134           */
    135          
    136          #if defined( LCD_SUPPORTED )
    137            uint8 MatchRsps = 0;
    138          #endif
    139          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    151          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          
    155          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    157          
    158          /*********************************************************************
    159           * EXTERNAL VARIABLES
    160           */
    161          
    162          /*********************************************************************
    163           * EXTERNAL FUNCTIONS
    164           */
    165          
    166          /*********************************************************************
    167           * LOCAL FUNCTIONS
    168           */
    169          
    170          void ZDApp_NetworkStartEvt( void );
    171          void ZDApp_DeviceAuthEvt( void );
    172          void ZDApp_SaveNetworkStateEvt( void );
    173          
    174          uint8 ZDApp_ReadNetworkRestoreState( void );
    175          uint8 ZDApp_RestoreNetworkState( void );
    176          void ZDAppDetermineDeviceType( void );
    177          void ZDApp_InitUserDesc( void );
    178          void ZDAppCheckForHoldKey( void );
    179          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    180          void ZDApp_ProcessNetworkJoin( void );
    181          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    182          void ZDApp_SaveNwkKey( void );
    183          uint8 ZDApp_RestoreNwkKey( void );
    184            
    185          void ZDApp_SecInit( uint8 state );
    186          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    187          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    188          
    189          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    190          
    191          void ZDApp_ResetTimerStart( uint16 delay );
    192          void ZDApp_ResetTimerCancel( void );
    193          void ZDApp_LeaveCtrlInit( void );
    194          void ZDApp_LeaveCtrlSet( uint8 ra );
    195          uint8 ZDApp_LeaveCtrlBypass( void );
    196          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    197          void ZDApp_LeaveReset( uint8 ra );
    198          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    199                                  uint8 removeChildren );
    200          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
    201          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    202          void ZDApp_RegisterCBs( void );
    203          
    204          /*********************************************************************
    205           * LOCAL VARIABLES
    206           */
    207          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          
    213          #if defined( HOLD_AUTO_START )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214            devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    215          #else
    216            devStates_t devState = DEV_INIT;
    217          #endif
    218          
    219          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    221            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    222                                  // to parent. Set to make the device do an Orphan scan.
    223          #else
    224            // Set the default to coodinator
    225            devStartModes_t devStartMode = MODE_HARD;
    226          #endif
    227          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    228          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    229          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    230          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    231          {
    232            ZDO_EP,
    233            &ZDAppTaskID,
    234            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    235            (afNetworkLatencyReq_t)0            // No Network Latency req
    236          };
    237          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    238          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    239          
    240          /*********************************************************************
    241           * @fn      ZDApp_Init
    242           *
    243           * @brief   ZDApp Initialization function.
    244           *
    245           * @param   task_id - ZDApp Task ID
    246           *
    247           * @return  None
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    250          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    251            // Save the task ID
    252            ZDAppTaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   F0           MOVX    @DPTR,A
    253          
    254            // Initialize the ZDO global device short address storage
    255            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   000009   7402         MOV     A,#0x2
   \   00000B   90....       MOV     DPTR,#(ZDAppNwkAddr + 8)
   \   00000E   F0           MOVX    @DPTR,A
    256            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   00000F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000012   74FE         MOV     A,#-0x2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   74FF         MOV     A,#-0x1
   \   000018   F0           MOVX    @DPTR,A
    257            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay
    258          
    259            // Check for manual "Hold Auto Start"
    260            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   ??ZDAppCheckForHoldKey?relay
    261          
    262            // Initialize ZDO items and setup the device - type of device to create.
    263            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   ??ZDO_Init?relay
    264          
    265            // Register the endpoint description with the AF
    266            // This task doesn't have a Simple description, but we still need
    267            // to register the endpoint.
    268            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#(ZDApp_epDesc & 0xff)
   \   000024   7B..         MOV     R3,#((ZDApp_epDesc >> 8) & 0xff)
   \   000026   12....       LCALL   ??afRegister?relay
    269          
    270          #if defined( ZDO_USERDESC_RESPONSE )
    271            ZDApp_InitUserDesc();
    272          #endif // ZDO_USERDESC_RESPONSE
    273          
    274            // Start the device?
    275            if ( devState != DEV_HOLD )
   \   000029   90....       MOV     DPTR,#devState
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6009         JZ      ??ZDApp_Init_0
    276            {
    277              ZDOInitDevice( 0 );
   \   00002F                ; Setup parameters for call to function ZDOInitDevice
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   ??ZDOInitDevice?relay
   \   000036   800D         SJMP    ??ZDApp_Init_1
    278            }
    279            else
    280            {
    281              // Blink LED to indicate HOLD_START
    282              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \                     ??ZDApp_Init_0:
   \   000038                ; Setup parameters for call to function HalLedBlink
   \   000038   7CF4         MOV     R4,#-0xc
   \   00003A   7D01         MOV     R5,#0x1
   \   00003C   7B32         MOV     R3,#0x32
   \   00003E   7A00         MOV     R2,#0x0
   \   000040   7908         MOV     R1,#0x8
   \   000042   12....       LCALL   ??HalLedBlink?relay
    283            }
    284            
    285            ZDApp_RegisterCBs();
   \                     ??ZDApp_Init_1:
   \   000045                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000045   12....       LCALL   ??ZDApp_RegisterCBs?relay
    286          } /* ZDApp_Init() */
   \   000048   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    287          
    288          /*********************************************************************
    289           * @fn          ZDApp_SecInit
    290           *
    291           * @brief       ZDApp initialize security.
    292           *
    293           * @param       state - device initialization state
    294           *
    295           * @return      none
    296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    298          {  
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    299            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    300            {
    301              // Set the Trust Center bit
    302              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    303            }
    304          
    305            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    306            {
    307              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    308            }
    309              
    310            // Initialize ZigBee Device Security Manager
    311            ZDSecMgrInit();
   \   000004                ; Setup parameters for call to function ZDSecMgrInit
   \   000004   12....       LCALL   ??ZDSecMgrInit?relay
    312          
    313            if ( ZG_SECURE_ENABLED )
    314            {
    315              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    316              {
    317                nwkFrameCounter = 0;
    318            
    319                if( _NIB.nwkKeyLoaded == FALSE )
    320                {
    321                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    322                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    323                  {
    324                      SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0);
    325                      SSP_SwitchNwkKey( 0 );
    326                  }
    327                }
    328              }
    329            }    
    330          }
   \   000007   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    331          
    332          /*********************************************************************
    333           * @fn      ZDApp_event_loop()
    334           *
    335           * @brief   Main event loop for Zigbee device objects task. This function
    336           *          should be called at periodic intervals.
    337           *
    338           * @param   task_id - Task ID
    339           * @param   events  - Bitmap of events
    340           *
    341           * @return  none
    342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    344          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    345            uint8 *msg_ptr;
    346          
    347            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??ZDApp_event_loop_0
   \   000010   E9           MOV     A,R1
   \                     ??ZDApp_event_loop_0:
   \   000011   7031         JNZ     ??ZDApp_event_loop_1
    348            {
    349              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    350              {
    351                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    352          
    353                // Release the memory
    354                osal_msg_deallocate( msg_ptr );
    355              }
    356          
    357              // Return unprocessed events
    358              return (events ^ SYS_EVENT_MSG);
    359            }
    360          
    361            if ( events & ZDO_NETWORK_INIT )
   \   000013   EE           MOV     A,R6
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   5045         JNC     ??ZDApp_event_loop_2
    362            {
    363              // Initialize apps and start the network
    364              devState = DEV_INIT;
   \   000018   7401         MOV     A,#0x1
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   F0           MOVX    @DPTR,A
    365              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    366                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001E                ; Setup parameters for call to function ZDO_StartDevice
   \   00001E   7C0F         MOV     R4,#0xf
   \   000020   7B0F         MOV     R3,#0xf
   \   000022   90....       MOV     DPTR,#devStartMode
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   5407         ANL     A,#0x7
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??ZDO_StartDevice?relay
    367          
    368              // Return unprocessed events
    369              return (events ^ ZDO_NETWORK_INIT);
   \   000031   7401         MOV     A,#0x1
   \                     ??ZDApp_event_loop_3:
   \   000033   6E           XRL     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \                     ??ZDApp_event_loop_4:
   \   000036   FB           MOV     R3,A
   \   000037   02....       LJMP    ??ZDApp_event_loop_5 & 0xFFFF
    370            }
   \                     ??ZDApp_event_loop_6:
   \   00003A                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   00003A   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay
   \   00003D                ; Setup parameters for call to function osal_msg_deallocate
   \   00003D   AA..         MOV     R2,?V0 + 0
   \   00003F   AB..         MOV     R3,?V0 + 1
   \   000041   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??ZDApp_event_loop_1:
   \   000044                ; Setup parameters for call to function osal_msg_receive
   \   000044   90....       MOV     DPTR,#ZDAppTaskID
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   ??osal_msg_receive?relay
   \   00004C   8A..         MOV     ?V0 + 0,R2
   \   00004E   8B..         MOV     ?V0 + 1,R3
   \   000050   EA           MOV     A,R2
   \   000051   7001         JNZ     ??ZDApp_event_loop_7
   \   000053   EB           MOV     A,R3
   \                     ??ZDApp_event_loop_7:
   \   000054   70E4         JNZ     ??ZDApp_event_loop_6
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   7480         MOV     A,#-0x80
   \                     ??ZDApp_event_loop_8:
   \   00005A   6F           XRL     A,R7
   \   00005B   80D9         SJMP    ??ZDApp_event_loop_4
    371          
    372            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_event_loop_2:
   \   00005D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6004         JZ      ??ZDApp_event_loop_9
   \   000063   6401         XRL     A,#0x1
   \   000065   702E         JNZ     ??ZDApp_event_loop_10
    373            {
    374              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_9:
   \   000067   EE           MOV     A,R6
   \   000068   5402         ANL     A,#0x2
   \   00006A   6007         JZ      ??ZDApp_event_loop_11
    375              {
    376                ZDApp_NetworkStartEvt();
   \   00006C                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   00006C   12....       LCALL   ??ZDApp_NetworkStartEvt?relay
    377            
    378                // Return unprocessed events
    379                return (events ^ ZDO_NETWORK_START);
   \   00006F   7402         MOV     A,#0x2
   \   000071   80C0         SJMP    ??ZDApp_event_loop_3
    380              }
    381          
    382              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_11:
   \   000073   EE           MOV     A,R6
   \   000074   5420         ANL     A,#0x20
   \   000076   601D         JZ      ??ZDApp_event_loop_10
    383              {
    384                if ( nwkStatus == ZSuccess )
   \   000078   90....       MOV     DPTR,#nwkStatus
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   7010         JNZ     ??ZDApp_event_loop_12
    385                {
    386                  if ( devState == DEV_END_DEVICE )
   \   00007E   90....       MOV     DPTR,#devState
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6406         XRL     A,#0x6
   \   000084   7003         JNZ     ??ZDApp_event_loop_13
    387                    devState = DEV_ROUTER;
   \   000086   7407         MOV     A,#0x7
   \   000088   F0           MOVX    @DPTR,A
    388            
    389                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_13:
   \   000089                ; Setup parameters for call to function osal_pwrmgr_device
   \   000089   7900         MOV     R1,#0x0
   \   00008B   12....       LCALL   ??osal_pwrmgr_device?relay
    390                }
    391                else
    392                {
    393                  // remain as end device!!
    394                }
    395                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_12:
   \   00008E                ; Setup parameters for call to function osal_set_event
   \   00008E   12....       LCALL   ?Subroutine3 & 0xFFFF
    396            
    397                // Return unprocessed events
    398                return (events ^ ZDO_ROUTER_START);
   \                     ??CrossCallReturnLabel_27:
   \   000091   7420         MOV     A,#0x20
   \   000093   809E         SJMP    ??ZDApp_event_loop_3
    399              }
    400            }
    401            
    402            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_10:
   \   000095   EE           MOV     A,R6
   \   000096   5410         ANL     A,#0x10
   \   000098   600C         JZ      ??ZDApp_event_loop_14
    403            {
    404              ZDO_UpdateNwkStatus( devState );
   \   00009A                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00009A   90....       MOV     DPTR,#devState
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F9           MOV     R1,A
   \   00009F   12....       LCALL   ??ZDO_UpdateNwkStatus?relay
    405          
    406              // Return unprocessed events
    407              return (events ^ ZDO_STATE_CHANGE_EVT);
   \   0000A2   7410         MOV     A,#0x10
   \   0000A4   808D         SJMP    ??ZDApp_event_loop_3
    408            }
    409          
    410            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_14:
   \   0000A6   EE           MOV     A,R6
   \   0000A7   5408         ANL     A,#0x8
   \   0000A9   6006         JZ      ??ZDApp_event_loop_15
    411            {
    412              // User defined logic
    413          
    414              // Return unprocessed events
    415              return (events ^ ZDO_COMMAND_CNF);
   \   0000AB   7408         MOV     A,#0x8
   \   0000AD   6E           XRL     A,R6
   \   0000AE   FA           MOV     R2,A
   \   0000AF   8022         SJMP    ??ZDApp_event_loop_5
    416            }
    417            
    418            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_15:
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   5F           ANL     A,R7
   \   0000B4   F9           MOV     R1,A
   \   0000B5   E4           CLR     A
   \   0000B6   7001         JNZ     ??ZDApp_event_loop_16
   \   0000B8   E9           MOV     A,R1
   \                     ??ZDApp_event_loop_16:
   \   0000B9   6004         JZ      ??ZDApp_event_loop_17
    419            {
    420              ZDApp_SaveNetworkStateEvt();
    421          
    422              // Return unprocessed events
    423              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   809B         SJMP    ??ZDApp_event_loop_8
    424            }
    425          
    426            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_17:
   \   0000BF   EE           MOV     A,R6
   \   0000C0   5404         ANL     A,#0x4
   \   0000C2   600B         JZ      ??ZDApp_event_loop_18
    427            {
    428              // The device has been in the UNAUTH state, so reset
    429              // Note: there will be no return from this call
    430              SystemReset();
   \   0000C4   C2AF         CLR     0xa8.7
   \   0000C6   75C9AB       MOV     0xc9,#-0x55
   \   0000C9   75C95B       MOV     0xc9,#0x5b
   \                     ??ZDApp_event_loop_19:
   \   0000CC   00           NOP
   \   0000CD   80FD         SJMP    ??ZDApp_event_loop_19
    431            }
    432          
    433            if ( ZG_SECURE_ENABLED )
    434            {
    435              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    436            }
    437            else
    438            {
    439              // Discard or make more handlers
    440              return 0;
   \                     ??ZDApp_event_loop_18:
   \   0000CF   7A00         MOV     R2,#0x0
   \   0000D1   7B00         MOV     R3,#0x0
    441            }
   \                     ??ZDApp_event_loop_5:
   \   0000D3   02....       LJMP    ??Subroutine33_0 & 0xFFFF
   \   0000D6                REQUIRE _A_IEN0
   \   0000D6                REQUIRE WDCTL
    442          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7A10         MOV     R2,#0x10
   \   000002   02....       LJMP    ?Subroutine23 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    443          
    444          /*********************************************************************
    445           * @fn      ZDApp_ProcessSecEvent()
    446           *
    447           * @brief   Process incoming security events.
    448           *
    449           * @param   task_id - Task ID
    450           * @param   events  - Bitmap of events
    451           *
    452           * @return  none
    453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    454          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    455          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    456            (void)task_id;  // Intentionally unreferenced parameter
    457            
    458            if ( ZSTACK_ROUTER_BUILD )
   \   000009   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6004         JZ      ??ZDApp_ProcessSecEvent_0
   \   00000F   6401         XRL     A,#0x1
   \   000011   701E         JNZ     ??ZDApp_ProcessSecEvent_1
    459            {
    460              if ( events & ZDO_NEW_DEVICE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000013   EE           MOV     A,R6
   \   000014   5440         ANL     A,#0x40
   \   000016   6019         JZ      ??ZDApp_ProcessSecEvent_1
    461              {
    462                // process the new device event
    463                if ( ZDSecMgrNewDeviceEvent() == TRUE )
   \   000018                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000018   12....       LCALL   ??ZDSecMgrNewDeviceEvent?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   6401         XRL     A,#0x1
   \   00001E   7009         JNZ     ??CrossCallReturnLabel_9
    464                {
    465                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
   \   000020                ; Setup parameters for call to function osal_start_timerEx
   \   000020   7CE8         MOV     R4,#-0x18
   \   000022   7D03         MOV     R5,#0x3
   \   000024   7A40         MOV     R2,#0x40
   \   000026   12....       LCALL   ?Subroutine8 & 0xFFFF
    466                }
    467          
    468                // Return unprocessed events
    469                return (events ^ ZDO_NEW_DEVICE);
   \                     ??CrossCallReturnLabel_9:
   \   000029   7440         MOV     A,#0x40
   \                     ??ZDApp_ProcessSecEvent_2:
   \   00002B   6E           XRL     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FB           MOV     R3,A
   \   00002F   8045         SJMP    ??ZDApp_ProcessSecEvent_3
    470              }
    471            }
    472          
    473            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH) 
    474                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    475            {
    476              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    477              { 
    478                if ( events & ZDO_SECMGR_EVENT )
    479                {
    480                  ZDSecMgrEvent();
    481          
    482                  // Return unprocessed events
    483                  return (events ^ ZDO_SECMGR_EVENT);
    484                }
    485              }
    486            }
    487            
    488            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000031   EE           MOV     A,R6
   \   000032   5480         ANL     A,#0x80
   \   000034   6007         JZ      ??ZDApp_ProcessSecEvent_4
    489            {
    490              ZDApp_DeviceAuthEvt();
   \   000036                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   000036   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay
    491          
    492              // Return unprocessed events
    493              return (events ^ ZDO_DEVICE_AUTH);
   \   000039   7480         MOV     A,#-0x80
   \   00003B   80EE         SJMP    ??ZDApp_ProcessSecEvent_2
    494            }
    495          
    496            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00003D   7404         MOV     A,#0x4
   \   00003F   5F           ANL     A,R7
   \   000040   F9           MOV     R1,A
   \   000041   E4           CLR     A
   \   000042   7001         JNZ     ??ZDApp_ProcessSecEvent_5
   \   000044   E9           MOV     A,R1
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000045   602B         JZ      ??ZDApp_ProcessSecEvent_6
    497            {
    498              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   000047   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   7401         MOV     A,#0x1
   \   000051   28           ADD     A,R0
   \   000052   FA           MOV     R2,A
   \   000053   E4           CLR     A
   \   000054   39           ADDC    A,R1
   \   000055   FB           MOV     R3,A
   \   000056   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000059   EA           MOV     A,R2
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   EB           MOV     A,R3
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   C3           CLR     C
   \   00005F   E8           MOV     A,R0
   \   000060   94E9         SUBB    A,#-0x17
   \   000062   E9           MOV     A,R1
   \   000063   9403         SUBB    A,#0x3
   \   000065   4003         JC      ??ZDApp_ProcessSecEvent_7
    499                ZDApp_SaveNwkKey();
   \   000067                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000067   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    500          
    501              // Return unprocessed events
    502              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_7:
   \   00006A   EE           MOV     A,R6
   \   00006B   FA           MOV     R2,A
   \   00006C   7404         MOV     A,#0x4
   \   00006E   6F           XRL     A,R7
   \   00006F   FB           MOV     R3,A
   \   000070   8004         SJMP    ??ZDApp_ProcessSecEvent_3
    503            }
    504            
    505            // Discard or make more handlers
    506            return 0;
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000076                REQUIRE ?Subroutine21
   \   000076                ; // Fall through to label ?Subroutine21
    507          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET
    508          
    509          /*********************************************************************
    510           * Application Functions
    511           */
    512          
    513          /*********************************************************************
    514           * @fn      ZDOInitDevice
    515           *
    516           * @brief   Start the device in the network.  This function will read
    517           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    518           *   restore the network state of the device.
    519           *
    520           * @param   startDelay - timeDelay to start device (in milliseconds).
    521           *      There is a jitter added to this delay:
    522           *              ((NWK_START_DELAY + startDelay)
    523           *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    524           *
    525           * NOTE:    If the application would like to force a "new" join, the
    526           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    527           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    528           *          this function. "new" join means to not restore the network
    529           *          state of the device. Use zgWriteStartupOptions() to set these
    530           *          options.
    531           *
    532           * @return
    533           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    534           *          restored.
    535           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    536           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    537           *          it could mean that there was no network state to restore.
    538           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    539           *          with the rejoin option set to TRUE.  So, the device was not
    540           *          started in the network (one time only).  The next time this
    541           *          function is called it will start.
    542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    543          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    544          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    545            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    546            uint16 extendedDelay = 0;
    547          
    548            if ( devState == DEV_HOLD )
   \   000015   90....       MOV     DPTR,#devState
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??ZDOInitDevice_0
    549            {    
    550              // Initialize the RAM items table, in case an NV item has been updated.
    551              zgInitItems( FALSE );
   \   00001B                ; Setup parameters for call to function zgInitItems
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??zgInitItems?relay
    552            }
    553          
    554            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000020                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000020   12....       LCALL   ??ZDConfig_InitDescriptors?relay
    555            //devtag.071807.todo - fix this temporary solution
    556            _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000023   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000026   E0           MOVX    A,@DPTR
   \   000027   90....       MOV     DPTR,#(_NIB + 14)
   \   00002A   F0           MOVX    @DPTR,A
    557            
    558            devState = DEV_INIT;    // Remove the Hold state
   \   00002B   7401         MOV     A,#0x1
   \   00002D   90....       MOV     DPTR,#devState
   \   000030   F0           MOVX    @DPTR,A
    559          
    560            // Initialize leave control logic
    561            ZDApp_LeaveCtrlInit();
   \   000031                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000031   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay
    562          
    563            // Check leave control reset settings
    564            ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000034                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   AC82         MOV     R4,DPL
   \   00003C   AD83         MOV     R5,DPH
   \   00003E   7A..         MOV     R2,#(devState & 0xff)
   \   000040   7B..         MOV     R3,#((devState >> 8) & 0xff)
   \   000042   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay
    565          
    566            // Leave may make the hold state come back
    567            if ( devState == DEV_HOLD )
   \   000045   90....       MOV     DPTR,#devState
   \   000048   E0           MOVX    A,@DPTR
   \   000049   7004         JNZ     ??ZDOInitDevice_1
    568              return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   00004B   7902         MOV     R1,#0x2
   \   00004D   8037         SJMP    ??ZDOInitDevice_2
    569          
    570          #if defined ( NV_RESTORE )
    571            // Get Keypad directly to see if a reset nv is needed.
    572            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    573            // while booting to skip past NV Restore.
    574            if ( HalKeyRead() == SW_BYPASS_NV )
    575              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    576            else
    577            {
    578              // Determine if NV should be restored
    579              networkStateNV = ZDApp_ReadNetworkRestoreState();
    580            }
    581          
    582            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    583            {
    584              networkStateNV = ZDApp_RestoreNetworkState();
    585            }
    586            else
    587            {
    588              // Wipe out the network state in NV
    589              NLME_InitNV();
    590              NLME_SetDefaultNV();
    591            }
    592          #endif
    593          
    594            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    595            {
    596              ZDAppDetermineDeviceType();
   \                     ??ZDOInitDevice_1:
   \   00004F                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00004F   12....       LCALL   ??ZDAppDetermineDeviceType?relay
    597          
    598              // Only delay if joining network - not restoring network state
    599              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    600                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000052                ; Setup parameters for call to function osal_rand
   \   000052   12....       LCALL   ??osal_rand?relay
   \   000055   8A..         MOV     ?V0 + 0,R2
   \   000057   A8..         MOV     R0,?V0 + 0
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   747F         MOV     A,#0x7f
   \   000061   58           ANL     A,R0
   \   000062   F8           MOV     R0,A
   \   000063   E0           MOVX    A,@DPTR
   \   000064   28           ADD     A,R0
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   3400         ADDC    A,#0x0
   \   00006A   F9           MOV     R1,A
   \   00006B   7464         MOV     A,#0x64
   \   00006D   28           ADD     A,R0
   \   00006E   FE           MOV     R6,A
   \   00006F   E4           CLR     A
   \   000070   39           ADDC    A,R1
   \   000071   FF           MOV     R7,A
    601            }
    602          
    603            // Initialize the security for type of device
    604            ZDApp_SecInit( networkStateNV );
   \   000072                ; Setup parameters for call to function ZDSecMgrInit
   \   000072   12....       LCALL   ??ZDSecMgrInit?relay
    605            
    606            // Trigger the network start
    607            ZDApp_NetworkInit( extendedDelay );
   \   000075                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000075   EE           MOV     A,R6
   \   000076   FA           MOV     R2,A
   \   000077   EF           MOV     A,R7
   \   000078   FB           MOV     R3,A
   \   000079   12....       LCALL   ??ZDApp_NetworkInit?relay
    608          
    609            // set broadcast address mask to support broadcast filtering
    610            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   00007C                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   00007C   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   ??NLME_SetBroadcastFilter?relay
    611            
    612            return ( networkStateNV );
   \   000084   7901         MOV     R1,#0x1
   \                     ??ZDOInitDevice_2:
   \   000086   02....       LJMP    ?Subroutine20 & 0xFFFF
    613          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine32_0
   \   000002                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine33_0
   \   000003                ; // Fall through to label ??Subroutine33_0
    614          
    615          /*********************************************************************
    616           * @fn      ZDApp_ReadNetworkRestoreState
    617           *
    618           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    619           *          or not to restore the network state.
    620           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    621           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    622           *
    623           * @param   none
    624           *
    625           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    626           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    627           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    628           *          ZCD_NV_STARTUP_OPTION
    629           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    630          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    631          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    632            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    633          
    634            // Look for the New Network State option.
    635            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    636            {
    637              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    638            }
    639          
    640            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ?Subroutine21 & 0xFFFF
    641          }
    642          
    643          /*********************************************************************
    644           * @fn      ZDAppDetermineDeviceType()
    645           *
    646           * @brief   Determines the type of device to start. 
    647           *
    648           *          Looks at zgDeviceLogicalType and determines what type of
    649           *          device to start.  The types are:
    650           *            ZG_DEVICETYPE_COORDINATOR
    651           *            ZG_DEVICETYPE_ROUTER
    652           *            ZG_DEVICETYPE_ENDDEVICE
    653           *
    654           * @param   none
    655           *
    656           * @return  none
    657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    658          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    659          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    660            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    661            {
    662              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   7402         MOV     A,#0x2
   \   00000C   90....       MOV     DPTR,#devStartMode
   \   00000F   F0           MOVX    @DPTR,A
    663              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   802E         SJMP    ??ZDAppDetermineDeviceType_1
    664            }
    665            else
    666            {
    667              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700A         JNZ     ??ZDAppDetermineDeviceType_2
    668                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   4401         ORL     A,#0x1
   \   000024   800D         SJMP    ??ZDAppDetermineDeviceType_3
    669              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7009         JNZ     ??ZDAppDetermineDeviceType_4
    670                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   54F8         ANL     A,#0xf8
   \   000031   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX    @DPTR,A
    671              
    672              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    673              // The device shall do rejoin the network. Otherwise, do normal join
    674              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV     R2,#(AIB_apsUseExtendedPANID & 0xff)
   \   000036   7B..         MOV     R3,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
   \   000038   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   7003         JNZ     ??ZDAppDetermineDeviceType_5
    675              {
    676                devStartMode = MODE_JOIN;     // Assume joining
   \   00003E   E4           CLR     A
   \   00003F   8002         SJMP    ??ZDAppDetermineDeviceType_6
    677              }
    678              else
    679              {
    680                devStartMode = MODE_REJOIN;  
   \                     ??ZDAppDetermineDeviceType_5:
   \   000041   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_6:
   \   000043   90....       MOV     DPTR,#devStartMode
   \                     ??ZDAppDetermineDeviceType_1:
   \   000046   F0           MOVX    @DPTR,A
    681              }
    682            }
    683          }
   \   000047   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    684          
    685          /*********************************************************************
    686           * @fn      ZDApp_NetworkStartEvt()
    687           *
    688           * @brief   Process the Network Start Event
    689           *
    690           * @param   none
    691           *
    692           * @return  none
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    695          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    696            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    697            {
    698              // Successfully started a ZigBee network
    699              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    700              {
    701                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    702              }
    703          
    704              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay
    705              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802D         SJMP    ??ZDApp_NetworkStartEvt_2
    706            }
    707            else
    708            {
    709              // Try again with a higher energy threshold !!
    710              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   00001F   E9           MOV     A,R1
   \   000020   F8           MOV     R0,A
   \   000021   7410         MOV     A,#0x10
   \   000023   28           ADD     A,R0
   \   000024   F8           MOV     R0,A
   \   000025   E4           CLR     A
   \   000026   3400         ADDC    A,#0x0
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   94FF         SUBB    A,#-0x1
   \   00002C   E9           MOV     A,R1
   \   00002D   9400         SUBB    A,#0x0
   \   00002F   C3           CLR     C
   \   000030   65D0         XRL     A,PSW
   \   000032   33           RLC     A
   \   000033   500E         JNC     ??ZDApp_NetworkStartEvt_3
    711              {
    712                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000035                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000035                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000035   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   000038   E9           MOV     A,R1
   \   000039   2410         ADD     A,#0x10
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ??NLME_SetEnergyThreshold?relay
    713                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003F                ; Setup parameters for call to function osal_set_event
   \   00003F   7A01         MOV     R2,#0x1
   \   000041   8008         SJMP    ??ZDApp_NetworkStartEvt_4
    714              }
    715              else
    716              {
    717                // Failed to start network. Enter a dormant state (until user intervenes)
    718                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000043   7401         MOV     A,#0x1
   \   000045   90....       MOV     DPTR,#devState
   \   000048   F0           MOVX    @DPTR,A
    719                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000049                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000049   7A10         MOV     R2,#0x10
    720              }
    721            }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   00004B   02....       LJMP    ?Subroutine18 & 0xFFFF
    722          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0
    723          
    724          /*********************************************************************
    725           * @fn      ZDApp_DeviceAuthEvt()
    726           *
    727           * @brief   Process the Device Authentic Event
    728           *
    729           * @param   none
    730           *
    731           * @return  none
    732           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    733          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    734          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    735            // received authentication from trust center
    736            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7035         JNZ     ??ZDApp_DeviceAuthEvt_0
    737            {
    738              // Stop the reset timer so it doesn't reset
    739              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay
    740          
    741              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine0 & 0xFFFF
    742              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    743          
    744              // Set the Power Manager Device
    745          #if defined ( POWER_SAVING )
    746              osal_pwrmgr_device( PWRMGR_BATTERY );
    747          #endif
    748          
    749              if ( ZSTACK_ROUTER_BUILD )
   \                     ??CrossCallReturnLabel_32:
   \   000012   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6004         JZ      ??ZDApp_DeviceAuthEvt_1
   \   000018   6401         XRL     A,#0x1
   \   00001A   700E         JNZ     ??ZDApp_DeviceAuthEvt_2
    750              {
    751                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00001C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00001F   6009         JZ      ??ZDApp_DeviceAuthEvt_2
    752                {
    753                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    754                  NLME_StartRouterRequest( 0, 0, false );
   \   000021                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000021   7B00         MOV     R3,#0x0
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7900         MOV     R1,#0x0
   \   000027   12....       LCALL   ??NLME_StartRouterRequest?relay
    755                }
    756              }
    757          
    758              // Notify to save info into NV
    759              ZDApp_NVUpdate();
    760          
    761              // Save off the security
    762              ZDApp_SaveNwkKey();
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00002A                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00002A   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    763          
    764              ZDApp_AnnounceNewAddress();
   \   00002D                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00002D   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
    765              
    766              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   000030   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000033   E0           MOVX    A,@DPTR
   \   000034   A2E3         MOV     C,0xE0 /* A   */.3
   \   000036   4009         JC      ??ZDApp_DeviceAuthEvt_0
    767              {
    768                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   000038                ; Setup parameters for call to function NLME_SetPollRate
   \   000038   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00003B   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    769              }
    770            }
   \                     ??CrossCallReturnLabel_55:
   \   00003E   12....       LCALL   ??NLME_SetPollRate?relay
    771            else
    772            {
    773              ZDApp_NVUpdate();
    774            }
    775          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000041   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX    A,@DPTR
   \   000004   5407         ANL     A,#0x7
   \   000006   6402         XRL     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7406         MOV     A,#0x6
   \   000002   90....       MOV     DPTR,#devState
   \   000005   F0           MOVX    @DPTR,A
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006   7A10         MOV     R2,#0x10
   \   000008                REQUIRE ?Subroutine23
   \   000008                ; // Fall through to label ?Subroutine23

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    776          
    777          /*********************************************************************
    778           * @fn      ZDApp_SaveNetworkStateEvt()
    779           *
    780           * @brief   Process the Save the Network State Event
    781           *
    782           * @param   none
    783           *
    784           * @return  none
    785           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    786          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    787          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    788          #if defined ( NV_RESTORE )
    789           #if defined ( NV_TURN_OFF_RADIO )
    790            // Turn off the radio's receiver during an NV update
    791            uint8 RxOnIdle;
    792            uint8 x = false;
    793            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    794            ZMacSetReq( ZMacRxOnIdle, &x );
    795           #endif
    796          
    797            // Update the Network State in NV
    798            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    799                           NWK_NV_DEVICELIST_ENABLE |
    800                           NWK_NV_BINDING_ENABLE    |
    801                           NWK_NV_ADDRMGR_ENABLE );
    802          
    803            // Reset the NV startup option to resume from NV by
    804            // clearing the "New" join option.
    805            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    806          
    807           #if defined ( NV_TURN_OFF_RADIO )
    808            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    809           #endif
    810          #endif  // NV_RESTORE
    811          }
   \   000000   02....       LJMP    ?BRET
    812          
    813          /*********************************************************************
    814           * @fn      ZDApp_RestoreNetworkState()
    815           *
    816           * @brief   This function will restore the network state of the
    817           *          device if the network state is stored in NV.
    818           *
    819           * @param   none
    820           *
    821           * @return
    822           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    823           *          restored.
    824           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    825           *          This could mean that zgStartupOption said to not restore, or
    826           *          it could mean that there was no network state to restore.
    827           *
    828           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    829          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    830          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    831            uint8 nvStat;
    832            nwkActiveKeyItems keyItems;
    833          
    834            // Initialize NWK NV items
    835            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    836          
    837            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6031         JZ      ??ZDApp_RestoreNetworkState_0
    838            {
    839              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay
   \   000012   E9           MOV     A,R1
   \   000013   602B         JZ      ??ZDApp_RestoreNetworkState_0
    840              {
    841                // Are we a coordinator
    842                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
    843                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \   000020   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX    A,@DPTR
   \   000024   7002         JNZ     ??ZDApp_RestoreNetworkState_1
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000028   7007         JNZ     ??ZDApp_RestoreNetworkState_2
    844                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   54F8         ANL     A,#0xf8
   \   000030   F0           MOVX    @DPTR,A
    845                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000031   7401         MOV     A,#0x1
   \   000033   90....       MOV     DPTR,#devStartMode
   \   000036   12....       LCALL   ?Subroutine1 & 0xFFFF
    846                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    847              }
    848              else
    849                nvStat = NV_ITEM_UNINIT;
    850          
    851              if ( ZG_SECURE_ENABLED )
    852              {
    853                nwkFrameCounterChanges = 0;
    854                osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
    855                osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
    856          
    857                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    858                {
    859                  ZDApp_RestoreNwkKey();
    860                }
    861              }
    862          
    863              // The default for RxOnWhenIdle is true for Routers and false for end devices
    864              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    865              // other than default.
    866            }
    867          
    868            if ( nvStat == ZSUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000039   EE           MOV     A,R6
   \   00003A   7004         JNZ     ??ZDApp_RestoreNetworkState_0
    869              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   8002         SJMP    ??ZDApp_RestoreNetworkState_3
    870            else
    871              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000040   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_3:
   \   000042   02....       LJMP    ?Subroutine21 & 0xFFFF
    872          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#((_NIB + 53) & 0xff)
   \   000003   7D..         MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
   \   000005   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000007   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000009   12....       LCALL   ??sAddrExtCpy?relay
   \   00000C   22           RET
    873          
    874          /*********************************************************************
    875           * @fn      ZDApp_InitUserDesc()
    876           *
    877           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    878           *          when needed.  If you want to initialize the User descriptor to
    879           *          something other than all zero, do it here.
    880           *
    881           * @param   none
    882           *
    883           * @return  none
    884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    885          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    886          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    887            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    888          
    889            // Initialize the User Descriptor, the descriptor is read from NV
    890            // when needed.  If you want to initialize the User descriptor to something
    891            // other than all zero, do it here.
    892            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   12....       LCALL   ?Subroutine12 & 0xFFFF
    893            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    894                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_18:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV     R4,#0x11
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A81         MOV     R2,#-0x7f
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_nv_item_init?relay
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   E9           MOV     A,R1
   \   000023   7033         JNZ     ??ZDApp_InitUserDesc_0
    895            {
    896              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    897                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV     ?V0 + 0,#0x11
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A81         MOV     R2,#-0x7f
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   ??osal_nv_read?relay
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   \   000046   7010         JNZ     ??ZDApp_InitUserDesc_0
    898              {
    899                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6007         JZ      ??ZDApp_InitUserDesc_0
    900                {
    901                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000051   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000054   E0           MOVX    A,@DPTR
   \   000055   D2E4         SETB    0xE0 /* A   */.4
   \   000057   F0           MOVX    @DPTR,A
    902                }
    903              }
    904            }
    905          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000058   7411         MOV     A,#0x11
   \   00005A   02....       LJMP    ??Subroutine32_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   AA82         MOV     R2,DPL
   \   00000C   AB83         MOV     R3,DPH
   \   00000E   12....       LCALL   ??osal_memset?relay
   \   000011                ; Setup parameters for call to function osal_nv_item_init
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   22           RET
    906          
    907          /*********************************************************************
    908           * @fn      ZDAppCheckForHoldKey()
    909           *
    910           * @brief   Check for key to set the device into Hold Auto Start
    911           *
    912           * @param   none
    913           *
    914           * @return  none
    915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    916          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    917          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    918          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    919            // Get Keypad directly to see if a HOLD_START is needed.
    920            // Hold down the SW_BYPASS_START key (see OnBoard.h)
    921            // while booting to avoid starting up the device.
    922            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   E9           MOV     A,R1
   \   000008   6401         XRL     A,#0x1
   \   00000A   7005         JNZ     ??ZDAppCheckForHoldKey_0
    923            {
    924              // Change the device state to HOLD on start up
    925              devState = DEV_HOLD;
   \   00000C   E4           CLR     A
   \   00000D   90....       MOV     DPTR,#devState
   \   000010   F0           MOVX    @DPTR,A
    926            }
    927          #endif // HAL_KEY
    928          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    929          
    930          /*********************************************************************
    931           * @fn      ZDApp_ProcessOSALMsg()
    932           *
    933           * @brief   Process the incoming task message.
    934           *
    935           * @param   msgPtr - message to process
    936           *
    937           * @return  none
    938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    939          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
    940          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    941            // Data Confirmation message fields
    942            uint8 sentEP;       // This should always be 0
    943            uint8 sentStatus;
    944            afDataConfirm_t *afDataConfirm;
    945            uint8 tmp;
    946          
    947            switch ( msgPtr->event )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessOSALMsg>_0`:
   \   000016   00           DB        0
   \   000017   05           DB        5
   \   000018   01           DB        1
   \   000019   ....         DW        ??ZDApp_ProcessOSALMsg_0
   \   00001B   02           DB        2
   \   00001C   ....         DW        ??ZDApp_ProcessOSALMsg_1
   \   00001E   03           DB        3
   \   00001F   ....         DW        ??ZDApp_ProcessOSALMsg_2
   \   000021   1A           DB        26
   \   000022   ....         DW        ??ZDApp_ProcessOSALMsg_3
   \   000024   D3           DB        211
   \   000025   ....         DW        ??ZDApp_ProcessOSALMsg_4
   \   000027   ....         DW        ??ZDApp_ProcessOSALMsg_5
    948            {
    949              // Incoming ZDO Message
    950              case AF_INCOMING_MSG_CMD:
    951                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000029                ; Setup parameters for call to function ZDP_IncomingData
   \   000029   12....       LCALL   ??ZDP_IncomingData?relay
   \   00002C   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    952                break;
    953                
    954              case ZDO_CB_MSG:
    955                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00002F   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay
   \   000032   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    956                break;
    957          
    958              case AF_DATA_CONFIRM_CMD:
    959                // This message is received as a confirmation of a data packet sent.
    960                // The status is of ZStatus_t type [defined in NLMEDE.h]
    961                // The message fields are defined in AF.h
    962                afDataConfirm = (afDataConfirm_t *)msgPtr;
    963                sentEP = afDataConfirm->endpoint;
    964                sentStatus = afDataConfirm->hdr.status;
    965          
    966                // Action taken when confirmation is received.
    967          #if defined ( ZIGBEE_FREQ_AGILITY )
    968                if ( pZDNwkMgr_ProcessDataConfirm )
    969                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
    970          #endif
    971                (void)sentEP;
    972                (void)sentStatus;
    973                break;
    974          
    975              case ZDO_NWK_DISC_CNF:
    976                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000035   90....       MOV     DPTR,#devState
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6402         XRL     A,#0x2
   \   00003B   6003         JZ      $+5
   \   00003D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    977                  break;
    978                
    979                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000040   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   6008         JZ      ??ZDApp_ProcessOSALMsg_6
   \   000048   E0           MOVX    A,@DPTR
   \   000049   6402         XRL     A,#0x2
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    980                {
    981                  if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   6003         JZ      $+5
   \   000058   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   00005B   90....       MOV     DPTR,#zdoDiscCounter
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   C3           CLR     C
   \   000060   9403         SUBB    A,#0x3
   \   000062   5003         JNC     $+5
   \   000064   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
    982                  {
    983                    if ( devStartMode == MODE_JOIN )
   \   000067   EE           MOV     A,R6
   \   000068   2404         ADD     A,#0x4
   \   00006A   F5..         MOV     ?V0 + 6,A
   \   00006C   EF           MOV     A,R7
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   F5..         MOV     ?V0 + 7,A
   \   000071   EE           MOV     A,R6
   \   000072   2403         ADD     A,#0x3
   \   000074   F5..         MOV     ?V0 + 2,A
   \   000076   EF           MOV     A,R7
   \   000077   3400         ADDC    A,#0x0
   \   000079   F5..         MOV     ?V0 + 3,A
   \   00007B   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00007E   90....       MOV     DPTR,#devStartMode
   \   000081   E0           MOVX    A,@DPTR
   \   000082   703E         JNZ     ??ZDApp_ProcessOSALMsg_8
    984                    {
    985                      devState = DEV_NWK_JOINING;
   \   000084   7403         MOV     A,#0x3
   \   000086   90....       MOV     DPTR,#devState
   \   000089   F0           MOVX    @DPTR,A
    986            
    987                      ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
   \   00008A                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00008A   12....       LCALL   ??ZDApp_NodeProfileSync?relay
    988            
    989                      if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
    990                           BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
    991                           ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
    992                           ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
   \   00008D                ; Setup parameters for call to function NLME_JoinRequest
   \   00008D   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V0 + 4,A
   \   000093   78..         MOV     R0,#?V0 + 4
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000098   85..82       MOV     DPL,?V0 + 6
   \   00009B   85..83       MOV     DPH,?V0 + 7
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F9           MOV     R1,A
   \   0000A0   85..82       MOV     DPL,?V0 + 0
   \   0000A3   85..83       MOV     DPH,?V0 + 1
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FC           MOV     R4,A
   \   0000A8   85..82       MOV     DPL,?V0 + 2
   \   0000AB   85..83       MOV     DPH,?V0 + 3
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   FD           MOV     R5,A
   \   0000B0   EE           MOV     A,R6
   \   0000B1   2406         ADD     A,#0x6
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   3400         ADDC    A,#0x0
   \   0000B7   FB           MOV     R3,A
   \   0000B8   12....       LCALL   ??NLME_JoinRequest?relay
   \   0000BB   7401         MOV     A,#0x1
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C0   807C         SJMP    ??ZDApp_ProcessOSALMsg_9
    993                      {
    994                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
    995                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
    996                      }
    997                    }
    998                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   0000C2   6403         XRL     A,#0x3
   \   0000C4   707E         JNZ     ??CrossCallReturnLabel_14
    999                    {
   1000                      devState = DEV_NWK_REJOIN;
   \   0000C6   7404         MOV     A,#0x4
   \   0000C8   90....       MOV     DPTR,#devState
   \   0000CB   F0           MOVX    @DPTR,A
   1001          
   1002                      // Before trying to do rejoin, check if the device has a valid short address
   1003                      // If not, generate a random short address for itself
   1004                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000CC   90....       MOV     DPTR,#(_NIB + 20)
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   64FE         XRL     A,#0xfe
   \   0000D2   7004         JNZ     ??ZDApp_ProcessOSALMsg_10
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000D8   7014         JNZ     ??ZDApp_ProcessOSALMsg_11
   1005                      {
   1006                        _NIB.nwkDevAddress = osal_rand();
   \   0000DA                ; Setup parameters for call to function osal_rand
   \   0000DA   12....       LCALL   ??osal_rand?relay
   \   0000DD   90....       MOV     DPTR,#(_NIB + 20)
   \   0000E0   EA           MOV     A,R2
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   EB           MOV     A,R3
   \   0000E4   F0           MOVX    @DPTR,A
   1007                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   0000E5                ; Setup parameters for call to function ZMacSetReq
   \   0000E5   7A..         MOV     R2,#((_NIB + 20) & 0xff)
   \   0000E7   7B..         MOV     R3,#(((_NIB + 20) >> 8) & 0xff)
   \   0000E9   7953         MOV     R1,#0x53
   \   0000EB   12....       LCALL   ??ZMacSetReq?relay
   1008                      }
   1009          
   1010                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1011                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0000EE   90....       MOV     DPTR,#(_NIB + 33)
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   64FE         XRL     A,#0xfe
   \   0000F4   7004         JNZ     ??ZDApp_ProcessOSALMsg_12
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0000FA   7021         JNZ     ??ZDApp_ProcessOSALMsg_13
   1012                      {
   1013                        _NIB.nwkPanId = BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB );
   \   0000FC   85..82       MOV     DPL,?V0 + 0
   \   0000FF   85..83       MOV     DPH,?V0 + 1
   \   000102   E0           MOVX    A,@DPTR
   \   000103   FA           MOV     R2,A
   \   000104   85..82       MOV     DPL,?V0 + 2
   \   000107   85..83       MOV     DPH,?V0 + 3
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F9           MOV     R1,A
   \   00010C   EA           MOV     A,R2
   \   00010D   90....       MOV     DPTR,#(_NIB + 33)
   \   000110   F0           MOVX    @DPTR,A
   \   000111   A3           INC     DPTR
   \   000112   E9           MOV     A,R1
   \   000113   F0           MOVX    @DPTR,A
   1014                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   000114                ; Setup parameters for call to function ZMacSetReq
   \   000114   7A..         MOV     R2,#((_NIB + 33) & 0xff)
   \   000116   7B..         MOV     R3,#(((_NIB + 33) >> 8) & 0xff)
   \   000118   7950         MOV     R1,#0x50
   \   00011A   12....       LCALL   ??ZMacSetReq?relay
   1015                      }
   1016          
   1017                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00011D   7401         MOV     A,#0x1
   \   00011F   85..82       MOV     DPL,?XSP + 0
   \   000122   85..83       MOV     DPH,?XSP + 1
   \   000125   F0           MOVX    @DPTR,A
   1018                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin 
   \   000126                ; Setup parameters for call to function ZMacSetReq
   \   000126   AA82         MOV     R2,DPL
   \   000128   AB83         MOV     R3,DPH
   \   00012A   7952         MOV     R1,#0x52
   \   00012C   12....       LCALL   ??ZMacSetReq?relay
   1019                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel) != ZSuccess )
   \   00012F                ; Setup parameters for call to function NLME_ReJoinRequest
   \   00012F   85..82       MOV     DPL,?V0 + 6
   \   000132   85..83       MOV     DPH,?V0 + 7
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F9           MOV     R1,A
   \   000137   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000139   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   00013B   12....       LCALL   ??NLME_ReJoinRequest?relay
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   00013E   E9           MOV     A,R1
   \   00013F   6003         JZ      ??CrossCallReturnLabel_14
   1020                      {
   1021                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1022                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   000141                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000141                ; Setup parameters for call to function osal_rand
   \   000141   12....       LCALL   ?Subroutine10 & 0xFFFF
   1023                      }
   1024                    }
   1025            
   1026                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_14:
   \   000144   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000147   E0           MOVX    A,@DPTR
   \   000148   A2E3         MOV     C,0xE0 /* A   */.3
   \   00014A   5062         JNC     ??ZDApp_ProcessOSALMsg_5
   1027                    {
   1028                      // The receiver is on, turn network layer polling off.
   1029                      NLME_SetPollRate( 0 );
   \   00014C                ; Setup parameters for call to function NLME_SetPollRate
   \   00014C   12....       LCALL   ?Subroutine11 & 0xFFFF
   1030                      NLME_SetQueuedPollRate( 0 );
   1031                      NLME_SetResponseRate( 0 );
   1032                    }
   1033                    else
   1034                    {
   1035                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1036                      {
   1037                        ZDApp_SavedPollRate = zgPollRate;
   1038                        NLME_SetPollRate( zgRejoinPollRate );
   1039                      }
   1040                    }
   1041                  }
   \                     ??CrossCallReturnLabel_16:
   \   00014F   805D         SJMP    ??ZDApp_ProcessOSALMsg_5
   1042                  else
   1043                  {
   1044                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000151   90....       MOV     DPTR,#continueJoining
   \   000154   E0           MOVX    A,@DPTR
   \   000155   6057         JZ      ??ZDApp_ProcessOSALMsg_5
   1045                    {
   1046              #if defined ( MANAGED_SCAN )
   1047                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1048              #else
   1049                      zdoDiscCounter++;
   \   000157   90....       MOV     DPTR,#zdoDiscCounter
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   04           INC     A
   \   00015C   F0           MOVX    @DPTR,A
   1050                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1051                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   00015D                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00015D                ; Setup parameters for call to function osal_rand
   \   00015D   12....       LCALL   ??osal_rand?relay
   \   000160   8A..         MOV     ?V0 + 0,R2
   \   000162   74FF         MOV     A,#-0x1
   \   000164   55..         ANL     A,?V0 + 0
   \   000166   F8           MOV     R0,A
   \   000167   7464         MOV     A,#0x64
   \   000169   28           ADD     A,R0
   \   00016A   FA           MOV     R2,A
   \   00016B   E4           CLR     A
   \   00016C   3400         ADDC    A,#0x0
   \   00016E   FB           MOV     R3,A
   \   00016F   803A         SJMP    ??ZDApp_ProcessOSALMsg_14
   1052              #endif
   1053                    }
   1054                  }
   1055                }
   1056                break;
   1057          
   1058              case ZDO_NWK_JOIN_IND:
   1059                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000171   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000174   E0           MOVX    A,@DPTR
   \   000175   6401         XRL     A,#0x1
   \   000177   6005         JZ      ??ZDApp_ProcessOSALMsg_15
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   6402         XRL     A,#0x2
   \   00017C   7030         JNZ     ??ZDApp_ProcessOSALMsg_5
   1060                {
   1061                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   00017E                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00017E   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay
   \   000181   802B         SJMP    ??ZDApp_ProcessOSALMsg_5
   1062                }
   1063                break;
   1064          
   1065              case ZDO_NWK_JOIN_REQ:
   1066                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000183   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000186   E0           MOVX    A,@DPTR
   \   000187   6401         XRL     A,#0x1
   \   000189   6005         JZ      ??ZDApp_ProcessOSALMsg_16
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   6402         XRL     A,#0x2
   \   00018E   701E         JNZ     ??ZDApp_ProcessOSALMsg_5
   1067                {
   1068                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   000190   E4           CLR     A
   \   000191   90....       MOV     DPTR,#retryCnt
   \   000194   F0           MOVX    @DPTR,A
   1069                  devStartMode = MODE_RESUME;
   \   000195   7401         MOV     A,#0x1
   \   000197   90....       MOV     DPTR,#devStartMode
   \   00019A   F0           MOVX    @DPTR,A
   1070                  _tmpRejoinState = true;
   \   00019B   90....       MOV     DPTR,#_tmpRejoinState
   \   00019E   12....       LCALL   ?Subroutine1 & 0xFFFF
   1071                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1072                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \                     ??CrossCallReturnLabel_1:
   \   0001A1   7402         MOV     A,#0x2
   \   0001A3   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   0001A6   F0           MOVX    @DPTR,A
   1073                  ZDApp_NetworkInit( 0 );
   \   0001A7                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001A7   7A00         MOV     R2,#0x0
   \   0001A9   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   0001AB   12....       LCALL   ??ZDApp_NetworkInit?relay
   1074                }
   1075                break;
   1076          
   1077              default:
   1078                if ( ZG_SECURE_ENABLED )
   1079                  ZDApp_ProcessSecMsg( msgPtr );
   1080                break;
   1081            }
   1082          
   1083          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0001AE   7401         MOV     A,#0x1
   \   0001B0                REQUIRE ?Subroutine22
   \   0001B0                ; // Fall through to label ?Subroutine22

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??NLME_SetPollRate?relay
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??NLME_SetResponseRate?relay
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ??osal_rand?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   747F         MOV     A,#0x7f
   \   000007   55..         ANL     A,?V0 + 0
   \   000009   F8           MOV     R0,A
   \   00000A   7464         MOV     A,#0x64
   \   00000C   28           ADD     A,R0
   \   00000D   FA           MOV     R2,A
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   22           RET
   1084          
   1085          /*********************************************************************
   1086           * @fn      ZDApp_ProcessMsgCBs()
   1087           *
   1088           * @brief   Process response messages
   1089           *
   1090           * @param   none
   1091           *
   1092           * @return  none
   1093           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1094          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1095          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1096            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 1,A
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   00001F   0300         DW        3
   \   000021   2100         DW        33
   \   000023   2200         DW        34
   \   000025   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000027   0080         DW        32768
   \   000029   0180         DW        32769
   \   00002B   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   00002D   2180         DW        32801
   \   00002F   2280         DW        32802
   \   000031   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   000033   0100         DW        1
   \   000035   2000         DW        32
   \   000037   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   000039   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1097            {
   1098          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1099              case NWK_addr_rsp:
   1100              case IEEE_addr_rsp:
   1101                {
   1102                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1103                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003B                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003B   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   00003E   8A..         MOV     ?V0 + 0,R2
   \   000040   8B..         MOV     ?V0 + 1,R3
   \   000042   AE..         MOV     R6,?V0 + 0
   \   000044   AF..         MOV     R7,?V0 + 1
   1104                  if ( pAddrRsp )
   \   000046   EE           MOV     A,R6
   \   000047   7001         JNZ     ??ZDApp_ProcessMsgCBs_5
   \   000049   EF           MOV     A,R7
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1105                  {
   1106                    if ( pAddrRsp->status == ZSuccess )
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E0           MOVX    A,@DPTR
   \   000054   700F         JNZ     ??ZDApp_ProcessMsgCBs_6
   1107                    {
   1108                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000056                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000056   EE           MOV     A,R6
   \   000057   2403         ADD     A,#0x3
   \   000059   FC           MOV     R4,A
   \   00005A   EF           MOV     A,R7
   \   00005B   3400         ADDC    A,#0x0
   \   00005D   FD           MOV     R5,A
   \   00005E   A3           INC     DPTR
   \   00005F   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   1109                    }
   \                     ??CrossCallReturnLabel_56:
   \   000062   12....       LCALL   ??ZDO_UpdateAddrManager?relay
   1110                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   000065                ; Setup parameters for call to function osal_mem_free
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   02....       LJMP    ??ZDApp_ProcessMsgCBs_7 & 0xFFFF
   1111                  }
   1112                }
   1113                break;
   1114          #endif
   1115                
   1116          #if defined ( REFLECTOR )
   1117              case Bind_req:
   1118              case Unbind_req:
   1119                {
   1120                  ZDO_BindUnbindReq_t bindReq;
   1121                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00006B                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00006B   7417         MOV     A,#0x17
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   AC82         MOV     R4,DPL
   \   000072   AD83         MOV     R5,DPH
   \   000074   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay
   1122                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000077                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000077   7417         MOV     A,#0x17
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   AC82         MOV     R4,DPL
   \   00007E   AD83         MOV     R5,DPH
   \   000080   EE           MOV     A,R6
   \   000081   FA           MOV     R2,A
   \   000082   EF           MOV     A,R7
   \   000083   FB           MOV     R3,A
   \   000084   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay
   \   000087   8073         SJMP    ??ZDApp_ProcessMsgCBs_4
   1123                }
   1124                break;
   1125          #endif      
   1126                
   1127          #if defined ( ZDO_COORDINATOR )
   1128              case Bind_rsp:
   1129              case Unbind_rsp:
   1130                if ( matchED )
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000089   90....       MOV     DPTR,#matchED
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   7002         JNZ     ??ZDApp_ProcessMsgCBs_8
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   000091   6069         JZ      ??ZDApp_ProcessMsgCBs_4
   1131                {
   1132                  ZDMatchSendState(
   1133                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1134                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   000093   7421         MOV     A,#0x21
   \   000095   65..         XRL     A,?V0 + 0
   \   000097   7004         JNZ     ??ZDApp_ProcessMsgCBs_9
   \   000099   7480         MOV     A,#-0x80
   \   00009B   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   00009D   7004         JNZ     ??ZDApp_ProcessMsgCBs_10
   \   00009F   7903         MOV     R1,#0x3
   \   0000A1   8002         SJMP    ??ZDApp_ProcessMsgCBs_11
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000A3   7902         MOV     R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_11:
   \   0000A5                ; Setup parameters for call to function ZDMatchSendState
   \   0000A5   12....       LCALL   ?Subroutine15 & 0xFFFF
   1135                }
   \                     ??CrossCallReturnLabel_53:
   \   0000A8   FB           MOV     R3,A
   \   0000A9   EE           MOV     A,R6
   \   0000AA   2413         ADD     A,#0x13
   \   0000AC   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   8882         MOV     DPL,R0
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   FA           MOV     R2,A
   \   0000B5   12....       LCALL   ??ZDMatchSendState?relay
   \   0000B8   8042         SJMP    ??ZDApp_ProcessMsgCBs_4
   1136                break;
   1137                
   1138              case End_Device_Bind_req:
   1139                {
   1140                  ZDEndDeviceBind_t bindReq;
   1141                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000BA                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000BA   85..82       MOV     DPL,?XSP + 0
   \   0000BD   85..83       MOV     DPH,?XSP + 1
   \   0000C0   AC82         MOV     R4,DPL
   \   0000C2   AD83         MOV     R5,DPH
   \   0000C4   12....       LCALL   ??ZDO_ParseEndDeviceBindReq?relay
   1142                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000C7                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000C7   85..82       MOV     DPL,?XSP + 0
   \   0000CA   85..83       MOV     DPH,?XSP + 1
   \   0000CD   AA82         MOV     R2,DPL
   \   0000CF   AB83         MOV     R3,DPH
   \   0000D1   12....       LCALL   ??ZDO_MatchEndDeviceBind?relay
   1143                  
   1144                  // Freeing the cluster lists - if allocated.
   1145                  if ( bindReq.numInClusters )
   \   0000D4   7411         MOV     A,#0x11
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   600B         JZ      ??ZDApp_ProcessMsgCBs_12
   1146                    osal_mem_free( bindReq.inClusters );
   \   0000DC                ; Setup parameters for call to function osal_mem_free
   \   0000DC   7412         MOV     A,#0x12
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000E4   12....       LCALL   ??osal_mem_free?relay
   1147                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_12:
   \   0000E7   7414         MOV     A,#0x14
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   600D         JZ      ??ZDApp_ProcessMsgCBs_4
   1148                    osal_mem_free( bindReq.outClusters );
   \   0000EF                ; Setup parameters for call to function osal_mem_free
   \   0000EF   7415         MOV     A,#0x15
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   FA           MOV     R2,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   0000F8   FB           MOV     R3,A
   \   0000F9   12....       LCALL   ??osal_mem_free?relay
   1149                }
   1150                break;
   1151          #endif      
   1152            }
   1153          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   0000FC   742C         MOV     A,#0x2c
   \   0000FE   02....       LJMP    ??Subroutine32_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
   1154          
   1155          /*********************************************************************
   1156           * @fn      ZDApp_RegisterCBs()
   1157           *
   1158           * @brief   Process response messages
   1159           *
   1160           * @param   none
   1161           *
   1162           * @return  none
   1163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1164          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1165          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1166          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1167            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   12....       LCALL   ?Subroutine4 & 0xFFFF
   1168          #endif
   1169          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1170            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_37:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   12....       LCALL   ?Subroutine4 & 0xFFFF
   1171          #endif  
   1172          #if defined ( ZDO_COORDINATOR )
   1173            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \                     ??CrossCallReturnLabel_38:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV     R2,#0x21
   \   000010   12....       LCALL   ?Subroutine4 & 0xFFFF
   1174            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \                     ??CrossCallReturnLabel_39:
   \   000013                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000013   7A22         MOV     R2,#0x22
   \   000015   12....       LCALL   ?Subroutine4 & 0xFFFF
   1175            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \                     ??CrossCallReturnLabel_40:
   \   000018                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000018   7A20         MOV     R2,#0x20
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   1176          #endif
   1177          #if defined ( REFLECTOR )
   1178            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_41:
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001F   7A21         MOV     R2,#0x21
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   1179            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_42:
   \   000026                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000026   7A22         MOV     R2,#0x22
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   1180          #endif  
   1181          }
   \                     ??CrossCallReturnLabel_43:
   \   00002D   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7B80         MOV     R3,#-0x80
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000008   22           RET
   1182          
   1183          /*********************************************************************
   1184           * @fn      ZDApp_ProcessSecMsg()
   1185           *
   1186           * @brief   Process the incoming security message.
   1187           *
   1188           * @param   msgPtr - message to process
   1189           *
   1190           * @return  none
   1191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1192          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1193          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1194            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessSecMsg>_0`:
   \   00000C   00           DB        0
   \   00000D   03           DB        3
   \   00000E   06           DB        6
   \   00000F   ....         DW        ??ZDApp_ProcessSecMsg_0
   \   000011   07           DB        7
   \   000012   ....         DW        ??ZDApp_ProcessSecMsg_1
   \   000014   0A           DB        10
   \   000015   ....         DW        ??ZDApp_ProcessSecMsg_2
   \   000017   ....         DW        ??ZDApp_ProcessSecMsg_3
   1195            {
   1196              case ZDO_ESTABLISH_KEY_CFM:
   1197                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1198                {
   1199                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1200                }
   1201                break;
   1202          
   1203              case ZDO_ESTABLISH_KEY_IND:
   1204                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1205                {
   1206                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1207                  {
   1208                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1209                  }
   1210                }
   1211                break;
   1212          
   1213              case ZDO_TRANSPORT_KEY_IND:
   1214                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6402         XRL     A,#0x2
   \   000024   7020         JNZ     ??ZDApp_ProcessSecMsg_3
   1215                {
   1216                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000026                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000026   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay
   \   000029   801B         SJMP    ??ZDApp_ProcessSecMsg_3
   1217                }
   1218                break;
   1219          
   1220              case ZDO_UPDATE_DEVICE_IND:
   1221                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   00002B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   7015         JNZ     ??ZDApp_ProcessSecMsg_3
   1222                {
   1223                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \   000031                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   000031   12....       LCALL   ??ZDSecMgrUpdateDeviceInd?relay
   \   000034   8010         SJMP    ??ZDApp_ProcessSecMsg_3
   1224                }
   1225                break;
   1226          
   1227              case ZDO_REMOVE_DEVICE_IND:
   1228                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1229                {
   1230                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1231                }
   1232                break;
   1233          
   1234              case ZDO_REQUEST_KEY_IND:
   1235                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1236                {
   1237                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1238                  {
   1239                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1240                  }
   1241                }
   1242                break;
   1243          
   1244              case ZDO_SWITCH_KEY_IND:
   1245                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000036   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6401         XRL     A,#0x1
   \   00003C   6005         JZ      ??ZDApp_ProcessSecMsg_5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6402         XRL     A,#0x2
   \   000041   7003         JNZ     ??ZDApp_ProcessSecMsg_3
   1246                {
   1247                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000043                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000043   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay
   1248                }
   1249                break;
   1250              
   1251              case ZDO_AUTHENTICATE_IND:
   1252                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1253                {
   1254                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1255                }
   1256                break;
   1257          
   1258              case ZDO_AUTHENTICATE_CFM:
   1259                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1260                {
   1261                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1262                }
   1263                break;
   1264          
   1265              default:
   1266                // Unsupported messages
   1267                break;
   1268            }
   1269          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000046   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1270          
   1271          /*********************************************************************
   1272           * @fn      ZDApp_ProcessNetworkJoin()
   1273           *
   1274           * @brief
   1275           *
   1276           *   Save off the Network key information.
   1277           *
   1278           * @param   none
   1279           *
   1280           * @return  none
   1281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1282          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1283          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1284            if ( (devState == DEV_NWK_JOINING) ||
   1285                ((devState == DEV_NWK_ORPHAN)  &&
   1286                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1287            {
   1288              // Result of a Join attempt by this device.
   1289              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7054         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1290              {
   1291                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   12....       LCALL   ?Subroutine3 & 0xFFFF
   1292          
   1293          #if defined ( POWER_SAVING )
   1294                osal_pwrmgr_device( PWRMGR_BATTERY );
   1295          #endif
   1296          
   1297                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1298                {
   1299                  // wait for auth from trust center!!
   1300                  devState = DEV_END_DEVICE_UNAUTH;
   1301          
   1302                  // Start the reset timer for MAX UNAUTH time
   1303                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1304                }
   1305                else
   1306                {
   1307                  if ( ZSTACK_ROUTER_BUILD )
   \                     ??CrossCallReturnLabel_28:
   \   000030   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6004         JZ      ??ZDApp_ProcessNetworkJoin_4
   \   000036   6401         XRL     A,#0x1
   \   000038   7015         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1308                  {
   1309                    if ( devState == DEV_NWK_ORPHAN 
   1310                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00003A   90....       MOV     DPTR,#devState
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   640A         XRL     A,#0xa
   \   000040   700D         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   000042   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000045   6013         JZ      ??ZDApp_ProcessNetworkJoin_6
   1311                    {
   1312                      // Change NIB state to router for restore
   1313                      _NIB.nwkState = NWK_ROUTER;
   \   000047   7408         MOV     A,#0x8
   \   000049   90....       MOV     DPTR,#(_NIB + 35)
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   800B         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1314                    }
   1315                  }
   1316                          
   1317                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00004F   90....       MOV     DPTR,#devState
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6403         XRL     A,#0x3
   \   000055   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1318                  {
   1319                    ZDApp_AnnounceNewAddress();
   \   000057                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000057   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1320                  }
   1321                  
   1322                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00005A   7406         MOV     A,#0x6
   \   00005C   90....       MOV     DPTR,#devState
   \   00005F   F0           MOVX    @DPTR,A
   1323                  if ( ZSTACK_ROUTER_BUILD )
   \   000060   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6007         JZ      ??ZDApp_ProcessNetworkJoin_7
   \   000066   6401         XRL     A,#0x1
   \   000068   6003         JZ      $+5
   \   00006A   02....       LJMP    ??CrossCallReturnLabel_15 & 0xFFFF
   1324                  {
   1325                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1326                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   00006D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000070   7003         JNZ     $+5
   \   000072   02....       LJMP    ??CrossCallReturnLabel_15 & 0xFFFF
   1327                    {
   1328                      NLME_StartRouterRequest( 0, 0, false );
   \   000075                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000075   7B00         MOV     R3,#0x0
   \   000077   7A00         MOV     R2,#0x0
   \   000079   7900         MOV     R1,#0x0
   \   00007B   12....       LCALL   ??NLME_StartRouterRequest?relay
   \   00007E   02....       LJMP    ??CrossCallReturnLabel_15 & 0xFFFF
   1329                    }
   1330                  }
   1331                }
   1332              }
   1333              else
   1334              {
   1335                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000081   90....       MOV     DPTR,#devStartMode
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6401         XRL     A,#0x1
   \   000087   7031         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000089   90....       MOV     DPTR,#retryCnt
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   04           INC     A
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   C3           CLR     C
   \   000090   9403         SUBB    A,#0x3
   \   000092   4026         JC      ??ZDApp_ProcessNetworkJoin_8
   1336                {
   1337                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000094   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000097   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   000099   74FF         MOV     A,#-0x1
   \   00009B   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   00009C   600A         JZ      ??ZDApp_ProcessNetworkJoin_10
   \   00009E   74FE         MOV     A,#-0x2
   \   0000A0   68           XRL     A,R0
   \   0000A1   7003         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   0000A3   74FF         MOV     A,#-0x1
   \   0000A5   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000A6   7006         JNZ     ??ZDApp_ProcessNetworkJoin_12
   1338                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000A8   E4           CLR     A
   \   0000A9   90....       MOV     DPTR,#devStartMode
   \   0000AC   800B         SJMP    ??ZDApp_ProcessNetworkJoin_13
   1339                  else
   1340                  {
   1341                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   90....       MOV     DPTR,#devStartMode
   \   0000B3   F0           MOVX    @DPTR,A
   1342                    _tmpRejoinState = true;
   \   0000B4   7401         MOV     A,#0x1
   \   0000B6   90....       MOV     DPTR,#_tmpRejoinState
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000B9   F0           MOVX    @DPTR,A
   1343                  }
   1344                }
   1345          
   1346                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1347                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0000BA                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000BA   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000BD   8A..         MOV     ?V0 + 0,R2
   \   0000BF   8B..         MOV     ?V0 + 1,R3
   \   0000C1   74FE         MOV     A,#-0x2
   \   0000C3   65..         XRL     A,?V0 + 0
   \   0000C5   7004         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000C7   74FF         MOV     A,#-0x1
   \   0000C9   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000CB   700E         JNZ     ??ZDApp_ProcessNetworkJoin_15
   \   0000CD   90....       MOV     DPTR,#(_NIB + 20)
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   64FE         XRL     A,#0xfe
   \   0000D3   7004         JNZ     ??ZDApp_ProcessNetworkJoin_16
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000D9   6026         JZ      ??ZDApp_ProcessNetworkJoin_17
   1348                {
   1349                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   74FE         MOV     A,#-0x2
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   74FF         MOV     A,#-0x1
   \   0000E7   F0           MOVX    @DPTR,A
   1350                  // Invalidate nwk addr so end device does not use in its data reqs.
   1351                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000E8   90....       MOV     DPTR,#(_NIB + 20)
   \   0000EB   74FE         MOV     A,#-0x2
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   74FF         MOV     A,#-0x1
   \   0000F1   F0           MOVX    @DPTR,A
   1352                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000F2                ; Setup parameters for call to function ZMacSetReq
   \   0000F2   85..82       MOV     DPL,?XSP + 0
   \   0000F5   85..83       MOV     DPH,?XSP + 1
   \   0000F8   AA82         MOV     R2,DPL
   \   0000FA   AB83         MOV     R3,DPH
   \   0000FC   7953         MOV     R1,#0x53
   \   0000FE   12....       LCALL   ??ZMacSetReq?relay
   1353                }
   1354          
   1355                zdoDiscCounter = 1;
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000101   7401         MOV     A,#0x1
   \   000103   90....       MOV     DPTR,#zdoDiscCounter
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000106   F0           MOVX    @DPTR,A
   1356          
   1357          //      ZDApp_NetworkInit( (uint16)
   1358          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1359          //                          (NWK_START_DELAY * 5)) );
   1360                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1361                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   000107                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000107                ; Setup parameters for call to function osal_rand
   \   000107   8078         SJMP    ??ZDApp_ProcessNetworkJoin_19
   1362              }
   1363            }
   1364            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   6404         XRL     A,#0x4
   \   00010C   7076         JNZ     ??CrossCallReturnLabel_15
   1365            {
   1366              // results of an orphaning attempt by this device
   1367              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   00010E   90....       MOV     DPTR,#nwkStatus
   \   000111   E0           MOVX    A,@DPTR
   \   000112   702B         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1368              {
   1369                if ( ZG_SECURE_ENABLED )
   1370                {
   1371                  ZDApp_RestoreNwkKey();
   1372                }
   1373                
   1374                devState = DEV_END_DEVICE;
   \   000114   12....       LCALL   ?Subroutine0 & 0xFFFF
   1375                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1376                // setup Power Manager Device
   1377          #if defined ( POWER_SAVING )
   1378                osal_pwrmgr_device( PWRMGR_BATTERY );
   1379          #endif
   1380          
   1381                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_33:
   \   000117   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   A2E3         MOV     C,0xE0 /* A   */.3
   \   00011D   5003         JNC     ??CrossCallReturnLabel_17
   1382                {
   1383                  // The receiver is on, turn network layer polling off.
   1384                  NLME_SetPollRate( 0 );
   \   00011F                ; Setup parameters for call to function NLME_SetPollRate
   \   00011F   12....       LCALL   ?Subroutine11 & 0xFFFF
   1385                  NLME_SetQueuedPollRate( 0 );
   1386                  NLME_SetResponseRate( 0 );
   1387                }
   1388          
   1389                if ( ZSTACK_ROUTER_BUILD )
   \                     ??CrossCallReturnLabel_17:
   \   000122   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000125   E0           MOVX    A,@DPTR
   \   000126   6004         JZ      ??ZDApp_ProcessNetworkJoin_21
   \   000128   6401         XRL     A,#0x1
   \   00012A   700E         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1390                {
   1391                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1392                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   00012C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00012F   6009         JZ      ??ZDApp_ProcessNetworkJoin_22
   1393                  {
   1394                    NLME_StartRouterRequest( 0, 0, false );
   \   000131                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000131   7B00         MOV     R3,#0x0
   \   000133   7A00         MOV     R2,#0x0
   \   000135   7900         MOV     R1,#0x0
   \   000137   12....       LCALL   ??NLME_StartRouterRequest?relay
   1395                  }
   1396                }
   1397                
   1398                ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   00013A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00013A   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   \   00013D   8045         SJMP    ??CrossCallReturnLabel_15
   1399              }
   1400              else
   1401              {
   1402                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00013F   90....       MOV     DPTR,#devStartMode
   \   000142   E0           MOVX    A,@DPTR
   \   000143   6401         XRL     A,#0x1
   \   000145   703A         JNZ     ??ZDApp_ProcessNetworkJoin_19
   1403                {
   1404                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000147   90....       MOV     DPTR,#retryCnt
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   04           INC     A
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   C3           CLR     C
   \   00014E   9404         SUBB    A,#0x4
   \   000150   5027         JNC     ??ZDApp_ProcessNetworkJoin_23
   1405                  {
   1406                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000152   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000155   7003         JNZ     ??ZDApp_ProcessNetworkJoin_24
   \   000157   74FF         MOV     A,#-0x1
   \   000159   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   00015A   600A         JZ      ??ZDApp_ProcessNetworkJoin_25
   \   00015C   74FE         MOV     A,#-0x2
   \   00015E   68           XRL     A,R0
   \   00015F   7003         JNZ     ??ZDApp_ProcessNetworkJoin_26
   \   000161   74FF         MOV     A,#-0x1
   \   000163   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000164   7006         JNZ     ??ZDApp_ProcessNetworkJoin_27
   1407                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   000166   E4           CLR     A
   \   000167   90....       MOV     DPTR,#devStartMode
   \   00016A   809A         SJMP    ??ZDApp_ProcessNetworkJoin_18
   1408                    else
   1409                    {
   1410                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   00016C   7403         MOV     A,#0x3
   \   00016E   90....       MOV     DPTR,#devStartMode
   \   000171   F0           MOVX    @DPTR,A
   1411                      _tmpRejoinState = true;
   \   000172   7401         MOV     A,#0x1
   \   000174   90....       MOV     DPTR,#_tmpRejoinState
   \   000177   808D         SJMP    ??ZDApp_ProcessNetworkJoin_18
   1412                    }
   1413                  }
   1414                  // Do a normal join to the network after certain times of rejoin retries
   1415                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000179   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   6401         XRL     A,#0x1
   \   00017F   60E5         JZ      ??ZDApp_ProcessNetworkJoin_25
   1416                  {
   1417                    devStartMode = MODE_JOIN;
   1418                  }
   1419                }
   1420          
   1421          
   1422                // setup a retry for later...
   1423                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1424                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000181                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000181                ; Setup parameters for call to function osal_rand
   \   000181   12....       LCALL   ?Subroutine10 & 0xFFFF
   1425              }
   1426            }
   1427          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1428            else
   1429            {
   1430              // Assume from address conflict
   1431              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   1432              {
   1433                // Notify the network
   1434                ZDApp_AnnounceNewAddress();
   1435                
   1436                // Notify apps
   1437                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1438              }
   1439            }
   1440          #endif
   1441          }
   \                     ??CrossCallReturnLabel_15:
   \   000184   02....       LJMP    ?Subroutine20 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#(_NIB + 33)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   74FF         MOV     A,#-0x1
   \   00000A   68           XRL     A,R0
   \   00000B   22           RET
   1442          
   1443          /*********************************************************************
   1444           * @fn      ZDApp_SaveNwkKey()
   1445           *
   1446           * @brief   Save off the Network key information.
   1447           *
   1448           * @param   none
   1449           *
   1450           * @return  none
   1451           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1452          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1453          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1454            nwkActiveKeyItems keyItems;
   1455          
   1456            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??SSP_ReadNwkActiveKey?relay
   1457            keyItems.frameCounter++;
   \   000017   90....       MOV     DPTR,#__Constant_1
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
   \   00001F   7411         MOV     A,#0x11
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_ADD_TO_X
   1458          
   1459            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1460                          (void *)&keyItems );
   \   000029                ; Setup parameters for call to function osal_nv_write
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8582..       MOV     ?V0 + 0,DPL
   \   000032   8583..       MOV     ?V0 + 1,DPH
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..15       MOV     ?V0 + 0,#0x15
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   1461          
   1462            nwkFrameCounterChanges = 0;
   \   00004B   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
   1463          }
   \   000052                REQUIRE ?Subroutine24
   \   000052                ; // Fall through to label ?Subroutine24

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7415         MOV     A,#0x15
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F04         MOV     R7,#0x4
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A82         MOV     R2,#-0x7e
   \   000006                REQUIRE ??Subroutine28_0
   \   000006                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_nv_write?relay
   \   000005   7404         MOV     A,#0x4
   \   000007   22           RET
   1464          
   1465          /*********************************************************************
   1466           * @fn      ZDApp_ResetNwkKey()
   1467           *
   1468           * @brief   Reset the Network key information in NV.
   1469           *
   1470           * @param   none
   1471           *
   1472           * @return  none
   1473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1474          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1475          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1476            nwkActiveKeyItems keyItems;
   1477          
   1478            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   12....       LCALL   ?Subroutine12 & 0xFFFF
   1479            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1480                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_19:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV     ?V0 + 0,#0x15
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   1481          }
   \   000023   7415         MOV     A,#0x15
   \   000025   02....       LJMP    ??Subroutine32_0 & 0xFFFF
   1482          
   1483          /*********************************************************************
   1484           * @fn      ZDApp_RestoreNwkKey()
   1485           *
   1486           * @brief
   1487           *
   1488           *   Save off the Network key information.
   1489           *
   1490           * @param   none
   1491           *
   1492           * @return  true if restored from NV, false if not
   1493           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1494          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1495          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1496            nwkActiveKeyItems keyItems;
   1497            uint8 ret = false;
   \   00000A   7E00         MOV     R6,#0x0
   1498          
   1499            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1500                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   8582..       MOV     ?V0 + 0,DPL
   \   000015   8583..       MOV     ?V0 + 1,DPH
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0 + 0,#0x15
   \   000020   8E..         MOV     ?V0 + 1,R6
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??osal_nv_read?relay
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   E9           MOV     A,R1
   \   000038   702F         JNZ     ??ZDApp_RestoreNwkKey_0
   1501            {
   1502              if ( keyItems.frameCounter > 0 )
   \   00003A   7411         MOV     A,#0x11
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?L_MOV_X
   \   000044   90....       MOV     DPTR,#__Constant_0
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?L_EQ_X
   \   00004C   6011         JZ      ??ZDApp_RestoreNwkKey_1
   1503              {
   1504                // Restore the key information
   1505                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   1506                nwkFrameCounter = keyItems.frameCounter;
   \   00004E   90....       MOV     DPTR,#__Constant_3e8
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?L_ADD_X
   \   000056   90....       MOV     DPTR,#nwkFrameCounter
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?L_MOV_TO_X
   1507                ret = true;
   \   00005E   0E           INC     R6
   1508              }
   1509          
   1510              // Force a save for the first frame counter increment
   1511              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   00005F   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000062   74E9         MOV     A,#-0x17
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   7403         MOV     A,#0x3
   \   000068   F0           MOVX    @DPTR,A
   1512            }
   1513            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000069   EE           MOV     A,R6
   \   00006A   F9           MOV     R1,A
   \   00006B   02....       LJMP    ?Subroutine24 & 0xFFFF
   1514          }
   1515          
   1516          /*********************************************************************
   1517           * @fn      ZDApp_ResetTimerStart
   1518           *
   1519           * @brief   Start the reset timer.
   1520           *
   1521           * @param   delay - delay time(ms) before reset
   1522           *
   1523           * @return  none
   1524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1525          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1526          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1527            // Start the rest timer
   1528            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A04         MOV     R2,#0x4
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
   1529          }
   \                     ??CrossCallReturnLabel_10:
   \   00000D   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1530          
   1531          /*********************************************************************
   1532           * @fn      ZDApp_ResetTimerCancel
   1533           *
   1534           * @brief   Cancel the reset timer.
   1535           *
   1536           * @param   none
   1537           *
   1538           * @return  none
   1539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1540          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1541          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1542            // Cancel the reset timer
   1543            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay
   1544          }
   \   000010   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1545          
   1546          /*********************************************************************
   1547           * @fn      ZDApp_LeaveCtrlInit
   1548           *
   1549           * @brief   Initialize the leave control logic.
   1550           *
   1551           * @param   none
   1552           *
   1553           * @return  none
   1554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1555          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1556          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1557            uint8 status;
   1558          
   1559          
   1560            // Initialize control state
   1561            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   12....       LCALL   ?Subroutine2 & 0xFFFF
   1562          
   1563            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1564                                        sizeof(ZDApp_LeaveCtrl),
   1565                                        &ZDApp_LeaveCtrl );
   1566          
   1567            if ( status == ZSUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   7C01         MOV     R4,#0x1
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   7A85         MOV     R2,#-0x7b
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_nv_item_init?relay
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   E9           MOV     A,R1
   \   00001C   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1568            {
   1569              // Read saved control
   1570              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1571                            0,
   1572                            sizeof( uint8 ),
   1573                            &ZDApp_LeaveCtrl);
   \   00001E                ; Setup parameters for call to function osal_nv_read
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A85         MOV     R2,#-0x7b
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_nv_read?relay
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1574            }
   1575          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   00003E   02....       LJMP    ??Subroutine33_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E4           CLR     A
   \   000001   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005   75....       MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
   \   000008   75....       MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET
   1576          
   1577          /*********************************************************************
   1578           * @fn      ZDApp_LeaveCtrlSet
   1579           *
   1580           * @brief   Set the leave control logic.
   1581           *
   1582           * @param   ra - reassociate flag
   1583           *
   1584           * @return  none
   1585           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1586          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1587          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1588            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000005   7401         MOV     A,#0x1
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   F0           MOVX    @DPTR,A
   1589          
   1590            if ( ra == TRUE )
   \   00000B   69           XRL     A,R1
   \   00000C   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1591            {
   1592              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   00000E   7403         MOV     A,#0x3
   \   000010   F0           MOVX    @DPTR,A
   1593            }
   1594          
   1595            // Write the leave control
   1596            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1597                           0,
   1598                           sizeof( uint8 ),
   1599                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   75....       MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
   \   000014   75....       MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   75..01       MOV     ?V0 + 0,#0x1
   \   00001F   75..00       MOV     ?V0 + 1,#0x0
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A85         MOV     R2,#-0x7b
   \   00002D   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000030   02....       LJMP    ??Subroutine32_0 & 0xFFFF
   1600          }
   1601          
   1602          /*********************************************************************
   1603           * @fn      ZDApp_LeaveCtrlBypass
   1604           *
   1605           * @brief   Check if NV restore should be skipped during a leave reset.
   1606           *
   1607           * @param   none
   1608           *
   1609           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1610           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1611          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1612          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1613            uint8 bypass;
   1614          
   1615            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1616            {
   1617              bypass = TRUE;
   1618            }
   1619            else
   1620            {
   1621              bypass = FALSE;
   1622            }
   1623          
   1624            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   92E0         MOV     0xE0 /* A   */.0,C
   \   00000D   F9           MOV     R1,A
   \   00000E   80..         SJMP    ??Subroutine29_0
   1625          }
   1626          
   1627          /*********************************************************************
   1628           * @fn      ZDApp_LeaveCtrlStartup
   1629           *
   1630           * @brief   Check for startup conditions during a leave reset.
   1631           *
   1632           * @param   state      - devState_t determined by leave control logic
   1633           * @param   startDelay - startup delay
   1634           *
   1635           * @return  none
   1636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1637          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1638          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1639            *startDelay = 0;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   1640          
   1641            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000D   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5033         JNC     ??ZDApp_LeaveCtrlStartup_0
   1642            {
   1643              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1644              {
   1645                *startDelay = 5000;
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   7488         MOV     A,#-0x78
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   7413         MOV     A,#0x13
   \   000023   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1646              }
   1647              else
   1648              {
   1649                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000025   E4           CLR     A
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   00002A   F0           MOVX    @DPTR,A
   1650              }
   1651          
   1652              // Set leave control to initialized state
   1653              ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   00002B   12....       LCALL   ?Subroutine2 & 0xFFFF
   1654          
   1655              // Write initialized control
   1656              osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1657                            0,
   1658                            sizeof( uint8 ),
   1659                            &ZDApp_LeaveCtrl);
   1660            }
   \                     ??CrossCallReturnLabel_3:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..01       MOV     ?V0 + 0,#0x1
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV     R4,#0x0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A85         MOV     R2,#-0x7b
   \   000042   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1661          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   000048   02....       LJMP    ??Subroutine33_0 & 0xFFFF
   1662          
   1663          /*********************************************************************
   1664           * @fn      ZDApp_LeaveReset
   1665           *
   1666           * @brief   Setup a device reset due to a leave indication/confirm.
   1667           *
   1668           * @param   ra - reassociate flag
   1669           *
   1670           * @return  none
   1671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1672          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1673          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1674            ZDApp_LeaveCtrlSet( ra );
   \   000004                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000004   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay
   1675          
   1676            ZDApp_ResetTimerStart( 5000 );
   \   000007                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000007   7A88         MOV     R2,#-0x78
   \   000009   7B13         MOV     R3,#0x13
   \   00000B   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   1677          }
   \   00000E   80..         SJMP    ??Subroutine29_0
   1678          
   1679          /*********************************************************************
   1680           * @fn      ZDApp_LeaveUpdate
   1681           *
   1682           * @brief   Update local device data related to leaving device.
   1683           *
   1684           * @param   nwkAddr        - NWK address of leaving device
   1685           * @param   extAddr        - EXT address of leaving device
   1686           * @param   removeChildren - remove children of leaving device
   1687           *
   1688           * @return  none
   1689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1690          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1691                                  uint8 removeChildren )
   1692          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EC           MOV     A,R4
   \   000005   FA           MOV     R2,A
   \   000006   ED           MOV     A,R5
   \   000007   FB           MOV     R3,A
   1693            /*
   1694            AddrMgrEntry_t entry;
   1695            */
   1696            (void)nwkAddr;  // Intentionally unreferenced parameter
   1697          
   1698            // Remove if child
   1699            if ( ZSTACK_ROUTER_BUILD )
   \   000008   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6004         JZ      ??ZDApp_LeaveUpdate_0
   \   00000E   6401         XRL     A,#0x1
   \   000010   7003         JNZ     ??ZDApp_LeaveUpdate_1
   1700            {
   1701              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_0:
   \   000012                ; Setup parameters for call to function NLME_RemoveChild
   \   000012   12....       LCALL   ??NLME_RemoveChild?relay
   1702            }
   1703          
   1704            /*
   1705            // Set NWK address to invalid
   1706            entry.user    = ADDRMGR_USER_DEFAULT;
   1707            entry.nwkAddr = INVALID_NODE_ADDR;
   1708            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   1709            AddrMgrEntryUpdate( &entry );
   1710          
   1711            // Check
   1712            if ( removeChildren == TRUE )
   1713            {
   1714              // Set index to INVALID_NODE_ADDR to start search
   1715              entry.index = INVALID_NODE_ADDR;
   1716          
   1717              // Get first entry
   1718              AddrMgrEntryGetNext( &entry );
   1719          
   1720              // Remove all descendents
   1721              while ( entry.index != INVALID_NODE_ADDR )
   1722              {
   1723                // Check NWK address allocation algorithm
   1724                if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
   1725                {
   1726                  // Set NWK address to invalid
   1727                  entry.nwkAddr = INVALID_NODE_ADDR;
   1728                  AddrMgrEntryUpdate( &entry );
   1729                }
   1730          
   1731                // Get next entry
   1732                AddrMgrEntryGetNext( &entry );
   1733              }
   1734            }
   1735            */
   1736          }
   \                     ??ZDApp_LeaveUpdate_1:
   \   000015   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1737          
   1738          /*********************************************************************
   1739           * CALLBACK FUNCTIONS
   1740           */
   1741          
   1742          
   1743          /*********************************************************************
   1744           * @fn      ZDApp_SendEventMsg()
   1745           *
   1746           * @brief
   1747           *
   1748           *   Sends a Network Join message
   1749           *
   1750           * @param  cmd - command ID
   1751           * @param  len - length (in bytes) of the buf field
   1752           * @param  buf - buffer for the rest of the message.
   1753           *
   1754           * @return  none
   1755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1756          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1757          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1758            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000004                ; Setup parameters for call to function ZDApp_SendMsg
   \   000004   EA           MOV     A,R2
   \   000005   FB           MOV     R3,A
   \   000006   E9           MOV     A,R1
   \   000007   FA           MOV     R2,A
   \   000008                REQUIRE ?Subroutine26
   \   000008                ; // Fall through to label ?Subroutine26
   1759          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDApp_SendMsg?relay
   \   000008   22           RET
   1760          
   1761          /*********************************************************************
   1762           * @fn      ZDApp_SendMsg()
   1763           *
   1764           * @brief   Sends a OSAL message
   1765           *
   1766           * @param  taskID - Where to send the message
   1767           * @param  cmd - command ID
   1768           * @param  len - length (in bytes) of the buf field
   1769           * @param  buf - buffer for the rest of the message.
   1770           *
   1771           * @return  none
   1772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1773          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1774          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EC           MOV     A,R4
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   ED           MOV     A,R5
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   89..         MOV     ?V0 + 3,R1
   1775            osal_event_hdr_t *msgPtr;
   1776          
   1777            // Send the address to the task
   1778            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00001E   8B82         MOV     DPL,R3
   \   000020   AE82         MOV     R6,DPL
   \   000022                ; Setup parameters for call to function osal_msg_allocate
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   7B00         MOV     R3,#0x0
   \   000026   12....       LCALL   ??osal_msg_allocate?relay
   \   000029   8A..         MOV     ?V0 + 4,R2
   \   00002B   8B..         MOV     ?V0 + 5,R3
   1779            if ( msgPtr )
   \   00002D   EA           MOV     A,R2
   \   00002E   7001         JNZ     ??ZDApp_SendMsg_0
   \   000030   EB           MOV     A,R3
   \                     ??ZDApp_SendMsg_0:
   \   000031   6046         JZ      ??ZDApp_SendMsg_1
   1780            {
   1781              if ( (len > 0) && (buf != NULL) )
   \   000033   EE           MOV     A,R6
   \   000034   602C         JZ      ??ZDApp_SendMsg_2
   \   000036   7401         MOV     A,#0x1
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   7002         JNZ     ??ZDApp_SendMsg_3
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \                     ??ZDApp_SendMsg_3:
   \   000040   6020         JZ      ??ZDApp_SendMsg_2
   1782                osal_memcpy( msgPtr, buf, len );
   \   000042                ; Setup parameters for call to function osal_memcpy
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0 + 0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V0 + 1,A
   \   00004E   75..00       MOV     ?V0 + 2,#0x0
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000056   EE           MOV     A,R6
   \   000057   FC           MOV     R4,A
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   12....       LCALL   ??osal_memcpy?relay
   \   00005D   7403         MOV     A,#0x3
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   1783          
   1784              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_2:
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   85..82       MOV     DPL,?V0 + 4
   \   00006C   85..83       MOV     DPH,?V0 + 5
   \   00006F   F0           MOVX    @DPTR,A
   1785              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000070                ; Setup parameters for call to function osal_msg_send
   \   000070   AA..         MOV     R2,?V0 + 4
   \   000072   AB..         MOV     R3,?V0 + 5
   \   000074   A9..         MOV     R1,?V0 + 3
   \   000076   12....       LCALL   ??osal_msg_send?relay
   1786            }
   1787          }
   \                     ??ZDApp_SendMsg_1:
   \   000079   7403         MOV     A,#0x3
   \   00007B                REQUIRE ?Subroutine25
   \   00007B                ; // Fall through to label ?Subroutine25

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F06         MOV     R7,#0x6
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
   1788          
   1789          /*********************************************************************
   1790           * Call Back Functions from NWK  - API
   1791           */
   1792          
   1793          /*********************************************************************
   1794           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1795           *
   1796           * @brief       This function returns a choice of PAN to join.
   1797           *
   1798           * @param       ResultCount - Number of routers discovered
   1799           * @param               NetworkList - Pointer to list of network descriptors
   1800           *
   1801           * @return      ZStatus_t
   1802           */
   1803          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1804          ZStatus_t ZDO_NetworkDiscoveryConfirmCB( uint8 ResultCount,
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1805                                                   networkDesc_t *NetworkList )
   1806          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0 + 3,R1
   1807            networkDesc_t *pNwkDesc;
   1808            ZDO_NetworkDiscoveryCfm_t msg;
   1809            uint8  i;
   1810            uint8 stackProfile;
   1811            uint8 stackProfilePro;
   1812            uint8 selected;
   1813          
   1814          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1815            if ( zdappMgmtNwkDiscReqInProgress )
   1816            {
   1817              zdappMgmtNwkDiscReqInProgress = false;
   1818              ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
   1819              return ( ZSuccess );
   1820            }
   1821          #endif
   1822          
   1823            // process discovery results
   1824            stackProfilePro = FALSE;
   \   000017   75..00       MOV     ?V0 + 1,#0x0
   1825            selected = FALSE;
   1826          
   1827            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   00001A   75..00       MOV     ?V0 + 2,#0x0
   1828            {
   1829              pNwkDesc = NetworkList;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FE           MOV     R6,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FF           MOV     R7,A
   1830              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   000028   75..00       MOV     ?V0 + 0,#0x0
   \   00002B   8020         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   1831              {
   1832                if ( zgConfigPANID != 0xFFFF )
   1833                {
   1834                  // PAN Id is preconfigured. check if it matches
   1835                  if ( pNwkDesc->panId != zgConfigPANID )
   1836                    continue;
   1837                }
   1838                
   1839          
   1840                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true ) 
   1841                {
   1842                  // If the extended Pan ID is commissioned to a non zero value
   1843                  // Only join the Pan that has match EPID
   1844                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1845                    continue;
   1846                  
   1847                }
   1848          
   1849          
   1850                  // check that network is allowing joining
   1851                  if ( ZSTACK_ROUTER_BUILD )
   1852                  {
   1853                    if ( stackProfilePro == FALSE )
   1854                    {
   1855                      if ( !pNwkDesc->routerCapacity )
   1856                      {
   1857                        continue;
   1858                      }
   1859                    }
   1860                    else
   1861                    {
   1862                      if ( !pNwkDesc->deviceCapacity )
   1863                      {
   1864                        continue;
   1865                      }
   1866                    }
   1867                  }
   1868                  else if ( ZSTACK_END_DEVICE_BUILD )
   1869                  {
   1870                    if ( !pNwkDesc->deviceCapacity )
   1871                    {
   1872                      continue;
   1873                    }
   1874                  }
   1875          
   1876                  // check version of zigbee protocol
   1877                  if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1878                    continue;
   1879          
   1880                  // check version of stack profile
   1881                  if ( pNwkDesc->stackProfile != zgStackProfile  )
   1882                  {
   1883                    if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE)) 
   1884                        || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_2:
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7008         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   \   000032   7401         MOV     A,#0x1
   \   000034   6A           XRL     A,R2
   \   000035   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   1885                      stackProfilePro = TRUE;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_4:
   \   000037   75..01       MOV     ?V0 + 1,#0x1
   1886                    
   1887                    if ( stackProfile == 0 )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_3:
   \   00003A   E5..         MOV     A,?V0 + 2
   \   00003C   6003         JZ      $+5
   \   00003E   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
   \                     ??ZDO_NetworkDiscoveryConfirmCB_6:
   \   000041   05..         INC     ?V0 + 0
   \   000043   EE           MOV     A,R6
   \   000044   2416         ADD     A,#0x16
   \   000046   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000049   FE           MOV     R6,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FF           MOV     R7,A
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00004D   EE           MOV     A,R6
   \   00004E   2407         ADD     A,#0x7
   \   000050   F5..         MOV     ?V0 + 6,A
   \   000052   EF           MOV     A,R7
   \   000053   3400         ADDC    A,#0x0
   \   000055   F5..         MOV     ?V0 + 7,A
   \   000057   EE           MOV     A,R6
   \   000058   240D         ADD     A,#0xd
   \   00005A   F5..         MOV     ?V0 + 4,A
   \   00005C   EF           MOV     A,R7
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   F5..         MOV     ?V0 + 5,A
   \   000061   E5..         MOV     A,?V0 + 0
   \   000063   C3           CLR     C
   \   000064   95..         SUBB    A,?V0 + 3
   \   000066   4003         JC      $+5
   \   000068   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_7 & 0xFFFF
   \   00006B   90....       MOV     DPTR,#zgConfigPANID
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   64FF         XRL     A,#0xff
   \   000071   7004         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_8
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   64FF         XRL     A,#0xff
   \                     ??ZDO_NetworkDiscoveryConfirmCB_8:
   \   000077   6015         JZ      ??ZDO_NetworkDiscoveryConfirmCB_9
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F8           MOV     R0,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   90....       MOV     DPTR,#zgConfigPANID
   \   000085   E0           MOVX    A,@DPTR
   \   000086   68           XRL     A,R0
   \   000087   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_10
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   69           XRL     A,R1
   \                     ??ZDO_NetworkDiscoveryConfirmCB_10:
   \   00008C   70B3         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_9:
   \   00008E                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00008E   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000090   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000092   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   000095   E9           MOV     A,R1
   \   000096   6401         XRL     A,#0x1
   \   000098   700E         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_11
   \   00009A                ; Setup parameters for call to function sAddrExtCmp
   \   00009A   AC..         MOV     R4,?V0 + 4
   \   00009C   AD..         MOV     R5,?V0 + 5
   \   00009E   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   0000A0   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   0000A2   12....       LCALL   ??sAddrExtCmp?relay
   \   0000A5   E9           MOV     A,R1
   \   0000A6   6099         JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_11:
   \   0000A8   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   6004         JZ      ??ZDO_NetworkDiscoveryConfirmCB_12
   \   0000AE   6401         XRL     A,#0x1
   \   0000B0   701A         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_13
   \                     ??ZDO_NetworkDiscoveryConfirmCB_12:
   \   0000B2   E5..         MOV     A,?V0 + 1
   \   0000B4   700F         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_14
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \                     ??ZDO_NetworkDiscoveryConfirmCB_15:
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   700F         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_16
   \   0000C2   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
   \                     ??ZDO_NetworkDiscoveryConfirmCB_14:
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   A3           INC     DPTR
   \   0000CA   80EE         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_15
   \                     ??ZDO_NetworkDiscoveryConfirmCB_13:
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   6402         XRL     A,#0x2
   \   0000CF   60F4         JZ      ??ZDO_NetworkDiscoveryConfirmCB_14
   \                     ??ZDO_NetworkDiscoveryConfirmCB_16:
   \   0000D1   85..82       MOV     DPL,?V0 + 6
   \   0000D4   85..83       MOV     DPH,?V0 + 7
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FA           MOV     R2,A
   \   0000D9   90....       MOV     DPTR,#(_NIB + 17)
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   6A           XRL     A,R2
   \   0000DE   6003         JZ      $+5
   \   0000E0   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   FA           MOV     R2,A
   \   0000F1   90....       MOV     DPTR,#zgStackProfile
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   6A           XRL     A,R2
   \   0000F6   6033         JZ      ??ZDO_NetworkDiscoveryConfirmCB_5
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6401         XRL     A,#0x1
   \   0000FB   6003         JZ      $+5
   \   0000FD   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
   \   000100   7402         MOV     A,#0x2
   \   000102   6A           XRL     A,R2
   \   000103   6003         JZ      $+5
   \   000105   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
   \   000108   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
   1888                    {
   1889                      continue;
   1890                    }
   1891                  }
   1892          
   1893                // check if beacon order is the right value..
   1894                //  if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
   1895                //    continue;
   1896          
   1897                // choose this pan for joining
   1898                break;
   1899              } 
   1900              if (i < ResultCount)
   1901              {
   1902               selected = TRUE;
   1903                break;
   1904              }
   1905             
   1906              // break if selected or stack profile pro wasn't found
   1907              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_7:
   \   00010B   E5..         MOV     A,?V0 + 1
   \   00010D   600C         JZ      ??ZDO_NetworkDiscoveryConfirmCB_17
   1908              {
   1909                break;
   1910              }
   1911            }
   \   00010F   05..         INC     ?V0 + 2
   \   000111   E5..         MOV     A,?V0 + 2
   \   000113   C3           CLR     C
   \   000114   9402         SUBB    A,#0x2
   \   000116   5003         JNC     $+5
   \   000118   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
   1912          
   1913            if ( i == ResultCount )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_17:
   \   00011B   E5..         MOV     A,?V0 + 3
   \   00011D   65..         XRL     A,?V0 + 0
   \   00011F   700A         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_5
   1914            {
   1915              msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
   \   000121   7403         MOV     A,#0x3
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   7401         MOV     A,#0x1
   \   000128   F0           MOVX    @DPTR,A
   \   000129   8058         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_18
   1916            }
   1917            else
   1918            {
   1919              msg.hdr.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_5:
   \   00012B   7403         MOV     A,#0x3
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   E4           CLR     A
   \   000131   F0           MOVX    @DPTR,A
   1920              msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
   \   000132   8E82         MOV     DPL,R6
   \   000134   8F83         MOV     DPH,R7
   \   000136   E0           MOVX    A,@DPTR
   \   000137   C0E0         PUSH    A
   \   000139   7404         MOV     A,#0x4
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   D0E0         POP     A
   \   000140   F0           MOVX    @DPTR,A
   1921              msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
   \   000141   8E82         MOV     DPL,R6
   \   000143   8F83         MOV     DPH,R7
   \   000145   A3           INC     DPTR
   \   000146   E0           MOVX    A,@DPTR
   \   000147   C0E0         PUSH    A
   \   000149   7405         MOV     A,#0x5
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   D0E0         POP     A
   \   000150   F0           MOVX    @DPTR,A
   1922              msg.logicalChannel = pNwkDesc->logicalChannel;
   \   000151   8E82         MOV     DPL,R6
   \   000153   8F83         MOV     DPH,R7
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   E0           MOVX    A,@DPTR
   \   000158   C0E0         PUSH    A
   \   00015A   7406         MOV     A,#0x6
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   D0E0         POP     A
   \   000161   F0           MOVX    @DPTR,A
   1923              msg.version = pNwkDesc->version;
   \   000162   85..82       MOV     DPL,?V0 + 6
   \   000165   85..83       MOV     DPH,?V0 + 7
   \   000168   E0           MOVX    A,@DPTR
   \   000169   C0E0         PUSH    A
   \   00016B   7407         MOV     A,#0x7
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   D0E0         POP     A
   \   000172   F0           MOVX    @DPTR,A
   1924              osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
   \   000173                ; Setup parameters for call to function sAddrExtCpy
   \   000173   AC..         MOV     R4,?V0 + 4
   \   000175   AD..         MOV     R5,?V0 + 5
   \   000177   7408         MOV     A,#0x8
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   AA82         MOV     R2,DPL
   \   00017E   AB83         MOV     R3,DPH
   \   000180   12....       LCALL   ??sAddrExtCpy?relay
   1925            }
   1926          
   1927            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (uint8 *)&msg );
   \                     ??ZDO_NetworkDiscoveryConfirmCB_18:
   \   000183                ; Setup parameters for call to function ZDApp_SendMsg
   \   000183   7402         MOV     A,#0x2
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   AC82         MOV     R4,DPL
   \   00018A   AD83         MOV     R5,DPH
   \   00018C   7B0E         MOV     R3,#0xe
   \   00018E   7A01         MOV     R2,#0x1
   \   000190   12....       LCALL   ?Subroutine7 & 0xFFFF
   1928          
   1929            return (ZSuccess);
   \                     ??CrossCallReturnLabel_35:
   \   000193   7900         MOV     R1,#0x0
   \   000195   7410         MOV     A,#0x10
   \   000197   02....       LJMP    ?Subroutine22 & 0xFFFF
   1930          }  // ZDO_NetworkDiscoveryConfirmCB
   1931          
   1932          /*********************************************************************
   1933           * @fn          ZDO_NetworkFormationConfirmCB
   1934           *
   1935           * @brief       This function reports the results of the request to
   1936           *              initialize a coordinator in a network.
   1937           *
   1938           * @param       Status - Result of NLME_NetworkFormationRequest()
   1939           *
   1940           * @return      none
   1941           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1942          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   1943          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1944            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   1945          
   1946            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   1947            {
   1948              // LED on shows Coordinator started
   1949              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine16 & 0xFFFF
   1950          
   1951              // LED off forgets HOLD_AUTO_START
   1952              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   1953          
   1954          #if defined ( ZBIT )
   1955              SIM_SetColor(0xd0ffd0);
   1956          #endif
   1957          
   1958              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_24:
   \   00000E   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   1959              {
   1960                // Began with HOLD_AUTO_START
   1961                devState = DEV_COORD_STARTING;
   \   000010   7408         MOV     A,#0x8
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   1962              }
   1963            }
   1964          #if defined(BLINK_LEDS)
   1965            else
   1966              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7904         MOV     R1,#0x4
   \   000019   12....       LCALL   ??HalLedSet?relay
   1967          #endif
   1968          
   1969            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00001C                ; Setup parameters for call to function osal_set_event
   \   00001C   7A02         MOV     R2,#0x2
   \   00001E   02....       LJMP    ?Subroutine18 & 0xFFFF
   1970          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   7904         MOV     R1,#0x4
   \   000004   12....       LCALL   ??HalLedSet?relay
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7908         MOV     R1,#0x8
   \   00000B   12....       LCALL   ??HalLedSet?relay
   \   00000E   90....       MOV     DPTR,#devState
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET
   1971          
   1972          /*********************************************************************
   1973           * @fn          ZDO_StartRouterConfirmCB
   1974           *
   1975           * @brief       This function reports the results of the request to
   1976           *              start functioning as a router in a network.
   1977           *
   1978           * @param       Status - Result of NLME_StartRouterRequest()
   1979           *
   1980           * @return      none
   1981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1982          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   1983          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1984            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   1985          
   1986            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_StartRouterConfirmCB_0
   1987            {
   1988              // LED on shows Router started
   1989              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine16 & 0xFFFF
   1990              // LED off forgets HOLD_AUTO_START
   1991              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   1992              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_25:
   \   00000E   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   1993              {
   1994                // Began with HOLD_AUTO_START
   1995                devState = DEV_END_DEVICE;
   \   000010   7406         MOV     A,#0x6
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   1996              }
   1997            }
   1998          #if defined(BLINK_LEDS)
   1999            else
   2000              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7904         MOV     R1,#0x4
   \   000019   12....       LCALL   ??HalLedSet?relay
   2001          #endif
   2002          
   2003            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00001C                ; Setup parameters for call to function osal_set_event
   \   00001C   7A20         MOV     R2,#0x20
   \   00001E   02....       LJMP    ?Subroutine18 & 0xFFFF
   2004          }
   2005          
   2006          /*********************************************************************
   2007           * @fn          ZDO_JoinConfirmCB
   2008           *
   2009           * @brief       This function allows the next hight layer to be notified
   2010           *              of the results of its request to join itself or another
   2011           *              device to a network.
   2012           *
   2013           * @param       Status - Result of NLME_JoinRequest()
   2014           *
   2015           * @return      none
   2016           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2017          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2018          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2019            (void)PanId;  // remove if this parameter is used.
   2020            
   2021            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   2022          
   2023            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_JoinConfirmCB_0
   2024            {
   2025              // LED on shows device joined
   2026              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine16 & 0xFFFF
   2027              // LED off forgets HOLD_AUTO_START
   2028              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2029              if ( (devState == DEV_HOLD) )
   \                     ??CrossCallReturnLabel_26:
   \   00000E   700C         JNZ     ??ZDO_JoinConfirmCB_1
   2030              {
   2031                // Began with HOLD_AUTO_START
   2032                devState = DEV_NWK_JOINING;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_JoinConfirmCB_1
   2033              }
   2034          
   2035              if ( !ZG_SECURE_ENABLED )
   2036              {
   2037                // Notify to save info into NV
   2038                ZDApp_NVUpdate();
   2039              }
   2040            }
   2041          #if defined(BLINK_LEDS)
   2042            else
   2043              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7904         MOV     R1,#0x4
   \   000019   12....       LCALL   ??HalLedSet?relay
   2044          #endif
   2045          
   2046            // Notify ZDApp
   2047            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_1:
   \   00001C                ; Setup parameters for call to function ZDApp_SendMsg
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7B02         MOV     R3,#0x2
   \   000022   7A02         MOV     R2,#0x2
   \   000024   02....       LJMP    ?Subroutine26 & 0xFFFF
   2048          }
   2049          
   2050          /*********************************************************************
   2051           * @fn          ZDO_AddrChangeIndicationCB
   2052           *
   2053           * @brief       This function notifies the application that this
   2054           *              device's address has changed.  Could happen in 
   2055           *              a network with stochastic addressing (PRO).
   2056           *
   2057           * @param       newAddr - the new address
   2058           *
   2059           * @return      none
   2060           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2061          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2062          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2063            (void)newAddr;  // remove if this parameter is used
   2064            
   2065            // Notify to save info into NV
   2066            ZDApp_NVUpdate();
   2067          
   2068            // Notify the applications   
   2069            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   12....       LCALL   ?Subroutine3 & 0xFFFF
   2070          
   2071            // Send out a device announce
   2072            ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_29:
   \   000007                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000007   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   2073          }
   \   00000A   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2074          
   2075          /*********************************************************************
   2076           * @fn          ZDO_JoinIndicationCB
   2077           *
   2078           * @brief       This function allows the next higher layer of a
   2079           *              coordinator to be notified of a remote join request.
   2080           *
   2081           * @param       ShortAddress - 16-bit address
   2082           * @param       ExtendedAddress - IEEE (64-bit) address
   2083           * @param       CapabilityInformation - Association Capability Information
   2084           * @param       type - of joining - 
   2085           *                          NWK_ASSOC_JOIN
   2086           *                          NWK_ASSOC_REJOIN_UNSECURE
   2087           *                          NWK_ASSOC_REJOIN_SECURE
   2088           *
   2089           * @return      ZStatus_t
   2090           */
   2091          ZStatus_t ZDO_JoinIndicationCB( uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2092                                          uint8 CapabilityInformation, uint8 type )
   2093          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2094            (void)ShortAddress;
   2095            (void)ExtendedAddress;
   2096            (void)CapabilityInformation;
   2097            
   2098              // Notify to save info into NV
   2099              ZDApp_NVUpdate();
   2100            
   2101              // send notification to TC of new device..
   2102              if ( ZG_SECURE_ENABLED )
   2103              {
   2104                if ( type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE )
   2105                {
   2106                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2107                }
   2108              }
   2109            
   2110              return ( ZSuccess );
   \   000000                REQUIRE ?Subroutine19
   \   000000                ; // Fall through to label ?Subroutine19

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2111          }
   2112          
   2113          /*********************************************************************
   2114           * @fn          ZDO_ConcentratorIndicationCB
   2115           *
   2116           * @brief       This function allows the next higher layer of a
   2117           *              device to be notified of existence of the concentrator.
   2118           *
   2119           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2120           *
   2121           * @return      void 
   2122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2123          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr )
   \                     ZDO_ConcentratorIndicationCB:
   2124          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2125            // Write your code here to do something with the concentrator's
   2126            // address.
   2127            (void)nwkAddr;
   2128          }
   \   000000   02....       LJMP    ?BRET
   2129          
   2130          /*********************************************************************
   2131           * @fn          ZDO_LeaveCnf
   2132           *
   2133           * @brief       This function allows the next higher layer to be
   2134           *              notified of the results of its request for this or
   2135           *              a child device to leave the network.
   2136           *
   2137           * @param       cnf - NLME_LeaveCnf_t
   2138           *
   2139           * @return      none
   2140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2141          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2142          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2143            // Check for this device
   2144            if ( osal_ExtAddrEqual( cnf->extAddr,
   2145                                    NLME_GetExtAddr() ) == TRUE )
   \   000009   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00000C                ; Setup parameters for call to function sAddrExtCmp
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000F   EA           MOV     A,R2
   \   000010   FC           MOV     R4,A
   \   000011   EB           MOV     A,R3
   \   000012   FD           MOV     R5,A
   \   000013   AA..         MOV     R2,?V0 + 0
   \   000015   AB..         MOV     R3,?V0 + 1
   \   000017   12....       LCALL   ??sAddrExtCmp?relay
   \   00001A   E9           MOV     A,R1
   \   00001B   6401         XRL     A,#0x1
   \   00001D   700C         JNZ     ??ZDO_LeaveCnf_0
   2146            {
   2147              // Prepare to leave with reset
   2148              ZDApp_LeaveReset( cnf->rejoin );
   \   00001F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00001F   EE           MOV     A,R6
   \   000020   240B         ADD     A,#0xb
   \   000022   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   2149            }
   \                     ??CrossCallReturnLabel_50:
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000029   8024         SJMP    ??ZDO_LeaveCnf_1
   2150            else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_LeaveCnf_0:
   \   00002B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6004         JZ      ??ZDO_LeaveCnf_2
   \   000031   6401         XRL     A,#0x1
   \   000033   701A         JNZ     ??ZDO_LeaveCnf_1
   2151            {
   2152              // Remove device address(optionally descendents) from data
   2153              ZDApp_LeaveUpdate( cnf->dstAddr,
   2154                                 cnf->extAddr,
   2155                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_2:
   \   000035                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   AC..         MOV     R4,?V0 + 0
   \   000047   AD..         MOV     R5,?V0 + 1
   \   000049   12....       LCALL   ?Subroutine5 & 0xFFFF
   2156            }
   \                     ??CrossCallReturnLabel_58:
   \   00004C   12....       LCALL   ??ZDApp_LeaveUpdate?relay
   2157          }
   \                     ??ZDO_LeaveCnf_1:
   \   00004F   02....       LJMP    ??Subroutine33_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine31_0
   \   000004                ; // Fall through to label ??Subroutine31_0
   2158          
   2159          /*********************************************************************
   2160           * @fn          ZDO_LeaveInd
   2161           *
   2162           * @brief       This function allows the next higher layer of a
   2163           *              device to be notified of a remote leave request or
   2164           *              indication.
   2165           *
   2166           * @param       ind - NLME_LeaveInd_t
   2167           *
   2168           * @return      none
   2169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2170          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2171          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2172            uint8 leave;
   2173          
   2174          
   2175            // Parent is requesting the leave - NWK layer filters out illegal
   2176            // requests
   2177            if ( ind->request == TRUE )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   EF           MOV     A,R7
   \   000014   3400         ADDC    A,#0x0
   \   000016   F5..         MOV     ?V0 + 3,A
   \   000018   EE           MOV     A,R6
   \   000019   240B         ADD     A,#0xb
   \   00001B   F5..         MOV     ?V0 + 0,A
   \   00001D   EF           MOV     A,R7
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F5..         MOV     ?V0 + 1,A
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6401         XRL     A,#0x1
   \   000033   703D         JNZ     ??ZDO_LeaveInd_0
   2178            {
   2179              // Notify network of leave
   2180              if ( ZSTACK_ROUTER_BUILD )
   \   000035   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6004         JZ      ??ZDO_LeaveInd_1
   \   00003B   6401         XRL     A,#0x1
   \   00003D   7026         JNZ     ??ZDO_LeaveInd_2
   2181              {
   2182                NLME_LeaveRsp_t rsp;
   2183                rsp.rejoin         = ind->rejoin;
   \                     ??ZDO_LeaveInd_1:
   \   00003F   85..82       MOV     DPL,?V0 + 2
   \   000042   85..83       MOV     DPH,?V0 + 3
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C0E0         PUSH    A
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
   2184                rsp.removeChildren = ind->removeChildren;
   \   000050   85..82       MOV     DPL,?V0 + 0
   \   000053   85..83       MOV     DPH,?V0 + 1
   \   000056   E0           MOVX    A,@DPTR
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   F0           MOVX    @DPTR,A
   2185                NLME_LeaveRsp( &rsp );
   \   00005E                ; Setup parameters for call to function NLME_LeaveRsp
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   ??NLME_LeaveRsp?relay
   2186              }
   2187          
   2188              // Prepare to leave with reset
   2189              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_2:
   \   000065                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000065   85..82       MOV     DPL,?V0 + 2
   \   000068   85..83       MOV     DPH,?V0 + 3
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000070   8031         SJMP    ??ZDO_LeaveInd_3
   2190            }
   2191            else
   2192            {
   2193              leave = FALSE;
   2194          
   2195              // Check if this device needs to leave as a child or descendent
   2196              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000072                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000072   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000075   8A..         MOV     ?V0 + 4,R2
   \   000077   8B..         MOV     ?V0 + 5,R3
   \   000079   85..82       MOV     DPL,?V0 + 0
   \   00007C   85..83       MOV     DPH,?V0 + 1
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000084   E5..         MOV     A,?V0 + 4
   \   000086   6A           XRL     A,R2
   \   000087   7003         JNZ     ??ZDO_LeaveInd_4
   \   000089   E5..         MOV     A,?V0 + 5
   \   00008B   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_4:
   \   00008C   700A         JNZ     ??ZDO_LeaveInd_5
   2197              {
   2198                if ( ( ind->removeChildren == TRUE               ) ||
   2199                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2200                       NODETYPE_DEVICE                           )    )
   \   00008E   7401         MOV     A,#0x1
   \   000090   69           XRL     A,R1
   \   000091   60D2         JZ      ??ZDO_LeaveInd_2
   \   000093   12....       LCALL   ?Subroutine6 & 0xFFFF
   2201                {
   2202                  leave = TRUE;
   2203                }
   2204              }
   \                     ??CrossCallReturnLabel_8:
   \   000096   60CD         JZ      ??ZDO_LeaveInd_2
   2205              else if ( ind->removeChildren == TRUE )
   2206              {
   2207                // Check NWK address allocation algorithm
   2208                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2209              }
   2210          
   2211              if ( leave == TRUE )
   2212              {
   2213                // Prepare to leave with reset
   2214                ZDApp_LeaveReset( ind->rejoin );
   2215              }
   2216              else
   2217              {
   2218                // Remove device address(optionally descendents) from data
   2219                ZDApp_LeaveUpdate( ind->srcAddr,
   2220                                   ind->extAddr,
   2221                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_5:
   \   000098                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000098   EE           MOV     A,R6
   \   000099   2402         ADD     A,#0x2
   \   00009B   FC           MOV     R4,A
   \   00009C   EF           MOV     A,R7
   \   00009D   3400         ADDC    A,#0x0
   \   00009F   FD           MOV     R5,A
   \   0000A0   12....       LCALL   ??ZDApp_LeaveUpdate?relay
   2222              }
   2223            }
   2224          }
   \                     ??ZDO_LeaveInd_3:
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   02....       LJMP    ?Subroutine25 & 0xFFFF
   2225          
   2226          /*********************************************************************
   2227           * @fn          ZDO_SyncIndicationCB
   2228           *
   2229           * @brief       This function allows the next higher layer of a
   2230           *              coordinator to be notified of a loss of synchronization
   2231           *                          with the parent/child device.
   2232           *
   2233           * @param       type: 0 - child; 1 - parent
   2234           *
   2235           *
   2236           * @return      none
   2237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2238          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2239          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2240            (void)shortAddr;  // Remove this line if this parameter is used.
   2241            
   2242            if ( ZSTACK_END_DEVICE_BUILD
   2243              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityInfo & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6402         XRL     A,#0x2
   \   00000A   600F         JZ      ??ZDO_SyncIndicationCB_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6004         JZ      ??ZDO_SyncIndicationCB_1
   \   00000F   6401         XRL     A,#0x1
   \   000011   701B         JNZ     ??CrossCallReturnLabel_36
   \                     ??ZDO_SyncIndicationCB_1:
   \   000013   90....       MOV     DPTR,#(_NIB + 14)
   \   000016   E0           MOVX    A,@DPTR
   \   000017   A2E1         MOV     C,0xE0 /* A   */.1
   \   000019   4013         JC      ??CrossCallReturnLabel_36
   2244            {
   2245              if ( type == 1 )
   \                     ??ZDO_SyncIndicationCB_0:
   \   00001B   7401         MOV     A,#0x1
   \   00001D   69           XRL     A,R1
   \   00001E   700E         JNZ     ??CrossCallReturnLabel_36
   2246              {
   2247                // We lost contact with our parent.  Clear the neighbor Table.
   2248                nwkNeighborInitTable();
   \   000020                ; Setup parameters for call to function nwkNeighborInitTable
   \   000020   12....       LCALL   ??nwkNeighborInitTable?relay
   2249                
   2250                // Start the rejoin process.
   2251                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000023                ; Setup parameters for call to function ZDApp_SendMsg
   \   000023   7C00         MOV     R4,#0x0
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7B02         MOV     R3,#0x2
   \   000029   7A03         MOV     R2,#0x3
   \   00002B   12....       LCALL   ?Subroutine7 & 0xFFFF
   2252              }
   2253            }
   2254          }
   \                     ??CrossCallReturnLabel_36:
   \   00002E   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2255          
   2256          /*********************************************************************
   2257           * @fn          ZDO_ManytoOneFailureIndicationCB
   2258           *
   2259           * @brief       This function allows the next higher layer of a
   2260           *              concentrator to be notified of a many-to-one route 
   2261           *              failure. 
   2262           *
   2263           * @param       none
   2264           *
   2265           *
   2266           * @return      none
   2267           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2268          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2269          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2270            // By default, the concentrator automatically redo many-to-one route 
   2271            // discovery to update all many-to-one routes in the network
   2272            // If you want anything processing other than the default,
   2273            // please replace the following code.
   2274            
   2275            if( zgConcentratorRC == true )  // concentrator with route cache
   \   000004   90....       MOV     DPTR,#zgConcentratorRC
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   90....       MOV     DPTR,#zgConcentratorRadius
   \   00000D   7006         JNZ     ??ZDO_ManytoOneFailureIndicationCB_0
   2276            {
   2277              NLME_RouteDiscoveryRequest( 0x00, MTO_ROUTE, zgConcentratorRadius);
   \   00000F                ; Setup parameters for call to function NLME_RouteDiscoveryRequest
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FC           MOV     R4,A
   \   000011   7901         MOV     R1,#0x1
   \   000013   8004         SJMP    ??ZDO_ManytoOneFailureIndicationCB_1
   2278            }
   2279            else
   2280            { // Concentrator with no route cache
   2281              NLME_RouteDiscoveryRequest( 0x00, MTO_ROUTE | NO_ROUTE_CACHE, zgConcentratorRadius);
   \                     ??ZDO_ManytoOneFailureIndicationCB_0:
   \   000015                ; Setup parameters for call to function NLME_RouteDiscoveryRequest
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   7903         MOV     R1,#0x3
   \                     ??ZDO_ManytoOneFailureIndicationCB_1:
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??NLME_RouteDiscoveryRequest?relay
   2282            } 
   2283          }
   \   000020   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2284          
   2285          
   2286          /*********************************************************************
   2287           * @fn          ZDO_PollConfirmCB
   2288           *
   2289           * @brief       This function allows the next higher layer to be
   2290           *              notified of a Poll Confirm.
   2291           *
   2292           * @param       none
   2293           *
   2294           * @return      none
   2295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2296          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2297          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2298            (void)status;  // Remove this line if this parameter is used.
   2299            return;
   \   000000   02....       LJMP    ?BRET
   2300          }
   2301          
   2302          /******************************************************************************
   2303           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2304           *
   2305           * @brief       Stub routine implemented by NHLE. NHLE should call
   2306           *              <AddrMgrWriteNV> when appropriate.
   2307           *
   2308           * @param       none
   2309           *
   2310           * @return      none
   2311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2312          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2313          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2314          #if defined ( NV_RESTORE )  
   2315            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2316            {
   2317              // Trigger to save info into NV
   2318              ZDApp_NVUpdate();
   2319            }
   2320          #endif
   2321          }
   \   000000   02....       LJMP    ?BRET
   2322          
   2323          /*********************************************************************
   2324           * Call Back Functions from Security  - API
   2325           */
   2326          
   2327           /*********************************************************************
   2328           * @fn          ZDO_UpdateDeviceIndication
   2329           *
   2330           * @brief       This function notifies the "Trust Center" of a
   2331           *              network when a device joins or leaves the network.
   2332           *
   2333           * @param       extAddr - pointer to 64 bit address of new device
   2334           * @param       status  - 0 if a new device joined securely
   2335           *                      - 1 if a new device joined un-securely
   2336           *                      - 2 if a device left the network
   2337           *
   2338           * @return      true if newly joined device should be allowed to
   2339           *                                              remain on network
   2340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2341          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2342          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2343            // can implement a network access policy based on the
   2344            // IEEE address of newly joining devices...
   2345            (void)extAddr;
   2346            (void)status;
   2347            
   2348            return ZSuccess;
   \   000000   02....       LJMP    ?Subroutine19 & 0xFFFF
   2349          }
   2350          
   2351          /*********************************************************************
   2352           * @fn          ZDApp_InMsgCB
   2353           *
   2354           * @brief       This function is called to pass up any message that is
   2355           *              not yet supported.  This allows for the developer to
   2356           *              support features themselves..
   2357           *
   2358           * @return      none
   2359           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2360          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2361          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2362            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000F   F9           MOV     R1,A
   \   000010   7480         MOV     A,#-0x80
   \   000012   59           ANL     A,R1
   \   000013   FB           MOV     R3,A
   \   000014   E4           CLR     A
   \   000015   7001         JNZ     ??ZDApp_InMsgCB_0
   \   000017   EB           MOV     A,R3
   \                     ??ZDApp_InMsgCB_0:
   \   000018   7046         JNZ     ??ZDApp_InMsgCB_1
   2363            {
   2364              // Handle the response message
   2365            }
   2366            else
   2367            {
   2368              // Handle the request message by sending a generic "not supported".
   2369              // Device Announce doesn't have a response.
   2370              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   00001A   EE           MOV     A,R6
   \   00001B   240B         ADD     A,#0xb
   \   00001D   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000020   703E         JNZ     ??ZDApp_InMsgCB_1
   \   000022   7413         MOV     A,#0x13
   \   000024   68           XRL     A,R0
   \   000025   7001         JNZ     ??ZDApp_InMsgCB_2
   \   000027   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_2:
   \   000028   6036         JZ      ??ZDApp_InMsgCB_1
   2371              {
   2372                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2373                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   00002A                ; Setup parameters for call to function ZDP_GenericRsp
   \   00002A   E8           MOV     A,R0
   \   00002B   F5..         MOV     ?V0 + 0,A
   \   00002D   7480         MOV     A,#-0x80
   \   00002F   49           ORL     A,R1
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   75..00       MOV     ?V0 + 0,#0x0
   \   00003A   75..00       MOV     ?V0 + 1,#0x0
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   EE           MOV     A,R6
   \   000043   240E         ADD     A,#0xe
   \   000045   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   2374              }
   2375            }
   \                     ??CrossCallReturnLabel_52:
   \   000048   FD           MOV     R5,A
   \   000049   7C84         MOV     R4,#-0x7c
   \   00004B   EE           MOV     A,R6
   \   00004C   2402         ADD     A,#0x2
   \   00004E   0A           INC     R2
   \   00004F   0A           INC     R2
   \   000050   EF           MOV     A,R7
   \   000051   3400         ADDC    A,#0x0
   \   000053   FB           MOV     R3,A
   \   000054   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   ??ZDP_GenericRsp?relay
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   2376          }
   \                     ??ZDApp_InMsgCB_1:
   \   000060   02....       LJMP    ??Subroutine33_0 & 0xFFFF
   2377          
   2378          
   2379          /*********************************************************************
   2380           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2381           *
   2382           * @brief   Changes the Match Descriptor Response permission.
   2383           *
   2384           * @param   endpoint - endpoint to allow responses
   2385           * @param   action - true to allow responses, false to not
   2386           *
   2387           * @return  none
   2388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2389          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2390          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2391            // Store the action
   2392            afSetMatch( endpoint, action );
   \   000004                ; Setup parameters for call to function afSetMatch
   \   000004   12....       LCALL   ??afSetMatch?relay
   2393          }
   \   000007   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2394          
   2395          /*********************************************************************
   2396           * @fn      ZDApp_NetworkInit()
   2397           *
   2398           * @brief   Used to start the network joining process
   2399           *
   2400           * @param   delay - mSec delay to wait before starting
   2401           *
   2402           * @return  none
   2403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2404          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2405          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2406            if ( delay )
   \   000004   EA           MOV     A,R2
   \   000005   7001         JNZ     ??ZDApp_NetworkInit_0
   \   000007   EB           MOV     A,R3
   \                     ??ZDApp_NetworkInit_0:
   \   000008   600B         JZ      ??ZDApp_NetworkInit_1
   2407            {
   2408              // Wait awhile before starting the device
   2409              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   00000A                ; Setup parameters for call to function osal_start_timerEx
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   12....       LCALL   ?Subroutine8 & 0xFFFF
   2410            }
   \                     ??CrossCallReturnLabel_11:
   \   000013   8005         SJMP    ??CrossCallReturnLabel_31
   2411            else
   2412            {
   2413              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_1:
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A01         MOV     R2,#0x1
   \   000017   12....       LCALL   ?Subroutine23 & 0xFFFF
   2414            }
   2415          }
   \                     ??CrossCallReturnLabel_31:
   \   00001A   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2416          
   2417          /*********************************************************************
   2418           * @fn      ZDApp_NwkStateUpdateCB()
   2419           *
   2420           * @brief   This function notifies that this device's network 
   2421           *          state info has been changed.
   2422           *
   2423           * @param   none
   2424           *
   2425           * @return  none
   2426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2427          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2428          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2429            // Notify to save info into NV
   2430            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B02         MOV     R3,#0x2
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay
   2431            {
   2432              // Trigger to save info into NV
   2433              ZDApp_NVUpdate();
   2434            }
   2435          }
   \   000010   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2436          
   2437          /*********************************************************************
   2438           * @fn      ZDApp_NodeProfileSync()
   2439           *
   2440           * @brief   Sync node with stack profile.
   2441           *
   2442           * @param   cfm - ZDO_NetworkDiscoveryCfm_t
   2443           *
   2444           * @return  none
   2445           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2446          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
   \                     ZDApp_NodeProfileSync:
   2447          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2448            networkDesc_t* desc;
   2449            uint16         panID;
   2450          
   2451            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000005   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000008   E0           MOVX    A,@DPTR
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   5058         JNC     ??ZDApp_NodeProfileSync_0
   2452            {
   2453              panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
   2454          
   2455              desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
   \   00000D                ; Setup parameters for call to function nwk_getNetworkDesc
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FE           MOV     R6,A
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FD           MOV     R5,A
   \   000028   EE           MOV     A,R6
   \   000029   FC           MOV     R4,A
   \   00002A   EA           MOV     A,R2
   \   00002B   2406         ADD     A,#0x6
   \   00002D   FA           MOV     R2,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??nwk_getNetworkDesc?relay
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   2456          
   2457              if (desc != NULL)
   \   000039   E582         MOV     A,DPL
   \   00003B   7002         JNZ     ??ZDApp_NodeProfileSync_1
   \   00003D   E583         MOV     A,DPH
   \                     ??ZDApp_NodeProfileSync_1:
   \   00003F   6024         JZ      ??ZDApp_NodeProfileSync_0
   2458              {
   2459                if ( desc->stackProfile != zgStackProfile )
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   90....       MOV     DPTR,#zgStackProfile
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6A           XRL     A,R2
   \   000050   6013         JZ      ??ZDApp_NodeProfileSync_0
   2460                {
   2461                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000052   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000055   E0           MOVX    A,@DPTR
   \   000056   54F8         ANL     A,#0xf8
   \   000058   4402         ORL     A,#0x2
   \   00005A   F0           MOVX    @DPTR,A
   2462                  ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00005B   740C         MOV     A,#0xc
   \   00005D   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000060   F0           MOVX    @DPTR,A
   2463                  NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000061                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   ??NLME_SetBroadcastFilter?relay
   2464                }
   2465              }
   2466            }
   2467          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000065   80..         SJMP    ??Subroutine33_0
   2468          
   2469          /*********************************************************************
   2470           * @fn      ZDApp_StartJoiningCycle()
   2471           *
   2472           * @brief   Starts the joining cycle of a device.  This will only 
   2473           *          continue an already started (or stopped) joining cycle.
   2474           *
   2475           * @param   none
   2476           *
   2477           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2479          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2480          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2481            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   2482            {
   2483              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   7401         MOV     A,#0x1
   \   000013   90....       MOV     DPTR,#continueJoining
   \   000016   F0           MOVX    @DPTR,A
   2484              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay
   2485          
   2486              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   2487            }
   2488            else
   2489              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2490          }
   2491          
   2492          /*********************************************************************
   2493           * @fn      ZDApp_StopJoiningCycle()
   2494           *
   2495           * @brief   Stops the joining or rejoining process of a device.
   2496           *
   2497           * @param   none
   2498           *
   2499           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2500           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2501          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2502          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2503            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   2504            {
   2505              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   E4           CLR     A
   \   000012   90....       MOV     DPTR,#continueJoining
   \   000015   F0           MOVX    @DPTR,A
   2506              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   2507            }
   2508            else
   2509              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2510          }
   2511          
   2512          /*********************************************************************
   2513           * @fn      ZDApp_AnnounceNewAddress()
   2514           *
   2515           * @brief   Send Device Announce and hold all transmissions for 
   2516           *          new address timeout.
   2517           *
   2518           * @param   none
   2519           *
   2520           * @return  none
   2521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2522          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2523          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2524          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2525            // Turn off data request hold
   2526            APSME_HoldDataRequests( 0 );
   2527          #endif
   2528            
   2529            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2530                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000005                ; Setup parameters for call to function NLME_GetExtAddr
   \   000005   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000008   8A..         MOV     ?V0 + 0,R2
   \   00000A   8B..         MOV     ?V0 + 1,R3
   \   00000C   AE..         MOV     R6,?V0 + 0
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000011                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000011   75..00       MOV     ?V0 + 0,#0x0
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000019   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   EE           MOV     A,R6
   \   00001F   FC           MOV     R4,A
   \   000020   AD..         MOV     R5,?V0 + 1
   \   000022   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   000025   7401         MOV     A,#0x1
   \   000027   80..         SJMP    ??Subroutine32_0
   2531            
   2532          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2533            // Setup the timeout
   2534            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   2535          #endif  
   2536          }
   2537          
   2538          /*********************************************************************
   2539           * @fn          ZDApp_NVUpdate
   2540           *
   2541           * @brief       Set the NV Update Timer.
   2542           *
   2543           * @param       none
   2544           *
   2545           * @return      none
   2546           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2547          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2548          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2549          #if defined ( NV_RESTORE )
   2550            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   2551          #endif
   2552          }
   \   000000   02....       LJMP    ?BRET
   2553          
   2554          /*********************************************************************
   2555           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2556           *
   2557           * @brief   Returns a PAN ID for the network layer to use during
   2558           *          a coordinator start and there is another network with 
   2559           *          the intended PANID.
   2560           *
   2561           * @param   panid - the intended PAN ID
   2562           *
   2563           * @return  PANID to try
   2564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2565          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2566          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2567            return ( panid + 1 );
   \   000000   7401         MOV     A,#0x1
   \   000002   2A           ADD     A,R2
   \   000003   0A           INC     R2
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?BRET
   2568          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....0000     DW ZDAppTaskID, 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB
   2569          
   2570          /*********************************************************************
   2571          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AddrMgrWriteNVRequest              0      0      0
     ZDAppCheckForHoldKey               2      0      0
       -> HalKeyRead                    4      0      0
     ZDAppDetermineDeviceType           2      0     12
       -> nwk_ExtPANIDValid             4      0      0
     ZDApp_AnnounceNewAddress           0      0     23
       -> NLME_GetExtAddr               0      0     20
       -> NLME_GetShortAddr             0      0     20
       -> ZDP_DeviceAnnce               0      0     22
     ZDApp_ChangeMatchDescRespPermission
                                        2      0      0
       -> afSetMatch                    4      0      0
     ZDApp_CoordStartPANIDConflictCB
                                        0      0      0
     ZDApp_DeviceAuthEvt                2      0      9
       -> ZDApp_ResetTimerCancel        4      0      0
       -> osal_set_event                4      0      0
       -> NLME_StartRouterRequest       4      0      0
       -> ZDApp_SaveNwkKey              4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
       -> NLME_SetPollRate              4      0      0
     ZDApp_InMsgCB                      0      0     14
       -> ZDP_GenericRsp                0      0     28
     ZDApp_Init                         2      0      0
       -> NLME_GetExtAddr               4      0      0
       -> ZDAppCheckForHoldKey          4      0      0
       -> ZDO_Init                      4      0      0
       -> afRegister                    4      0      0
       -> ZDOInitDevice                 4      0      0
       -> HalLedBlink                   4      0      0
       -> ZDApp_RegisterCBs             4      0      0
     ZDApp_InitUserDesc                 0      0     31
       -> osal_memset                   0      0     54
       -> osal_nv_item_init             0      0     58
       -> osal_nv_read                  0      0     62
     ZDApp_LeaveCtrlBypass              2      0      0
     ZDApp_LeaveCtrlInit                0      0     26
       -> osal_nv_item_init             0      0     24
       -> osal_nv_read                  0      0     28
     ZDApp_LeaveCtrlSet                 0      0     14
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveCtrlStartup             1      0     26
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveReset                   2      0     16
       -> ZDApp_LeaveCtrlSet            4      0      0
       -> ZDApp_ResetTimerStart         4      0      0
     ZDApp_LeaveUpdate                  2      0     16
       -> NLME_RemoveChild              4      0      0
     ZDApp_NVUpdate                     0      0      0
     ZDApp_NetworkInit                  2      0     17
       -> osal_start_timerEx            4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NetworkStartEvt              2      0     10
       -> osal_pwrmgr_device            4      0      0
       -> osal_set_event                4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_SetEnergyThreshold       4      0      0
       -> osal_set_event                4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NodeProfileSync              0      0     27
       -> nwk_getNetworkDesc            0      0     20
       -> NLME_SetBroadcastFilter       0      0     20
     ZDApp_NwkStateUpdateCB             2      0      0
       -> osal_get_timeoutEx            4      0      0
     ZDApp_ProcessMsgCBs                0      0     71
       -> ZDO_ParseAddrRsp              0      0    108
       -> ZDO_UpdateAddrManager         0      0    108
       -> osal_mem_free                 0      0    108
       -> ZDO_ParseBindUnbindReq        0      0    108
       -> ZDO_ProcessBindUnbindReq      0      0    108
       -> ZDMatchSendState              0      0    108
       -> ZDO_ParseEndDeviceBindReq     0      0    108
       -> ZDO_MatchEndDeviceBind        0      0    108
       -> osal_mem_free                 0      0    108
       -> osal_mem_free                 0      0    108
     ZDApp_ProcessNetworkJoin           0      0     29
       -> osal_set_event                0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> NLME_StartRouterRequest       0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> ZMacSetReq                    0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> osal_set_event                0      0     24
       -> NLME_SetPollRate              0      0     24
       -> NLME_SetQueuedPollRate        0      0     24
       -> NLME_SetResponseRate          0      0     24
       -> NLME_StartRouterRequest       0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
     ZDApp_ProcessOSALMsg               1      0     28
       -> ZDP_IncomingData              0      0     34
       -> ZDApp_ProcessMsgCBs           0      0     34
       -> ZDApp_NodeProfileSync         0      0     34
       -> NLME_JoinRequest              0      0     36
       -> osal_rand                     0      0     34
       -> ZDApp_NetworkInit             0      0     34
       -> osal_rand                     0      0     34
       -> ZMacSetReq                    0      0     34
       -> ZMacSetReq                    0      0     34
       -> ZMacSetReq                    0      0     34
       -> NLME_ReJoinRequest            0      0     34
       -> osal_rand                     0      0     34
       -> ZDApp_NetworkInit             0      0     34
       -> NLME_SetPollRate              0      0     34
       -> NLME_SetQueuedPollRate        0      0     34
       -> NLME_SetResponseRate          0      0     34
       -> osal_rand                     0      0     34
       -> ZDApp_NetworkInit             0      0     34
       -> ZDApp_ProcessNetworkJoin      0      0     34
       -> sAddrExtCpy                   0      0     34
       -> ZDApp_NetworkInit             0      0     34
     ZDApp_ProcessSecEvent              0      0      9
       -> ZDSecMgrNewDeviceEvent        0      0     18
       -> osal_start_timerEx            0      0     18
       -> ZDApp_DeviceAuthEvt           0      0     18
       -> ZDApp_SaveNwkKey              0      0     18
     ZDApp_ProcessSecMsg                2      0      0
       -> ZDSecMgrTransportKeyInd       4      0      0
       -> ZDSecMgrUpdateDeviceInd       4      0      0
       -> ZDSecMgrSwitchKeyInd          4      0      0
     ZDApp_ReadNetworkRestoreState      0      0      9
       -> zgReadStartupOptions          0      0     18
     ZDApp_RegisterCBs                  2      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
     ZDApp_ResetNwkKey                  0      0     35
       -> osal_memset                   0      0     62
       -> osal_nv_write                 0      0     70
     ZDApp_ResetTimerCancel             2      0      0
       -> osal_stop_timerEx             4      0      0
     ZDApp_ResetTimerStart              2      0      0
       -> osal_start_timerEx            4      0      0
     ZDApp_RestoreNetworkState          0      0      9
       -> NLME_InitNV                   0      0     18
       -> NLME_RestoreFromNV            0      0     18
       -> NLME_GetShortAddr             0      0     18
       -> sAddrExtCpy                   0      0     18
     ZDApp_RestoreNwkKey                0      0     37
       -> osal_nv_read                  0      0     74
     ZDApp_SaveNetworkStateEvt          0      0      0
     ZDApp_SaveNwkKey                   0      0     46
       -> SSP_ReadNwkActiveKey          0      0     66
       -> osal_nv_write                 0      0     74
     ZDApp_SecInit                      2      0      0
       -> ZDSecMgrInit                  4      0      0
     ZDApp_SendEventMsg                 2      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDApp_SendMsg                      1      0     52
       -> osal_msg_allocate             0      0     34
       -> osal_memcpy                   0      0     40
       -> osal_msg_send                 0      0     34
     ZDApp_StartJoiningCycle            2      0      0
       -> ZDApp_NetworkInit             4      0      0
     ZDApp_StopJoiningCycle             2      0      0
     ZDApp_event_loop                   0      0     10
       -> ZDO_StartDevice               0      0     20
       -> ZDApp_ProcessOSALMsg          0      0     20
       -> osal_msg_deallocate           0      0     20
       -> osal_msg_receive              0      0     20
       -> ZDApp_NetworkStartEvt         0      0     20
       -> osal_pwrmgr_device            0      0     20
       -> osal_set_event                0      0     20
       -> ZDO_UpdateNwkStatus           0      0     20
     ZDOInitDevice                      0      0     12
       -> zgInitItems                   0      0     24
       -> ZDConfig_InitDescriptors      0      0     24
       -> ZDApp_LeaveCtrlInit           0      0     24
       -> ZDApp_LeaveCtrlStartup        0      0     24
       -> ZDAppDetermineDeviceType      0      0     24
       -> osal_rand                     0      0     24
       -> ZDSecMgrInit                  0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> NLME_SetBroadcastFilter       0      0     24
     ZDO_AddrChangeIndicationCB         2      0      0
       -> osal_set_event                4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
     ZDO_ConcentratorIndicationCB       0      0      0
     ZDO_JoinConfirmCB                  2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDO_JoinIndicationCB               0      0      1
     ZDO_LeaveCnf                       0      0     10
       -> NLME_GetExtAddr               0      0     20
       -> sAddrExtCmp                   0      0     20
       -> ZDApp_LeaveReset              0      0     20
       -> ZDApp_LeaveUpdate             0      0     20
     ZDO_LeaveInd                       1      0     16
       -> NLME_LeaveRsp                 0      0     32
       -> ZDApp_LeaveReset              0      0     32
       -> NLME_GetCoordShortAddr        0      0     32
       -> ZDApp_LeaveUpdate             0      0     32
     ZDO_ManytoOneFailureIndicationCB
                                        2      0      0
       -> NLME_RouteDiscoveryRequest
                                        4      0      0
       -> NLME_RouteDiscoveryRequest
                                        4      0      0
     ZDO_NetworkDiscoveryConfirmCB      1      0     32
       -> nwk_ExtPANIDValid             0      0     64
       -> sAddrExtCmp                   0      0     64
       -> sAddrExtCpy                   0      0     64
       -> ZDApp_SendMsg                 0      0     64
     ZDO_NetworkFormationConfirmCB      2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_set_event                4      0      0
     ZDO_PollConfirmCB                  0      0      0
     ZDO_StartRouterConfirmCB           2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_set_event                4      0      0
     ZDO_SyncIndicationCB               2      0      0
       -> nwkNeighborInitTable          4      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDO_UpdateDeviceIndication         0      0      0


   Segment part sizes:

     Function/Label                              Bytes
     --------------                              -----
     _A_IEN0                                        1
     WDCTL                                          1
     zdoDiscCounter                                 1
     ZDAppNwkAddr                                   9
     zdappMgmtNwkDiscRspTransSeq                    1
     zdappMgmtNwkDiscReqInProgress                  1
     zdappMgmtNwkDiscRspAddr                        9
     zdappMgmtNwkDiscStartIndex                     1
     zdappMgmtSavedNwkState                         1
     nwkFrameCounterChanges                         2
     continueJoining                                1
     _tmpRejoinState                                1
     ZDO_UseExtendedPANID                           8
     ZDAppTaskID                                    1
     nwkStatus                                      1
     ZDApp_AutoFindMode_epDesc                      2
     ZDApp_LeaveCtrl                                1
     devState                                       1
     devStartMode                                   1
     retryCnt                                       1
     ZDApp_epDesc                                   6
     ZDApp_SavedPollRate                            2
     ZDApp_Init                                    75
     ??Subroutine29_0                               7
     ZDApp_SecInit                                 10
     ZDApp_event_loop                             214
     ?Subroutine23                                 11
     ?Subroutine3                                   5
     ??Subroutine33_0                               5
     ZDApp_ProcessSecEvent                        118
     ?Subroutine21                                  5
     ?Subroutine8                                  11
     ZDOInitDevice                                137
     ?Subroutine20                                  2
     ??Subroutine32_0                               3
     ZDApp_ReadNetworkRestoreState                 21
     ZDAppDetermineDeviceType                      74
     ZDApp_NetworkStartEvt                         78
     ?Subroutine18                                  3
     ZDApp_DeviceAuthEvt                           68
     ?Subroutine6                                   9
     ?Subroutine0                                   8
     ??Subroutine31_0                               6
     ZDApp_SaveNetworkStateEvt                      3
     ZDApp_RestoreNetworkState                     69
     ?Subroutine1                                  13
     ZDApp_InitUserDesc                            93
     ?Subroutine12                                 32
     ZDAppCheckForHoldKey                          20
     ZDApp_ProcessOSALMsg                         432
     ?Subroutine22                                  8
     ?Subroutine11                                 22
     ?Subroutine10                                 20
     ?Subroutine13                                 11
     ZDApp_ProcessMsgCBs                          257
     ?Subroutine15                                  3
     ??Subroutine30_0                               9
     ?Subroutine14                                 12
     ZDApp_RegisterCBs                             48
     ?Subroutine4                                   2
     ??Subroutine27_0                               9
     ZDApp_ProcessSecMsg                           73
     ZDApp_ProcessNetworkJoin                     391
     ?Subroutine9                                  12
     ZDApp_SaveNwkKey                              82
     ?Subroutine24                                 10
     ?Subroutine17                                  6
     ??Subroutine28_0                               8
     ZDApp_ResetNwkKey                             40
     ZDApp_RestoreNwkKey                          110
     ZDApp_ResetTimerStart                         16
     ZDApp_ResetTimerCancel                        19
     ZDApp_LeaveCtrlInit                           65
     ?Subroutine2                                  14
     ZDApp_LeaveCtrlSet                            51
     ZDApp_LeaveCtrlBypass                         16
     ZDApp_LeaveCtrlStartup                        75
     ZDApp_LeaveReset                              16
     ZDApp_LeaveUpdate                             24
     ZDApp_SendEventMsg                             8
     ?Subroutine26                                  6
     ?Subroutine7                                   9
     ZDApp_SendMsg                                123
     ?Subroutine25                                  8
     ZDO_NetworkDiscoveryConfirmCB                410
     ZDO_NetworkFormationConfirmCB                 33
     ?Subroutine16                                 19
     ZDO_StartRouterConfirmCB                      33
     ZDO_JoinConfirmCB                             39
     ZDO_AddrChangeIndicationCB                    13
     ZDO_JoinIndicationCB                           0
     ?Subroutine19                                  5
     ZDO_ConcentratorIndicationCB                   3
     ZDO_LeaveCnf                                  82
     ?Subroutine5                                   4
     ZDO_LeaveInd                                 168
     ZDO_SyncIndicationCB                          49
     ZDO_ManytoOneFailureIndicationCB
                                                   35
     ZDO_PollConfirmCB                              3
     AddrMgrWriteNVRequest                          3
     ZDO_UpdateDeviceIndication                     3
     ZDApp_InMsgCB                                 99
     ZDApp_ChangeMatchDescRespPermission
                                                   10
     ZDApp_NetworkInit                             29
     ZDApp_NwkStateUpdateCB                        19
     ZDApp_NodeProfileSync                        103
     ZDApp_StartJoiningCycle                       39
     ZDApp_StopJoiningCycle                        31
     ZDApp_AnnounceNewAddress                      41
     ZDApp_NVUpdate                                 3
     ZDApp_CoordStartPANIDConflictCB
                                                   10
     ?<Initializer for zdoDiscCounter>              1
     ?<Initializer for continueJoining>             1
     ?<Initializer for ZDApp_epDesc>                6
     ?<Initializer for ZDApp_SavedPollRate>         2
     __Constant_1                                   4
     __Constant_0                                   4
     __Constant_3e8                                 4
     ??ZDApp_Init?relay                             6
     ??ZDApp_SecInit?relay                          6
     ??ZDApp_event_loop?relay                       6
     ??ZDApp_ProcessSecEvent?relay                  6
     ??ZDOInitDevice?relay                          6
     ??ZDApp_ReadNetworkRestoreState?relay          6
     ??ZDAppDetermineDeviceType?relay               6
     ??ZDApp_NetworkStartEvt?relay                  6
     ??ZDApp_DeviceAuthEvt?relay                    6
     ??ZDApp_SaveNetworkStateEvt?relay              6
     ??ZDApp_RestoreNetworkState?relay              6
     ??ZDApp_InitUserDesc?relay                     6
     ??ZDAppCheckForHoldKey?relay                   6
     ??ZDApp_ProcessOSALMsg?relay                   6
     ??ZDApp_ProcessMsgCBs?relay                    6
     ??ZDApp_RegisterCBs?relay                      6
     ??ZDApp_ProcessSecMsg?relay                    6
     ??ZDApp_ProcessNetworkJoin?relay               6
     ??ZDApp_SaveNwkKey?relay                       6
     ??ZDApp_ResetNwkKey?relay                      6
     ??ZDApp_RestoreNwkKey?relay                    6
     ??ZDApp_ResetTimerStart?relay                  6
     ??ZDApp_ResetTimerCancel?relay                 6
     ??ZDApp_LeaveCtrlInit?relay                    6
     ??ZDApp_LeaveCtrlSet?relay                     6
     ??ZDApp_LeaveCtrlBypass?relay                  6
     ??ZDApp_LeaveCtrlStartup?relay                 6
     ??ZDApp_LeaveReset?relay                       6
     ??ZDApp_LeaveUpdate?relay                      6
     ??ZDApp_SendEventMsg?relay                     6
     ??ZDApp_SendMsg?relay                          6
     ??ZDO_NetworkDiscoveryConfirmCB?relay          6
     ??ZDO_NetworkFormationConfirmCB?relay          6
     ??ZDO_StartRouterConfirmCB?relay               6
     ??ZDO_JoinConfirmCB?relay                      6
     ??ZDO_AddrChangeIndicationCB?relay             6
     ??ZDO_JoinIndicationCB?relay                   6
     ??ZDO_ConcentratorIndicationCB?relay           6
     ??ZDO_LeaveCnf?relay                           6
     ??ZDO_LeaveInd?relay                           6
     ??ZDO_SyncIndicationCB?relay                   6
     ??ZDO_ManytoOneFailureIndicationCB?relay       6
     ??ZDO_PollConfirmCB?relay                      6
     ??AddrMgrWriteNVRequest?relay                  6
     ??ZDO_UpdateDeviceIndication?relay             6
     ??ZDApp_InMsgCB?relay                          6
     ??ZDApp_ChangeMatchDescRespPermission?relay    6
     ??ZDApp_NetworkInit?relay                      6
     ??ZDApp_NwkStateUpdateCB?relay                 6
     ??ZDApp_NodeProfileSync?relay                  6
     ??ZDApp_StartJoiningCycle?relay                6
     ??ZDApp_StopJoiningCycle?relay                 6
     ??ZDApp_AnnounceNewAddress?relay               6
     ??ZDApp_NVUpdate?relay                         6
     ??ZDApp_CoordStartPANIDConflictCB?relay        6

 
 4 401 bytes in segment BANKED_CODE
   330 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    10 bytes in segment XDATA_I
    10 bytes in segment XDATA_ID
    12 bytes in segment XDATA_ROM_C
    41 bytes in segment XDATA_Z
 
 4 741 bytes of CODE  memory
     0 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  2 bytes shared)
    51 bytes of XDATA memory

Errors: none
Warnings: none
