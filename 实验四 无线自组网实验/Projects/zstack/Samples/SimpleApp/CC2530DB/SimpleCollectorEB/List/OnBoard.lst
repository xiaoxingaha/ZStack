###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                01/Dec/2011  14:21:30 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\ZMain\TI2530DB\OnBo #
#                          ard.c                                              #
#    Command line       =  -f F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg    #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\ZMain\TI2530DB\OnBo #
#                          ard.c -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D   #
#                          REFLECTOR -D NV_INIT -D xNV_RESTORE -D ZTOOL_P1    #
#                          -D MT_TASK -D MT_SYS_FUNC -D xMT_SAPI_FUNC -D      #
#                          xMT_SAPI_CB_FUNC -lC F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹ #
#                          âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-C #
#                          C2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstac #
#                          k\Samples\SimpleApp\CC2530DB\SimpleCollectorEB\Lis #
#                          t\ -lA F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\SimpleCollectorEB\List\             #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\Obj\ -e                  #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼ #
#                          þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack #
#                          -CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zst #
#                          ack\Samples\SimpleApp\CC2530DB\ -I                 #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\SOURCE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ #
#                          ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack- #
#                          CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zsta #
#                          ck\Samples\SimpleApp\CC2530DB\..\..\..\ZMAIN\TI253 #
#                          0DB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC253 #
#                          0EB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC #
#                          2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3. #
#                          0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\ #
#                          SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ #
#                          INCLUDE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__C #
#                          C2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3 #
#                          .0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples #
#                          \SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC #
#                          K\AF\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N #
#                          WK\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC #
#                          \ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³Ì #
#                          Ðò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4. #
#                          0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simple #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ #
#                           -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ #
#                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0 #
#                          _Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\   #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\    #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\  #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDAT #
#                          A\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD #
#                          E\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L #
#                          EVEL\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW #
#                          _LEVEL\srf04\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\ #
#                          10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC253 #
#                          0-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Sa #
#                          mples\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS #
#                          \MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\" -I "C:\Program       #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\List\OnBoard.lst         #
#    Object file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\Obj\OnBoard.r51          #
#                                                                             #
#                                                                             #
###############################################################################

F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\ZMain\TI2530DB\OnBoard.c
      1          /**************************************************************************************************
      2            Filename:       OnBoard.c
      3            Revised:        $Date: 2009-03-12 16:26:27 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19405 $
      5          
      6            Description:    This file contains the UI and control for the
      7                            peripherals on the EVAL development board
      8            Notes:          This file targets the Chipcon CC2530
      9          
     10          
     11            Copyright 2005-2008 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     48          #include "OSAL.h"
     49          #include "MT.h"
     50          #include "MT_SYS.h"
     51          #include "DebugTrace.h"
     52          
     53          /* Hal */
     54          #include "hal_lcd.h"
     55          #include "hal_mcu.h"
     56          #include "hal_timer.h"
     57          #include "hal_key.h"
     58          #include "hal_led.h"
     59          
     60          /*********************************************************************
     61           * MACROS
     62           */
     63          
     64          /*********************************************************************
     65           * CONSTANTS
     66           */
     67          
     68          // Task ID not initialized
     69          #define NO_TASK_ID 0xFF
     70          
     71          // Minimum length RAM "pattern" for Stack check
     72          #define MIN_RAM_INIT 12
     73          
     74          /*********************************************************************
     75           * TYPEDEFS
     76           */
     77          
     78          /*********************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          uint8 OnboardKeyIntEnable;
   \                     OnboardKeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     83          
     84          // 64-bit Extended Address of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
     86          
     87          /*********************************************************************
     88           * EXTERNAL VARIABLES
     89           */
     90          
     91          /*********************************************************************
     92           * EXTERNAL FUNCTIONS
     93           */
     94          
     95          extern uint8 macMcuRandomByte(void);
     96          
     97          /*********************************************************************
     98           * LOCAL VARIABLES
     99           */
    100          
    101          // Registered keys task ID, initialized to NOT USED.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static byte registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for registeredKeysTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    103          
    104          /*********************************************************************
    105           * LOCAL FUNCTIONS
    106           */
    107          
    108          static void ChkReset( void );
    109          
    110          /*********************************************************************
    111           * @fn      InitBoard()
    112           * @brief   Initialize the CC2420DB Board Peripherals
    113           * @param   level: COLD,WARM,READY
    114           * @return  None
    115           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void InitBoard( byte level )
   \                     InitBoard:
    117          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    118            if ( level == OB_COLD )
   \   000005   E9           MOV     A,R1
   \   000006   7053         JNZ     ??InitBoard_0
    119            {
    120              // Interrupts off
    121              osal_int_disable( INTS_ALL );
   \   000008                ; Setup parameters for call to function osal_int_disable
   \   000008   79FF         MOV     R1,#-0x1
   \   00000A   12....       LCALL   ??osal_int_disable?relay
    122              // Turn all LEDs off
    123              HalLedSet( HAL_LED_ALL, HAL_LED_MODE_OFF );
   \   00000D                ; Setup parameters for call to function HalLedSet
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   790F         MOV     R1,#0xf
   \   000011   12....       LCALL   ??HalLedSet?relay
    124              // Check for Brown-Out reset
    125              ChkReset();
   \   000014   7418         MOV     A,#0x18
   \   000016   559D         ANL     A,0x9d
   \   000018   FA           MOV     R2,A
   \   000019   6050         JZ      ??InitBoard_1
   \   00001B   7408         MOV     A,#0x8
   \   00001D   6A           XRL     A,R2
   \   00001E   604B         JZ      ??InitBoard_1
   \   000020   7410         MOV     A,#0x10
   \   000022   6A           XRL     A,R2
   \   000023   6046         JZ      ??InitBoard_1
   \   000025   C2AF         CLR     0xa8.7
   \                     ??InitBoard_2:
   \   000027   7E08         MOV     R6,#0x8
   \                     ??InitBoard_3:
   \   000029                ; Setup parameters for call to function HalLedSet
   \   000029   7A01         MOV     R2,#0x1
   \   00002B   EE           MOV     A,R6
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??HalLedSet?relay
   \   000030                ; Setup parameters for call to function Onboard_wait
   \   000030   7A24         MOV     R2,#0x24
   \   000032   7BF4         MOV     R3,#-0xc
   \   000034   12....       LCALL   ??Onboard_wait?relay
   \   000037                ; Setup parameters for call to function Onboard_wait
   \   000037   7A24         MOV     R2,#0x24
   \   000039   7BF4         MOV     R3,#-0xc
   \   00003B   12....       LCALL   ??Onboard_wait?relay
   \   00003E                ; Setup parameters for call to function HalLedSet
   \   00003E   7A00         MOV     R2,#0x0
   \   000040   EE           MOV     A,R6
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??HalLedSet?relay
   \   000045                ; Setup parameters for call to function Onboard_wait
   \   000045   7A7C         MOV     R2,#0x7c
   \   000047   7B92         MOV     R3,#-0x6e
   \   000049   12....       LCALL   ??Onboard_wait?relay
   \   00004C                ; Setup parameters for call to function Onboard_wait
   \   00004C   7A7C         MOV     R2,#0x7c
   \   00004E   7B92         MOV     R3,#-0x6e
   \   000050   12....       LCALL   ??Onboard_wait?relay
   \   000053   EE           MOV     A,R6
   \   000054   C3           CLR     C
   \   000055   13           RRC     A
   \   000056   FE           MOV     R6,A
   \   000057   70D0         JNZ     ??InitBoard_3
   \   000059   80CC         SJMP    ??InitBoard_2
    126            }
    127            else  // !OB_COLD
    128            {
    129          #ifdef ZTOOL_PORT
    130              MT_SysResetInd();
   \                     ??InitBoard_0:
   \   00005B                ; Setup parameters for call to function MT_SysResetInd
   \   00005B   12....       LCALL   ??MT_SysResetInd?relay
    131          #endif
    132          
    133               /* Initialize Key stuff */
    134              OnboardKeyIntEnable = HAL_KEY_INTERRUPT_DISABLE;
   \   00005E   E4           CLR     A
   \   00005F   90....       MOV     DPTR,#OnboardKeyIntEnable
   \   000062   F0           MOVX    @DPTR,A
    135              HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
   \   000063                ; Setup parameters for call to function HalKeyConfig
   \   000063   7A..         MOV     R2,#(??OnBoard_KeyCallback?relay & 0xff)
   \   000065   7B..         MOV     R3,#((??OnBoard_KeyCallback?relay >> 8) & 0xff)
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   ??HalKeyConfig?relay
    136            }
    137          }
   \                     ??InitBoard_1:
   \   00006B                REQUIRE ?Subroutine0
   \   00006B                REQUIRE SLEEPSTA
   \   00006B                REQUIRE _A_IEN0
   \   00006B                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    138          
    139          /*********************************************************************
    140           * @fn      ChkReset()
    141           * @brief   Check reset bits - if reset cause is unknown, assume a
    142           *          brown-out (low power), assume batteries are not reliable,
    143           *          hang in a loop and sequence through the LEDs.
    144           * @param   None
    145           * @return  None
    146           *********************************************************************/
    147          void ChkReset( void )
    148          {
    149            uint8 led;
    150            uint8 rib;
    151          
    152            // Isolate reset indicator bits
    153            rib = SLEEPSTA & LRESET;
    154          
    155            if ( rib == RESETPO )
    156            {
    157              // Put code here to handle Power-On reset
    158            }
    159            else if ( rib == RESETEX )
    160            {
    161              // Put code here to handle External reset
    162            }
    163            else if ( rib == RESETWD )
    164            {
    165              // Put code here to handle WatchDog reset
    166            }
    167            else
    168            {
    169              // Unknown, hang and blink
    170              HAL_DISABLE_INTERRUPTS();
    171              led = HAL_LED_4;
    172              while ( 1 ) {
    173                HalLedSet( led, HAL_LED_MODE_ON );
    174                MicroWait( 62500 );
    175                MicroWait( 62500 );
    176                HalLedSet( led, HAL_LED_MODE_OFF );
    177                MicroWait( 37500 );
    178                MicroWait( 37500 );
    179                if ( !(led >>= 1) )
    180                  led = HAL_LED_4;
    181              }
    182            }
    183          }
    184          
    185          /*********************************************************************
    186           *                        "Keyboard" Support
    187           *********************************************************************/
    188          
    189          /*********************************************************************
    190           * Keyboard Register function
    191           *
    192           * The keyboard handler is setup to send all keyboard changes to
    193           * one task (if a task is registered).
    194           *
    195           * If a task registers, it will get all the keys. You can change this
    196           * to register for individual keys.
    197           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          byte RegisterForKeys( byte task_id )
   \                     RegisterForKeys:
    199          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    200            // Allow only the first task
    201            if ( registeredKeysTaskID == NO_TASK_ID )
   \   000004   90....       MOV     DPTR,#registeredKeysTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64FF         XRL     A,#0xff
   \   00000A   7006         JNZ     ??RegisterForKeys_0
    202            {
    203              registeredKeysTaskID = task_id;
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
    204              return ( true );
   \   00000E   7901         MOV     R1,#0x1
   \   000010   8002         SJMP    ??RegisterForKeys_1
    205            }
    206            else
    207              return ( false );
   \                     ??RegisterForKeys_0:
   \   000012   7900         MOV     R1,#0x0
   \                     ??RegisterForKeys_1:
   \   000014                REQUIRE ?Subroutine1
   \   000014                ; // Fall through to label ?Subroutine1
    208          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    209          
    210          /*********************************************************************
    211           * @fn      OnBoard_SendKeys
    212           *
    213           * @brief   Send "Key Pressed" message to application.
    214           *
    215           * @param   keys  - keys that were pressed
    216           *          state - shifted
    217           *
    218           * @return  status
    219           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    220          byte OnBoard_SendKeys( byte keys, byte state )
   \                     OnBoard_SendKeys:
    221          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    222            keyChange_t *msgPtr;
    223          
    224            if ( registeredKeysTaskID != NO_TASK_ID )
   \   000009   90....       MOV     DPTR,#registeredKeysTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   602D         JZ      ??OnBoard_SendKeys_0
    225            {
    226              // Send the address to the task
    227              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   7A04         MOV     R2,#0x4
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   ??osal_msg_allocate?relay
    228              if ( msgPtr )
   \   000018   EA           MOV     A,R2
   \   000019   7001         JNZ     ??OnBoard_SendKeys_1
   \   00001B   EB           MOV     A,R3
   \                     ??OnBoard_SendKeys_1:
   \   00001C   601C         JZ      ??OnBoard_SendKeys_2
    229              {
    230                msgPtr->hdr.event = KEY_CHANGE;
   \   00001E   74C0         MOV     A,#-0x40
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   F0           MOVX    @DPTR,A
    231                msgPtr->state = state;
   \   000025   EF           MOV     A,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
    232                msgPtr->keys = keys;
   \   000029   EE           MOV     A,R6
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   F0           MOVX    @DPTR,A
    233          
    234                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
   \   000032                ; Setup parameters for call to function osal_msg_send
   \   000032   90....       MOV     DPTR,#registeredKeysTaskID
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   12....       LCALL   ??osal_msg_send?relay
    235              }
    236              return ( ZSuccess );
   \                     ??OnBoard_SendKeys_2:
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   8002         SJMP    ??OnBoard_SendKeys_3
    237            }
    238            else
    239              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0:
   \   00003E   7901         MOV     R1,#0x1
   \                     ??OnBoard_SendKeys_3:
   \   000040   7F02         MOV     R7,#0x2
   \   000042   02....       LJMP    ?BANKED_LEAVE_XDATA
    240          }
    241          
    242          /*********************************************************************
    243           * @fn      OnBoard_KeyCallback
    244           *
    245           * @brief   Callback service for keys
    246           *
    247           * @param   keys  - keys that were pressed
    248           *          state - shifted
    249           *
    250           * @return  void
    251           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
   \                     OnBoard_KeyCallback:
    253          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    254            uint8 shift;
    255            
    256            (void)state;  // Intentionally unreferenced parameter
    257          
    258            // shift key (S1) is used to generate key interrupt
    259            // applications should not use S1 when key interrupt is enabled
    260            shift = (OnboardKeyIntEnable == HAL_KEY_INTERRUPT_ENABLE) ? false : ((keys & HAL_KEY_SW_6) ? true : false);
   \   000004   90....       MOV     DPTR,#OnboardKeyIntEnable
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7004         JNZ     ??OnBoard_KeyCallback_0
   \   00000C   7A00         MOV     R2,#0x0
   \   00000E   8011         SJMP    ??OnBoard_KeyCallback_1
   \                     ??OnBoard_KeyCallback_0:
   \   000010   E9           MOV     A,R1
   \   000011   A2E5         MOV     C,0xE0 /* A   */.5
   \   000013   5004         JNC     ??OnBoard_KeyCallback_2
   \   000015   D2F0         SETB    B.0
   \   000017   8002         SJMP    ??OnBoard_KeyCallback_3
   \                     ??OnBoard_KeyCallback_2:
   \   000019   C2F0         CLR     B.0
   \                     ??OnBoard_KeyCallback_3:
   \   00001B   A2F0         MOV     C,B.0
   \   00001D   E4           CLR     A
   \   00001E   92E0         MOV     0xE0 /* A   */.0,C
   \   000020   FA           MOV     R2,A
    261          
    262            if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
   \                     ??OnBoard_KeyCallback_1:
   \   000021                ; Setup parameters for call to function OnBoard_SendKeys
   \   000021   12....       LCALL   ??OnBoard_SendKeys?relay
    263            {
    264              // Process SW1 here
    265              if ( keys & HAL_KEY_SW_1 )  // Switch 1
    266              {
    267              }
    268              // Process SW2 here
    269              if ( keys & HAL_KEY_SW_2 )  // Switch 2
    270              {
    271              }
    272              // Process SW3 here
    273              if ( keys & HAL_KEY_SW_3 )  // Switch 3
    274              {
    275              }
    276              // Process SW4 here
    277              if ( keys & HAL_KEY_SW_4 )  // Switch 4
    278              {
    279              }
    280              // Process SW5 here
    281              if ( keys & HAL_KEY_SW_5 )  // Switch 5
    282              {
    283              }
    284              // Process SW6 here
    285              if ( keys & HAL_KEY_SW_6 )  // Switch 6
    286              {
    287              }
    288            }
    289          }
   \   000024   80..         SJMP    ?Subroutine1
    290          
    291          /*********************************************************************
    292           *                    SLEEP MANAGEMENT FUNCTIONS
    293           *
    294           * These functions support processing of MAC and ZStack power mode
    295           * transitions, used when the system goes into or awakes from sleep.
    296           */
    297          
    298           /*********************************************************************
    299           * @fn      OnBoard_stack_used()
    300           *
    301           * @brief
    302           *
    303           *   Runs through the stack looking for touched memory.
    304           *
    305           * @param   none
    306           *
    307           * @return  number of bytes used by the stack
    308           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          uint16 OnBoard_stack_used( void )
   \                     OnBoard_stack_used:
    310          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    311            byte *pStack = (byte*)MCU_RAM_END;
   \   000004   78FF         MOV     R0,#-0x1
   \   000006   79FF         MOV     R1,#-0x1
    312            byte *pHold;
    313            byte found = false;
   \   000008   800E         SJMP    ??OnBoard_stack_used_0
    314            byte x;
    315          
    316            // Look from the end of RAM for MIN_RAM_INIT number of "pattern" bytes
    317            // This should be the high water stack mark.
    318            while ( !found && pStack )
    319            {
    320              // Found an init value?
    321              if ( *pStack == STACK_INIT_VALUE )
    322              {
    323                // Look for a bunch in a row
    324                pHold = pStack;
    325                for ( x = 0; x < MIN_RAM_INIT; x++ )
    326                {
    327                  if ( *pHold != STACK_INIT_VALUE )
    328                    break;
    329                  else
    330                    pHold--;
    331                }
    332                // Did we find the needed minimum number in a row
    333                if ( x >= MIN_RAM_INIT )
    334                  found = true;
    335              }
    336              if ( !found )
    337                pStack--;
   \                     ??OnBoard_stack_used_1:
   \   00000A   E8           MOV     A,R0
   \   00000B   24FF         ADD     A,#-0x1
   \   00000D   18           DEC     R0
   \   00000E   E9           MOV     A,R1
   \   00000F   34FF         ADDC    A,#-0x1
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??OnBoard_stack_used_2
   \   000015   E9           MOV     A,R1
   \                     ??OnBoard_stack_used_2:
   \   000016   6034         JZ      ??OnBoard_stack_used_3
   \                     ??OnBoard_stack_used_0:
   \   000018   8882         MOV     DPL,R0
   \   00001A   8983         MOV     DPH,R1
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   64CD         XRL     A,#0xcd
   \   00001F   70E9         JNZ     ??OnBoard_stack_used_1
   \   000021   7A00         MOV     R2,#0x0
   \                     ??OnBoard_stack_used_4:
   \   000023   E0           MOVX    A,@DPTR
   \   000024   64CD         XRL     A,#0xcd
   \   000026   7013         JNZ     ??OnBoard_stack_used_5
   \   000028   E582         MOV     A,DPL
   \   00002A   24FF         ADD     A,#-0x1
   \   00002C   F582         MOV     DPL,A
   \   00002E   E583         MOV     A,DPH
   \   000030   34FF         ADDC    A,#-0x1
   \   000032   F583         MOV     DPH,A
   \   000034   0A           INC     R2
   \   000035   EA           MOV     A,R2
   \   000036   C3           CLR     C
   \   000037   940C         SUBB    A,#0xc
   \   000039   40E8         JC      ??OnBoard_stack_used_4
   \                     ??OnBoard_stack_used_5:
   \   00003B   EA           MOV     A,R2
   \   00003C   C3           CLR     C
   \   00003D   940C         SUBB    A,#0xc
   \   00003F   40C9         JC      ??OnBoard_stack_used_1
    338            }
    339          
    340            if ( pStack )
    341              return ( (uint16)((byte*)MCU_RAM_END - pStack) );
   \   000041   74FF         MOV     A,#-0x1
   \   000043   C3           CLR     C
   \   000044   98           SUBB    A,R0
   \   000045   FA           MOV     R2,A
   \   000046   74FF         MOV     A,#-0x1
   \   000048   99           SUBB    A,R1
   \   000049   FB           MOV     R3,A
   \   00004A   8004         SJMP    ??OnBoard_stack_used_6
    342            else
    343              return ( 0 );
   \                     ??OnBoard_stack_used_3:
   \   00004C   7A00         MOV     R2,#0x0
   \   00004E   7B00         MOV     R3,#0x0
   \                     ??OnBoard_stack_used_6:
   \   000050   02....       LJMP    ?Subroutine1 & 0xFFFF
    344          }
    345          
    346          /*********************************************************************
    347           * @fn      _itoa
    348           *
    349           * @brief   convert a 16bit number to ASCII
    350           *
    351           * @param   num -
    352           *          buf -
    353           *          radix -
    354           *
    355           * @return  void
    356           *
    357           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          void _itoa(uint16 num, byte *buf, byte radix)
   \                     _itoa:
    359          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
    360            char c,i;
    361            byte *p, rst[5];
    362          
    363            p = rst;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   AC82         MOV     R4,DPL
   \   00001A   AD83         MOV     R5,DPH
    364            for ( i=0; i<5; i++,p++ )
   \   00001C   75..00       MOV     ?V0 + 6,#0x0
   \   00001F   8982         MOV     DPL,R1
   \   000021   8582..       MOV     ?V0 + 4,DPL
    365            {
    366              c = num % radix;  // Isolate a digit
   \                     ??_itoa_0:
   \   000024   EE           MOV     A,R6
   \   000025   F8           MOV     R0,A
   \   000026   EF           MOV     A,R7
   \   000027   F9           MOV     R1,A
   \   000028   AA..         MOV     R2,?V0 + 4
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ?US_DIV_MOD
   \   00002F   EA           MOV     A,R2
    367              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   000030   940A         SUBB    A,#0xa
   \   000032   5004         JNC     ??_itoa_1
   \   000034   7830         MOV     R0,#0x30
   \   000036   8002         SJMP    ??_itoa_2
   \                     ??_itoa_1:
   \   000038   7837         MOV     R0,#0x37
   \                     ??_itoa_2:
   \   00003A   E8           MOV     A,R0
   \   00003B   2A           ADD     A,R2
   \   00003C   8C82         MOV     DPL,R4
   \   00003E   8D83         MOV     DPH,R5
   \   000040   F0           MOVX    @DPTR,A
    368              num /= radix;
   \   000041   EE           MOV     A,R6
   \   000042   F8           MOV     R0,A
   \   000043   EF           MOV     A,R7
   \   000044   F9           MOV     R1,A
   \   000045   AA..         MOV     R2,?V0 + 4
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ?US_DIV_MOD
   \   00004C   88..         MOV     ?V0 + 2,R0
   \   00004E   89..         MOV     ?V0 + 3,R1
   \   000050   AE..         MOV     R6,?V0 + 2
   \   000052   AF..         MOV     R7,?V0 + 3
    369              if ( !num )
   \   000054   EE           MOV     A,R6
   \   000055   7001         JNZ     ??_itoa_3
   \   000057   EF           MOV     A,R7
   \                     ??_itoa_3:
   \   000058   600D         JZ      ??_itoa_4
    370                break;
    371            }
   \   00005A   05..         INC     ?V0 + 6
   \   00005C   A3           INC     DPTR
   \   00005D   AC82         MOV     R4,DPL
   \   00005F   AD83         MOV     R5,DPH
   \   000061   E5..         MOV     A,?V0 + 6
   \   000063   9405         SUBB    A,#0x5
   \   000065   40BD         JC      ??_itoa_0
    372          
    373            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_4:
   \   000067   7A00         MOV     R2,#0x0
    374              *buf++ = *p--;  // Reverse character order
   \                     ??_itoa_5:
   \   000069   8C82         MOV     DPL,R4
   \   00006B   8D83         MOV     DPH,R5
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   85..82       MOV     DPL,?V0 + 0
   \   000071   85..83       MOV     DPH,?V0 + 1
   \   000074   F0           MOVX    @DPTR,A
   \   000075   EC           MOV     A,R4
   \   000076   24FF         ADD     A,#-0x1
   \   000078   1C           DEC     R4
   \   000079   ED           MOV     A,R5
   \   00007A   34FF         ADDC    A,#-0x1
   \   00007C   FD           MOV     R5,A
   \   00007D   A3           INC     DPTR
   \   00007E   8582..       MOV     ?V0 + 0,DPL
   \   000081   8583..       MOV     ?V0 + 1,DPH
   \   000084   0A           INC     R2
   \   000085   E5..         MOV     A,?V0 + 6
   \   000087   C3           CLR     C
   \   000088   9A           SUBB    A,R2
   \   000089   50DE         JNC     ??_itoa_5
    375          
    376            *buf = '\0';
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
    377          }
   \   00008D   7405         MOV     A,#0x5
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   7F07         MOV     R7,#0x7
   \   000094   02....       LJMP    ?BANKED_LEAVE_XDATA
    378          
    379          /*********************************************************************
    380           * @fn        Onboard_rand
    381           *
    382           * @brief    Random number generator
    383           *
    384           * @param   none
    385           *
    386           * @return  uint16 - new random number
    387           *
    388           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          uint16 Onboard_rand( void )
   \                     Onboard_rand:
    390          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    391            uint16 randNum;
    392          
    393            randNum = macMcuRandomByte();
   \   000005                ; Setup parameters for call to function macMcuRandomByte
   \   000005   12....       LCALL   ??macMcuRandomByte?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    394            randNum += (macMcuRandomByte() << 8);
   \   00000A                ; Setup parameters for call to function macMcuRandomByte
   \   00000A   12....       LCALL   ??macMcuRandomByte?relay
   \   00000D   EE           MOV     A,R6
   \   00000E   2400         ADD     A,#0x0
   \   000010   E4           CLR     A
   \   000011   39           ADDC    A,R1
   \   000012   FF           MOV     R7,A
    395            return ( randNum );
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   02....       LJMP    ?Subroutine0 & 0xFFFF
    396          }
    397          
    398          /*********************************************************************
    399           * @fn        Onboard_wait
    400           *
    401           * @brief    Random number generator
    402           *
    403           * @param   uint16 - time to wait
    404           *
    405           * @return  none
    406           *
    407           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    408          void Onboard_wait( uint16 timeout )
   \                     Onboard_wait:
    409          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP    ??Onboard_wait_0
    410            while (timeout--)
    411            {
    412              asm("NOP");
   \                     ??Onboard_wait_1:
   \   000002   00           NOP
    413              asm("NOP");
   \   000003   00           NOP
    414              asm("NOP");
   \   000004   00           NOP
    415            }
   \                     ??Onboard_wait_0:
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   28           ADD     A,R0
   \   00000C   1A           DEC     R2
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   39           ADDC    A,R1
   \   000010   FB           MOV     R3,A
   \   000011   E8           MOV     A,R0
   \   000012   7001         JNZ     ??Onboard_wait_2
   \   000014   E9           MOV     A,R1
   \                     ??Onboard_wait_2:
   \   000015   70EB         JNZ     ??Onboard_wait_1
    416          }
   \   000017   02....       LJMP    ?BRET
    417          
    418          /*********************************************************************
    419           *                    EXTERNAL I/O FUNCTIONS
    420           *
    421           * User defined functions to control external devices. Add your code
    422           * to the following functions to control devices wired to DB outputs.
    423           *
    424           *********************************************************************/
    425          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    426          void BigLight_On( void )
   \                     BigLight_On:
    427          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    428            // Put code here to turn on an external light
    429          }
   \   000000   02....       LJMP    ?BRET
    430          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void BigLight_Off( void )
   \                     BigLight_Off:
    432          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    433            // Put code here to turn off an external light
    434          }
   \   000000   02....       LJMP    ?BRET
    435          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          void BuzzerControl( byte on )
   \                     BuzzerControl:
    437          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    438            // Put code here to turn a buzzer on/off
    439            (void)on;
    440          }
   \   000000   02....       LJMP    ?BRET
    441          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    442          void Dimmer( byte lvl )
   \                     Dimmer:
    443          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    444            // Put code here to control a dimmer
    445            (void)lvl;
    446          }
   \   000000   02....       LJMP    ?BRET
    447          
    448          // No dip switches on this board

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          byte GetUserDipSw( void )
   \                     GetUserDipSw:
    450          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    451            return 0;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    452          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for registeredKeysTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitBoard?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBoard

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RegisterForKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RegisterForKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_SendKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_SendKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_KeyCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_KeyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_stack_used?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_stack_used

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_itoa?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _itoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_rand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_wait?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_On?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_On

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_Off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_Off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BuzzerControl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BuzzerControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Dimmer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Dimmer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetUserDipSw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetUserDipSw
    453          
    454          /*********************************************************************
    455          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     BigLight_Off               0      0      0
     BigLight_On                0      0      0
     BuzzerControl              0      0      0
     Dimmer                     0      0      0
     GetUserDipSw               0      0      0
     InitBoard                  0      0      9
       -> osal_int_disable      0      0     18
       -> HalLedSet             0      0     18
       -> HalLedSet             0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> HalLedSet             0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> MT_SysResetInd        0      0     18
       -> HalKeyConfig          0      0     18
     OnBoard_KeyCallback        2      0      0
       -> OnBoard_SendKeys      4      0      0
     OnBoard_SendKeys           1      0     10
       -> osal_msg_allocate     0      0     20
       -> osal_msg_send         0      0     20
     OnBoard_stack_used         2      0      0
     Onboard_rand               0      0      9
       -> macMcuRandomByte      0      0     18
       -> macMcuRandomByte      0      0     18
     Onboard_wait               0      0      9
     RegisterForKeys            2      0      0
     _itoa                      1      0     20


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     SLEEPSTA                                   1
     _A_IEN0                                    1
     OnboardKeyIntEnable                        1
     aExtendedAddress                           8
     registeredKeysTaskID                       1
     InitBoard                                107
     ?Subroutine0                               5
     RegisterForKeys                           20
     ?Subroutine1                               7
     OnBoard_SendKeys                          69
     OnBoard_KeyCallback                       38
     OnBoard_stack_used                        83
     _itoa                                    151
     Onboard_rand                              26
     Onboard_wait                              26
     BigLight_On                                3
     BigLight_Off                               3
     BuzzerControl                              3
     Dimmer                                     3
     GetUserDipSw                               5
     ?<Initializer for registeredKeysTaskID>    1
     ??InitBoard?relay                          6
     ??RegisterForKeys?relay                    6
     ??OnBoard_SendKeys?relay                   6
     ??OnBoard_KeyCallback?relay                6
     ??OnBoard_stack_used?relay                 6
     ??_itoa?relay                              6
     ??Onboard_rand?relay                       6
     ??Onboard_wait?relay                       6
     ??BigLight_On?relay                        6
     ??BigLight_Off?relay                       6
     ??BuzzerControl?relay                      6
     ??Dimmer?relay                             6
     ??GetUserDipSw?relay                       6

 
 549 bytes in segment BANKED_CODE
  78 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
   9 bytes in segment XDATA_Z
 
 628 bytes of CODE  memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  10 bytes of XDATA memory

Errors: none
Warnings: none
