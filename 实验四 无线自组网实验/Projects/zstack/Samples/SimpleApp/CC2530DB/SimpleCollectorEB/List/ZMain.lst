###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                01/Dec/2011  14:21:45 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\ZMain\TI2530DB\ZMai #
#                          n.c                                                #
#    Command line       =  -f F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg    #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\ZMain\TI2530DB\ZMai #
#                          n.c -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D     #
#                          REFLECTOR -D NV_INIT -D xNV_RESTORE -D ZTOOL_P1    #
#                          -D MT_TASK -D MT_SYS_FUNC -D xMT_SAPI_FUNC -D      #
#                          xMT_SAPI_CB_FUNC -lC F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹ #
#                          âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-C #
#                          C2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstac #
#                          k\Samples\SimpleApp\CC2530DB\SimpleCollectorEB\Lis #
#                          t\ -lA F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\SimpleCollectorEB\List\             #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\Obj\ -e                  #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼ #
#                          þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack #
#                          -CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zst #
#                          ack\Samples\SimpleApp\CC2530DB\ -I                 #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\SOURCE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ #
#                          ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack- #
#                          CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zsta #
#                          ck\Samples\SimpleApp\CC2530DB\..\..\..\ZMAIN\TI253 #
#                          0DB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC253 #
#                          0EB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC #
#                          2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3. #
#                          0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\ #
#                          SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ #
#                          INCLUDE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__C #
#                          C2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3 #
#                          .0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples #
#                          \SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC #
#                          K\AF\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N #
#                          WK\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC #
#                          \ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³Ì #
#                          Ðò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4. #
#                          0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simple #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ #
#                           -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ #
#                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0 #
#                          _Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\   #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\    #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\  #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDAT #
#                          A\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD #
#                          E\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L #
#                          EVEL\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW #
#                          _LEVEL\srf04\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\ #
#                          10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC253 #
#                          0-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Sa #
#                          mples\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS #
#                          \MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\" -I "C:\Program       #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\List\ZMain.lst           #
#    Object file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\Obj\ZMain.r51            #
#                                                                             #
#                                                                             #
###############################################################################

F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2009-04-03 12:59:44 -0700 (Fri, 03 Apr 2009) $
      4            Revision:       $Revision: 19677 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x81
   \   unsigned char volatile __sfr SP
   \                     `SP`:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     49          #include "ZMAC.h"
     50          
     51          #ifndef NONWK
     52            #include "AF.h"
     53          #endif
     54          
     55          /* Hal */
     56          #include "hal_lcd.h"
     57          #include "hal_led.h"
     58          #include "hal_adc.h"
     59          #include "hal_drivers.h"
     60          #include "hal_assert.h"
     61          #include "hal_flash.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Maximun number of Vdd samples checked before go on
     72          #define MAX_VDD_SAMPLES  3
     73          #define ZMAIN_VDD_LIMIT  HAL_ADC_VDD_LIMIT_4
     74          
     75          /*********************************************************************
     76           * TYPEDEFS
     77           */
     78          
     79          /*********************************************************************
     80           * GLOBAL VARIABLES
     81           */
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          extern bool HalAdcCheckVdd (uint8 limit);
     92          
     93          /*********************************************************************
     94           * LOCAL VARIABLES
     95           */
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void zmain_dev_info( void );
    102          static void zmain_ext_addr( void );
    103          static void zmain_ram_init( void );
    104          static void zmain_vdd_check( void );
    105          
    106          #ifdef LCD_SUPPORTED
    107          static void zmain_lcd_init( void );
    108          #endif
    109          
    110          /*********************************************************************
    111           * @fn      main
    112           * @brief   First function called after startup.
    113           * @return  don't care
    114           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    115          int main( void )
   \                     main:
    116          {
   \   000000                ; Auto size: 0
    117            // Turn off interrupts
    118            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ??osal_int_disable?relay
    119          
    120            // Initialization for board related stuff such as LEDs
    121            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   7001         JNZ     ??main_2
   \   00001F   E9           MOV     A,R1
   \                     ??main_2:
   \   000020   70F1         JNZ     ??main_1
   \   000022   75C680       MOV     0xc6,#-0x80
   \                     ??main_3:
   \   000025   7480         MOV     A,#-0x80
   \   000027   659E         XRL     A,0x9e
   \   000029   70FA         JNZ     ??main_3
   \   00002B   43BE04       ORL     0xbe,#0x4
   \   00002E   43FE01       ORL     0xfe,#0x1
   \   000031   43FE02       ORL     0xfe,#0x2
   \   000034   43FE10       ORL     0xfe,#0x10
   \   000037   438F01       ORL     0x8f,#0x1
    122          
    123            // Make sure supply voltage is high enough to run
    124            zmain_vdd_check();
   \   00003A                ; Setup parameters for call to function zmain_vdd_check
   \   00003A   12....       LCALL   ??zmain_vdd_check?relay
    125          
    126            // Initialize stack memory
    127            zmain_ram_init();
   \   00003D   78..         MOV     R0,#(SFB(XSP) & 0xff)
   \   00003F   8682         MOV     DPL,@R0
   \   000041   08           INC     R0
   \   000042   8683         MOV     DPH,@R0
   \   000044   8003         SJMP    ??main_4
   \                     ??main_5:
   \   000046   74CD         MOV     A,#-0x33
   \   000048   F0           MOVX    @DPTR,A
   \                     ??main_4:
   \   000049   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00004C   C3           CLR     C
   \   00004D   74..         MOV     A,#(SFB(XSTACK) & 0xff)
   \   00004F   9582         SUBB    A,DPL
   \   000051   74..         MOV     A,#((SFB(XSTACK) >> 8) & 0xff)
   \   000053   9583         SUBB    A,DPH
   \   000055   40EF         JC      ??main_5
   \   000057   7582..       MOV     DPL,#((SFE(ISTACK) + 255) & 0xff)
   \   00005A   7583..       MOV     DPH,#(((SFE(ISTACK) - 1) >> 8) & 0xff)
   \   00005D   8004         SJMP    ??main_6
   \                     ??main_7:
   \   00005F   A882         MOV     R0,DPL
   \   000061   76CD         MOV     @R0,#-0x33
   \                     ??main_6:
   \   000063   E581         MOV     A,0x81
   \   000065   F5..         MOV     ?V0 + 0,A
   \   000067   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00006A   75..00       MOV     ?V0 + 1,#0x0
   \   00006D   C3           CLR     C
   \   00006E   E5..         MOV     A,?V0 + 0
   \   000070   9582         SUBB    A,DPL
   \   000072   E4           CLR     A
   \   000073   9583         SUBB    A,DPH
   \   000075   40E8         JC      ??main_7
    128          
    129            // Initialize board I/O
    130            InitBoard( OB_COLD );
   \   000077                ; Setup parameters for call to function InitBoard
   \   000077   7900         MOV     R1,#0x0
   \   000079   12....       LCALL   ??InitBoard?relay
    131          
    132            // Initialze HAL drivers
    133            HalDriverInit();
   \   00007C                ; Setup parameters for call to function HalDriverInit
   \   00007C   12....       LCALL   ??HalDriverInit?relay
    134          
    135            // Initialize NV System
    136            osal_nv_init( NULL );
   \   00007F                ; Setup parameters for call to function osal_nv_init
   \   00007F   7A00         MOV     R2,#0x0
   \   000081   7B00         MOV     R3,#0x0
   \   000083   12....       LCALL   ??osal_nv_init?relay
    137          
    138            // Initialize basic NV items
    139            zgInit();
   \   000086                ; Setup parameters for call to function zgInit
   \   000086   12....       LCALL   ??zgInit?relay
    140          
    141            // Initialize the MAC
    142            ZMacInit();
   \   000089                ; Setup parameters for call to function ZMacInit
   \   000089   12....       LCALL   ??ZMacInit?relay
    143          
    144            // Determine the extended address
    145            zmain_ext_addr();
   \   00008C                ; Setup parameters for call to function zmain_ext_addr
   \   00008C   12....       LCALL   ??zmain_ext_addr?relay
    146          
    147          #ifndef NONWK
    148            // Since the AF isn't a task, call it's initialization routine
    149            afInit();
   \   00008F                ; Setup parameters for call to function afInit
   \   00008F   12....       LCALL   ??afInit?relay
    150          #endif
    151          
    152            // Initialize the operating system
    153            osal_init_system();
   \   000092                ; Setup parameters for call to function osal_init_system
   \   000092   12....       LCALL   ??osal_init_system?relay
    154          
    155            // Allow interrupts
    156            osal_int_enable( INTS_ALL );
   \   000095                ; Setup parameters for call to function osal_int_enable
   \   000095   79FF         MOV     R1,#-0x1
   \   000097   12....       LCALL   ??osal_int_enable?relay
    157          
    158            // Final board initialization
    159            InitBoard( OB_READY );
   \   00009A                ; Setup parameters for call to function InitBoard
   \   00009A   7902         MOV     R1,#0x2
   \   00009C   12....       LCALL   ??InitBoard?relay
    160          
    161            // Display information about this device
    162            zmain_dev_info();
    163          
    164            /* Display the device info on the LCD */
    165          #ifdef LCD_SUPPORTED
    166            zmain_lcd_init();
    167          #endif
    168          
    169          #ifdef WDT_IN_PM1
    170            /* If WDT is used, this is a good place to enable it. */
    171            WatchDogEnable( WDTIMX );
    172          #endif
    173          
    174            osal_start_system(); // No Return from here
   \   00009F                ; Setup parameters for call to function osal_start_system
   \   00009F   12....       LCALL   ??osal_start_system?relay
    175          
    176            // Shouldn't get here
    177            return ( 0 );
   \   0000A2   7A00         MOV     R2,#0x0
   \   0000A4   7B00         MOV     R3,#0x0
   \   0000A6   02....       LJMP    ?BRET
   \   0000A9                REQUIRE CLKCONCMD
   \   0000A9                REQUIRE P1DIR
   \   0000A9                REQUIRE P0INP
   \   0000A9                REQUIRE SLEEPSTA
   \   0000A9                REQUIRE CLKCONSTA
   \   0000A9                REQUIRE SLEEPCMD
   \   0000A9                REQUIRE `SP`
    178          } // main()
    179          
    180          /*********************************************************************
    181           * @fn      zmain_vdd_check
    182           * @brief   Check if the Vdd is OK to run the processor.
    183           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    184           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    185          static void zmain_vdd_check( void )
   \                     zmain_vdd_check:
    186          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    187            uint8 vdd_passed_count = 0;
   \   000005   7E00         MOV     R6,#0x0
    188            bool toggle = 0;
   \   000007   7F00         MOV     R7,#0x0
    189          
    190            // Repeat getting the sample until number of failures or successes hits MAX
    191            // then based on the count value, determine if the device is ready or not
    192            while ( vdd_passed_count < MAX_VDD_SAMPLES )
    193            {
    194              if ( HalAdcCheckVdd (ZMAIN_VDD_LIMIT) )
   \                     ??zmain_vdd_check_0:
   \   000009                ; Setup parameters for call to function HalAdcCheckVdd
   \   000009   7904         MOV     R1,#0x4
   \   00000B   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00000E   E9           MOV     A,R1
   \   00000F   6019         JZ      ??zmain_vdd_check_1
    195              {
    196                vdd_passed_count++;    // Keep track # times Vdd passes in a row
   \   000011   0E           INC     R6
    197                MicroWait (10000);     // Wait 10ms to try again
   \   000012                ; Setup parameters for call to function Onboard_wait
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B27         MOV     R3,#0x27
   \   000016   12....       LCALL   ??Onboard_wait?relay
    198              }
    199              else
    200              {
    201                vdd_passed_count = 0;  // Reset passed counter
    202                MicroWait (50000);     // Wait 50ms
    203                MicroWait (50000);     // Wait another 50ms to try again
    204              }
    205          
    206              /* toggle LED1 and LED2 */
    207              if (vdd_passed_count == 0)
   \   000019   EE           MOV     A,R6
   \   00001A   601E         JZ      ??zmain_vdd_check_2
   \   00001C   C3           CLR     C
   \   00001D   9403         SUBB    A,#0x3
   \   00001F   40E8         JC      ??zmain_vdd_check_0
    208              {
    209                if ((toggle = !(toggle)))
    210                  HAL_TOGGLE_LED1();
    211                else
    212                  HAL_TOGGLE_LED2();
    213              }
    214            }
    215          
    216            /* turn off LED1 */
    217            HAL_TURN_OFF_LED1();
   \   000021   D290         SETB    0x90.0
    218            HAL_TURN_OFF_LED2();
   \   000023   D291         SETB    0x90.1
    219          }
   \   000025   7F01         MOV     R7,#0x1
   \   000027   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_vdd_check_1:
   \   00002A   7E00         MOV     R6,#0x0
   \   00002C                ; Setup parameters for call to function Onboard_wait
   \   00002C   7A50         MOV     R2,#0x50
   \   00002E   7BC3         MOV     R3,#-0x3d
   \   000030   12....       LCALL   ??Onboard_wait?relay
   \   000033                ; Setup parameters for call to function Onboard_wait
   \   000033   7A50         MOV     R2,#0x50
   \   000035   7BC3         MOV     R3,#-0x3d
   \   000037   12....       LCALL   ??Onboard_wait?relay
   \                     ??zmain_vdd_check_2:
   \   00003A   EF           MOV     A,R7
   \   00003B   700A         JNZ     ??zmain_vdd_check_3
   \   00003D   7F01         MOV     R7,#0x1
   \   00003F   A290         MOV     C,0x90.0
   \   000041   400E         JC      ??zmain_vdd_check_4
   \   000043   D290         SETB    0x90.0
   \   000045   80C2         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_3:
   \   000047   7F00         MOV     R7,#0x0
   \   000049   A291         MOV     C,0x90.1
   \   00004B   4008         JC      ??zmain_vdd_check_5
   \   00004D   D291         SETB    0x90.1
   \   00004F   80B8         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_4:
   \   000051   C290         CLR     0x90.0
   \   000053   80B4         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_5:
   \   000055   C291         CLR     0x90.1
   \   000057   80B0         SJMP    ??zmain_vdd_check_0
   \   000059                REQUIRE _A_P1
    220          
    221          /**************************************************************************************************
    222           * @fn          zmain_ext_addr
    223           *
    224           * @brief       Execute a prioritized search for a valid extended address and write the results
    225           *              into the OSAL NV system for use by the system.
    226           *
    227           * input parameters
    228           *
    229           * None.
    230           *
    231           * output parameters
    232           *
    233           * None.
    234           *
    235           * @return      None.
    236           **************************************************************************************************
    237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    239          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    240            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#((`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff)
   \   000016   7582..       MOV     DPL,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff)
   \   000019   7408         MOV     A,#0x8
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    241            uint8 writeNV = TRUE;
    242          
    243            // First check whether a non-erased extended address exists in the OSAL NV.
    244            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    245                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    246                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   74..         MOV     A,#(aExtendedAddress & 0xff)
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#((aExtendedAddress >> 8) & 0xff)
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   A982         MOV     R1,DPL
   \   000035   AA83         MOV     R2,DPH
   \   000037   89..         MOV     ?V0 + 0,R1
   \   000039   8A..         MOV     ?V0 + 1,R2
   \   00003B   75..00       MOV     ?V0 + 2,#0x0
   \   00003E                ; Setup parameters for call to function osal_nv_item_init
   \   00003E   75..00       MOV     ?V0 + 4,#0x0
   \   000041   75..00       MOV     ?V0 + 5,#0x0
   \   000044   78..         MOV     R0,#?V0 + 4
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7C08         MOV     R4,#0x8
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   7A01         MOV     R2,#0x1
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   12....       LCALL   ??osal_nv_item_init?relay
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   \   000059   E9           MOV     A,R1
   \   00005A   7043         JNZ     ??zmain_ext_addr_0
   \   00005C                ; Setup parameters for call to function osal_nv_read
   \   00005C   75....       MOV     ?V0 + 4,#(aExtendedAddress & 0xff)
   \   00005F   75....       MOV     ?V0 + 5,#((aExtendedAddress >> 8) & 0xff)
   \   000062   78..         MOV     R0,#?V0 + 4
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   75..08       MOV     ?V0 + 4,#0x8
   \   00006A   75..00       MOV     ?V0 + 5,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 4
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   7C00         MOV     R4,#0x0
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7A01         MOV     R2,#0x1
   \   000078   7B00         MOV     R3,#0x0
   \   00007A   12....       LCALL   ??osal_nv_read?relay
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   E9           MOV     A,R1
   \   000083   701A         JNZ     ??zmain_ext_addr_0
   \   000085                ; Setup parameters for call to function osal_memcmp
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008A   7C08         MOV     R4,#0x8
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   E9           MOV     A,R1
   \   00009A   7003         JNZ     $+5
   \   00009C   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    247            {
    248              // Attempt to read the extended address from the location on the lock bits page
    249              // where the programming tools know to reserve it.
    250              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   00009F                ; Setup parameters for call to function HalFlashRead
   \   00009F   75..08       MOV     ?V0 + 4,#0x8
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   7C..         MOV     R4,#(aExtendedAddress & 0xff)
   \   0000A9   7D..         MOV     R5,#((aExtendedAddress >> 8) & 0xff)
   \   0000AB   7AE8         MOV     R2,#-0x18
   \   0000AD   7B07         MOV     R3,#0x7
   \   0000AF   797F         MOV     R1,#0x7f
   \   0000B1   12....       LCALL   ??HalFlashRead?relay
   \   0000B4   7402         MOV     A,#0x2
   \   0000B6   12....       LCALL   ?DEALLOC_XSTACK8
    251          
    252              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000B9                ; Setup parameters for call to function osal_memcmp
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   7C08         MOV     R4,#0x8
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7403         MOV     A,#0x3
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV     A,R1
   \   0000CE   6035         JZ      ??zmain_ext_addr_2
    253              {
    254                // Attempt to read the extended address from the designated location in the Info Page.
    255                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000D0                ; Setup parameters for call to function osal_memcmp
   \   0000D0   78..         MOV     R0,#?V0 + 0
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D5   7C08         MOV     R4,#0x8
   \   0000D7   7D00         MOV     R5,#0x0
   \   0000D9   790C         MOV     R1,#0xc
   \   0000DB   7A78         MOV     R2,#0x78
   \   0000DD   7B00         MOV     R3,#0x0
   \   0000DF   12....       LCALL   ??osal_memcmp?relay
   \   0000E2   7403         MOV     A,#0x3
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   E9           MOV     A,R1
   \   0000E8   7054         JNZ     ??zmain_ext_addr_3
    256                {
    257                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000EA                ; Setup parameters for call to function osal_memcpy
   \   0000EA   75..0C       MOV     ?V0 + 0,#0xc
   \   0000ED   75..78       MOV     ?V0 + 1,#0x78
   \   0000F0   78..         MOV     R0,#?V0 + 0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F5   7C08         MOV     R4,#0x8
   \   0000F7   7D00         MOV     R5,#0x0
   \   0000F9   7A..         MOV     R2,#(aExtendedAddress & 0xff)
   \   0000FB   7B..         MOV     R3,#((aExtendedAddress >> 8) & 0xff)
   \   0000FD   12....       LCALL   ??osal_memcpy?relay
   \   000100   7403         MOV     A,#0x3
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
    258                }
    259                else  // No valid extended address was found.
    260                {
    261                  uint8 idx;
    262                  
    263          #if !defined ( NV_RESTORE )
    264                  writeNV = FALSE;  // Make this a temporary IEEE address
    265          #endif
    266          
    267                  /* Attempt to create a sufficiently random extended address for expediency.
    268                   * Note: this is only valid/legal in a test environment and
    269                   *       must never be used for a commercial product.
    270                   */
    271                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    272                  {
    273                    uint16 randy = osal_rand();
    274                    aExtendedAddress[idx++] = LO_UINT16(randy);
    275                    aExtendedAddress[idx++] = HI_UINT16(randy);
    276                  }
    277                  // Next-to-MSB identifies ZigBee devicetype.
    278          #if defined ZDO_COORDINATOR
    279                  aExtendedAddress[idx++] = 0x10;
    280          #elif defined RTR_NWK
    281                  aExtendedAddress[idx++] = 0x20;
    282          #else
    283                  aExtendedAddress[idx++] = 0x30;
    284          #endif
    285                  // MSB has historical signficance.
    286                  aExtendedAddress[idx] = 0xF8;
    287                }
    288              }
    289          
    290              if ( writeNV )
    291              {
    292                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   000105                ; Setup parameters for call to function osal_nv_write
   \   000105   75....       MOV     ?V0 + 0,#(aExtendedAddress & 0xff)
   \   000108   75....       MOV     ?V0 + 1,#((aExtendedAddress >> 8) & 0xff)
   \   00010B   78..         MOV     R0,#?V0 + 0
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000110   75..08       MOV     ?V0 + 0,#0x8
   \   000113   75..00       MOV     ?V0 + 1,#0x0
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   7C00         MOV     R4,#0x0
   \   00011D   7D00         MOV     R5,#0x0
   \   00011F   7A01         MOV     R2,#0x1
   \   000121   7B00         MOV     R3,#0x0
   \   000123   12....       LCALL   ??osal_nv_write?relay
   \   000126   7404         MOV     A,#0x4
   \   000128   12....       LCALL   ?DEALLOC_XSTACK8
    293              }
    294            }
    295          
    296            // Set the MAC PIB extended address according to results from above.
    297            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   00012B                ; Setup parameters for call to function ZMacSetReq
   \   00012B   7A..         MOV     R2,#(aExtendedAddress & 0xff)
   \   00012D   7B..         MOV     R3,#((aExtendedAddress >> 8) & 0xff)
   \   00012F   79E2         MOV     R1,#-0x1e
   \   000131   12....       LCALL   ??ZMacSetReq?relay
    298          }
   \   000134   740B         MOV     A,#0xb
   \   000136   12....       LCALL   ?DEALLOC_XSTACK8
   \   000139   7F06         MOV     R7,#0x6
   \   00013B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   00013E   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   000140                ; Setup parameters for call to function osal_rand
   \   000140   12....       LCALL   ??osal_rand?relay
   \   000143   8A..         MOV     ?V0 + 0,R2
   \   000145   A8..         MOV     R0,?V0 + 0
   \   000147   8E..         MOV     ?V0 + 0,R6
   \   000149   E5..         MOV     A,?V0 + 0
   \   00014B   12....       LCALL   ??Subroutine3_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00014E   E8           MOV     A,R0
   \   00014F   F0           MOVX    @DPTR,A
   \   000150   0E           INC     R6
   \   000151   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000154   EB           MOV     A,R3
   \   000155   F0           MOVX    @DPTR,A
   \   000156   0E           INC     R6
   \   000157   EE           MOV     A,R6
   \   000158   C3           CLR     C
   \   000159   9406         SUBB    A,#0x6
   \   00015B   40E3         JC      ??zmain_ext_addr_4
   \   00015D   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000160   7410         MOV     A,#0x10
   \   000162   F0           MOVX    @DPTR,A
   \   000163   7401         MOV     A,#0x1
   \   000165   2E           ADD     A,R6
   \   000166   12....       LCALL   ??Subroutine3_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000169   74F8         MOV     A,#-0x8
   \   00016B   F0           MOVX    @DPTR,A
   \   00016C   80BD         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??osal_memcmp?relay
   \   00000B   7403         MOV     A,#0x3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine3_0
   \   000001                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   24..         ADD     A,#(aExtendedAddress & 0xff)
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   34..         ADDC    A,#((aExtendedAddress >> 8) & 0xff)
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E582         MOV     A,DPL
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F582         MOV     DPL,A
   \   000006   E583         MOV     A,DPH
   \   000008   34FF         ADDC    A,#-0x1
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_vdd_check?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_vdd_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FFFFFFFF     DB 255, 255, 255, 255, 255, 255, 255, 255
   \            FFFFFFFF
    299          
    300          /**************************************************************************************************
    301           * @fn          zmain_dev_info
    302           *
    303           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    304           *
    305           * input parameters
    306           *
    307           * None.
    308           *
    309           * output parameters
    310           *
    311           * None.
    312           *
    313           * @return      None.
    314           **************************************************************************************************
    315           */
    316          static void zmain_dev_info(void)
    317          {
    318          #ifdef LCD_SUPPORTED
    319            uint8 i;
    320            uint8 *xad;
    321            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    322          
    323            // Display the extended address.
    324            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    325          
    326            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    327            {
    328              uint8 ch;
    329              ch = (*xad >> 4) & 0x0F;
    330              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    331              ch = *xad & 0x0F;
    332              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    333            }
    334            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    335            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    336            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    337          #endif
    338          }
    339          
    340          /*********************************************************************
    341           * @fn      zmain_ram_init
    342           * @brief   Initialize ram for stack "high-water-mark" observations.
    343           * @return  none
    344           *********************************************************************/
    345          static void zmain_ram_init( void )
    346          {
    347            uint8 *end;
    348            uint8 *ptr;
    349          
    350            // Initialize the call (parameter) stack
    351            end = (uint8*)CSTK_BEG;  // Lower end
    352            ptr = (uint8*)(*( __idata uint16*)(CSTK_PTR));  // Upper end
    353            while ( --ptr > end )
    354              *ptr = STACK_INIT_VALUE;
    355          
    356            // Initialize the return (address) stack
    357            ptr = (uint8*)RSTK_END - 1;  // Upper end
    358            while ( --ptr > (uint8*)SP )
    359              *(__idata uint8*)ptr = STACK_INIT_VALUE;
    360          }
    361          
    362          #ifdef LCD_SUPPORTED
    363          /*********************************************************************
    364           * @fn      zmain_lcd_init
    365           * @brief   Initialize LCD at start up.
    366           * @return  none
    367           *********************************************************************/
    368          static void zmain_lcd_init ( void )
    369          {
    370          #ifdef SERIAL_DEBUG_SUPPORTED
    371            {
    372              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    373          
    374          #if defined( MT_MAC_FUNC )
    375          #if defined( ZDO_COORDINATOR )
    376                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    377          #else
    378                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    379          #endif // ZDO
    380          #elif defined( MT_NWK_FUNC )
    381          #if defined( ZDO_COORDINATOR )
    382                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    383          #else
    384                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    385          #endif // ZDO
    386          #endif // MT_FUNC
    387            }
    388          #endif // SERIAL_DEBUG_SUPPORTED
    389          }
    390          #endif
    391          
    392          /*********************************************************************
    393          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     main                       1      0      0
       -> osal_int_disable      0      0      0
       -> zmain_vdd_check       0      0      0
       -> InitBoard             0      0      0
       -> HalDriverInit         0      0      0
       -> osal_nv_init          0      0      0
       -> zgInit                0      0      0
       -> ZMacInit              0      0      0
       -> zmain_ext_addr        0      0      0
       -> afInit                0      0      0
       -> osal_init_system      0      0      0
       -> osal_int_enable       0      0      0
       -> InitBoard             0      0      0
       -> osal_start_system     0      0      0
     zmain_ext_addr             2      0     29
       -> osal_nv_item_init     0      0     54
       -> osal_nv_read          0      0     58
       -> osal_memcmp           0      0     56
       -> HalFlashRead          0      0     54
       -> osal_memcmp           0      0     56
       -> osal_memcmp           0      0     56
       -> osal_memcpy           0      0     56
       -> osal_nv_write         0      0     58
       -> ZMacSetReq            0      0     50
       -> osal_rand             0      0     50
     zmain_vdd_check            0      0      9
       -> HalAdcCheckVdd        0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     SP                                                1
     P0INP                                             1
     _A_P1                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     P1DIR                                             1
     main                                            169
     zmain_vdd_check                                  89
     zmain_ext_addr                                  366
     ?Subroutine1                                     14
     ?Subroutine0                                      1
     ??Subroutine3_0                                  10
     ?Subroutine2                                     13
     ??main?relay                                      6
     ??zmain_vdd_check?relay                           6
     ??zmain_ext_addr?relay                            6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8

 
 662 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   8 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
 680 bytes of CODE  memory
   8 bytes of CONST memory
   0 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
