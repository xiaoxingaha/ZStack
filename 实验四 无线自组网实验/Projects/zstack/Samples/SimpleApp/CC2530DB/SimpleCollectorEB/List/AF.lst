###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                01/Dec/2011  14:21:23 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Components\stack\af\AF.c            #
#    Command line       =  -f F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg    #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Components\stack\af\AF.c -D         #
#                          HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR  #
#                          -D NV_INIT -D xNV_RESTORE -D ZTOOL_P1 -D MT_TASK   #
#                          -D MT_SYS_FUNC -D xMT_SAPI_FUNC -D                 #
#                          xMT_SAPI_CB_FUNC -lC F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹ #
#                          âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-C #
#                          C2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstac #
#                          k\Samples\SimpleApp\CC2530DB\SimpleCollectorEB\Lis #
#                          t\ -lA F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\SimpleCollectorEB\List\             #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\Obj\ -e                  #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼ #
#                          þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack #
#                          -CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zst #
#                          ack\Samples\SimpleApp\CC2530DB\ -I                 #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\SOURCE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ #
#                          ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack- #
#                          CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zsta #
#                          ck\Samples\SimpleApp\CC2530DB\..\..\..\ZMAIN\TI253 #
#                          0DB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC253 #
#                          0EB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC #
#                          2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3. #
#                          0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\ #
#                          SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ #
#                          INCLUDE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__C #
#                          C2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3 #
#                          .0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples #
#                          \SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC #
#                          K\AF\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N #
#                          WK\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC #
#                          \ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³Ì #
#                          Ðò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4. #
#                          0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simple #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ #
#                           -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ #
#                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0 #
#                          _Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\   #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\    #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\  #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDAT #
#                          A\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD #
#                          E\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L #
#                          EVEL\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW #
#                          _LEVEL\srf04\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\ #
#                          10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC253 #
#                          0-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Sa #
#                          mples\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS #
#                          \MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\" -I "C:\Program       #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\List\AF.lst              #
#    Object file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleCollectorEB\Obj\AF.r51               #
#                                                                             #
#                                                                             #
###############################################################################

F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2009-03-19 13:41:00 -0700 (Thu, 19 Mar 2009) $
      4            Revision:       $Revision: 19470 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          
     52          #if defined ( MT_AF_CB_FUNC )
     53            #include "MT_AF.h"
     54          #endif
     55          
     56          #if defined ( INTER_PAN )
     57            #include "stub_aps.h"
     58          #endif
     59          
     60          /*********************************************************************
     61           * MACROS
     62           */
     63          
     64          /*********************************************************************
     65           * @fn      afSend
     66           *
     67           * @brief   Helper macro for V1 API to invoke V2 API.
     68           *
     69           * input parameters
     70           *
     71           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     72           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     73           * @param   cID - A valid cluster ID as specified by the Profile.
     74           * @param   len - Number of bytes of data pointed to by next param.
     75           * @param  *buf - A pointer to the data bytes to send.
     76           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     77           * @param  *transID - A pointer to a byte which can be modified and which will
     78           *                    be used as the transaction sequence number of the msg.
     79           *
     80           * output parameters
     81           *
     82           * @param  *transID - Incremented by one if the return value is success.
     83           *
     84           * @return  afStatus_t - See previous definition of afStatus_... types.
     85           */
     86          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     87                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     88                                    (cID), (len), (buf), (transID), (options), (radius) )
     89          
     90          /*********************************************************************
     91           * CONSTANTS
     92           */
     93          
     94          /*********************************************************************
     95           * TYPEDEFS
     96           */
     97          
     98          /*********************************************************************
     99           * GLOBAL VARIABLES
    100           */
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103          
    104          /*********************************************************************
    105           * EXTERNAL VARIABLES
    106           */
    107          
    108          /*********************************************************************
    109           * EXTERNAL FUNCTIONS
    110           */
    111          
    112          /*********************************************************************
    113           * LOCAL VARIABLES
    114           */
    115          
    116          /*********************************************************************
    117           * LOCAL FUNCTIONS
    118           */
    119          
    120          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    121                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    122                          byte SecurityUse, uint32 timestamp );
    123          
    124          static epList_t *afFindEndPointDescList( byte EndPoint );
    125          
    126          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    127          
    128          /*********************************************************************
    129           * NETWORK LAYER CALLBACKS
    130           */
    131          
    132          /*********************************************************************
    133           * PUBLIC FUNCTIONS
    134           */
    135          
    136          /*********************************************************************
    137           * @fn      afInit
    138           *
    139           * @brief   Initialization function for the AF.
    140           *
    141           * @param   none
    142           *
    143           * @return  none
    144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void afInit( void )
   \                     afInit:
    146          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    147            // Start with no endpoint defined
    148            epList = NULL;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    149          }
   \   00000B   02....       LJMP    ?Subroutine33 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    150          
    151          /*********************************************************************
    152           * @fn      afRegisterExtended
    153           *
    154           * @brief   Register an Application's EndPoint description.
    155           *
    156           * @param   epDesc - pointer to the Application's endpoint descriptor.
    157           * @param   descFn - pointer to descriptor callback function
    158           *
    159           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    160           *
    161           * @return  Pointer to epList_t on success, NULL otherwise.
    162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    164          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    165            epList_t *ep;
    166            epList_t *epSearch;
    167          
    168            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV     R2,#0x7
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_mem_alloc?relay
    169            if ( ep )
   \   000014   EA           MOV     A,R2
   \   000015   7001         JNZ     ??afRegisterExtended_0
   \   000017   EB           MOV     A,R3
   \                     ??afRegisterExtended_0:
   \   000018   6054         JZ      ??afRegisterExtended_1
    170            {
    171              // Fill in the new list entry
    172              ep->epDesc = epDesc;
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E5..         MOV     A,?V0 + 0
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   E5..         MOV     A,?V0 + 1
   \   000024   F0           MOVX    @DPTR,A
    173          
    174              // Default to allow Match Descriptor.
    175              ep->flags = eEP_AllowMatch;
   \   000025   7401         MOV     A,#0x1
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine5 & 0xFFFF
    176              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_4:
   \   000030   EE           MOV     A,R6
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   EF           MOV     A,R7
   \   000034   12....       LCALL   ?Subroutine5 & 0xFFFF
    177              ep->nextDesc = NULL;
   \                     ??CrossCallReturnLabel_5:
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    178          
    179              // Does a list exist?
    180              if ( epList == NULL )
   \   00003D   90....       MOV     DPTR,#epList
   \   000040   E0           MOVX    A,@DPTR
   \   000041   7002         JNZ     ??afRegisterExtended_2
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \                     ??afRegisterExtended_2:
   \   000045   90....       MOV     DPTR,#epList
   \   000048   601F         JZ      ??afRegisterExtended_3
    181                epList = ep;  // Make this the first entry
    182              else
    183              {
    184                // Look for the end of the list
    185                epSearch = epList;
   \   00004A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    186                while( epSearch->nextDesc != NULL )
    187                  epSearch = epSearch->nextDesc;
   \                     ??CrossCallReturnLabel_68:
   \   00004D   E8           MOV     A,R0
   \   00004E   2405         ADD     A,#0x5
   \   000050   F8           MOV     R0,A
   \   000051   E9           MOV     A,R1
   \   000052   3400         ADDC    A,#0x0
   \   000054   F9           MOV     R1,A
   \   000055   E8           MOV     A,R0
   \   000056   FC           MOV     R4,A
   \   000057   E9           MOV     A,R1
   \   000058   FD           MOV     R5,A
   \   000059   8C82         MOV     DPL,R4
   \   00005B   8D83         MOV     DPH,R5
   \   00005D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000060   7001         JNZ     ??afRegisterExtended_4
   \   000062   E9           MOV     A,R1
   \                     ??afRegisterExtended_4:
   \   000063   70E8         JNZ     ??CrossCallReturnLabel_68
    188          
    189                // Add new entry to end of list
    190                epSearch->nextDesc = ep;
   \   000065   8C82         MOV     DPL,R4
   \   000067   8D83         MOV     DPH,R5
   \                     ??afRegisterExtended_3:
   \   000069   EA           MOV     A,R2
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   EB           MOV     A,R3
   \   00006D   F0           MOVX    @DPTR,A
    191              }
    192            }
    193          
    194            return ep;
   \                     ??afRegisterExtended_1:
   \   00006E                REQUIRE ?Subroutine34
   \   00006E                ; // Fall through to label ?Subroutine34
    195          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    196          
    197          /*********************************************************************
    198           * @fn      afRegister
    199           *
    200           * @brief   Register an Application's EndPoint description.
    201           *
    202           * @param   epDesc - pointer to the Application's endpoint descriptor.
    203           *
    204           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    205           *
    206           * @return  afStatus_SUCCESS - Registered
    207           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    208           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    210          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    211          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    212            epList_t *ep;
    213            
    214            // Look for duplicate endpoint
    215            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??afFindEndPointDescList?relay
   \   000012   EA           MOV     A,R2
   \   000013   7001         JNZ     ??afRegister_0
   \   000015   EB           MOV     A,R3
   \                     ??afRegister_0:
   \   000016   6004         JZ      ??afRegister_1
    216              return ( afStatus_INVALID_PARAMETER );
   \   000018   7902         MOV     R1,#0x2
   \   00001A   8017         SJMP    ??afRegister_2
    217            
    218            ep = afRegisterExtended( epDesc, NULL );
    219          
    220            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_1:
   \   00001C                ; Setup parameters for call to function afRegisterExtended
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   ??afRegisterExtended?relay
   \   000027   EA           MOV     A,R2
   \   000028   7001         JNZ     ??afRegister_3
   \   00002A   EB           MOV     A,R3
   \                     ??afRegister_3:
   \   00002B   7004         JNZ     ??afRegister_4
   \   00002D   7910         MOV     R1,#0x10
   \   00002F   8002         SJMP    ??afRegister_2
   \                     ??afRegister_4:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afRegister_2:
   \   000033   02....       LJMP    ?Subroutine36 & 0xFFFF
    221          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    222          
    223          
    224          /*********************************************************************
    225           * @fn          afDataConfirm
    226           *
    227           * @brief       This function will generate the Data Confirm back to
    228           *              the application.
    229           *
    230           * @param       endPoint - confirm end point
    231           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    232           * @param       status - status of APSDE_DATA_REQUEST
    233           *
    234           * @return      none
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    237          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   \   000009   8B..         MOV     ?V0 + 0,R3
    238            endPointDesc_t *epDesc;
    239            afDataConfirm_t *msgPtr;
    240          
    241            // Find the endpoint description
    242            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL   ?Subroutine31 & 0xFFFF
    243            if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_50:
   \   00000E   EA           MOV     A,R2
   \   00000F   7001         JNZ     ??afDataConfirm_0
   \   000011   EB           MOV     A,R3
   \                     ??afDataConfirm_0:
   \   000012   6032         JZ      ??CrossCallReturnLabel_17
    244              return;
    245          
    246            // Determine the incoming command type
    247            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000014                ; Setup parameters for call to function osal_msg_allocate
   \   000014   7A04         MOV     R2,#0x4
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??osal_msg_allocate?relay
    248            if ( msgPtr )
   \   00001B   EA           MOV     A,R2
   \   00001C   7001         JNZ     ??afDataConfirm_1
   \   00001E   EB           MOV     A,R3
   \                     ??afDataConfirm_1:
   \   00001F   6025         JZ      ??CrossCallReturnLabel_17
    249            {
    250              // Build the Data Confirm message
    251              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000021   74FD         MOV     A,#-0x3
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   F0           MOVX    @DPTR,A
    252              msgPtr->hdr.status = status;
   \   000028   A3           INC     DPTR
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   F0           MOVX    @DPTR,A
    253              msgPtr->endpoint = endPoint;
   \   00002C   EE           MOV     A,R6
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
    254              msgPtr->transID = transID;
   \   000034   EF           MOV     A,R7
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    255          
    256          #if defined ( MT_AF_CB_FUNC )
    257              /* If MT has subscribed for this callback, don't send as a message. */
    258              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    259              {
    260                /* Send callback if it's subscribed */
    261                MT_AfDataConfirm ((void *)msgPtr);
    262                /* Release the memory. */
    263                osal_msg_deallocate( (void *)msgPtr );
    264              }
    265              else
    266          #endif
    267              {
    268                /* send message through task message */
    269                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   00003D                ; Setup parameters for call to function osal_msg_send
   \   00003D   85..82       MOV     DPL,?V0 + 4
   \   000040   85..83       MOV     DPH,?V0 + 5
   \   000043   12....       LCALL   ?Subroutine12 & 0xFFFF
    270              }
    271            }
   \                     ??CrossCallReturnLabel_17:
   \   000046   7F06         MOV     R7,#0x6
   \   000048   02....       LJMP    ?BANKED_LEAVE_XDATA
    272          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ??afFindEndPointDesc?relay
   \   000003   8A..         MOV     ?V0 + 4,R2
   \   000005   8B..         MOV     ?V0 + 5,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_msg_send?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    273          
    274          /*********************************************************************
    275           * @fn          afIncomingData
    276           *
    277           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    278           *
    279           * @param       aff  - pointer to APS frame format
    280           * @param       SrcAddress  - Source address
    281           * @param       sig - incoming message's link quality
    282           * @param       SecurityUse - Security enable/disable
    283           *
    284           * @return      none
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    287                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    288          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   740A         MOV     A,#0xa
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   89..         MOV     ?V0 + 7,R1
   \   000020   7420         MOV     A,#0x20
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?L_MOV_X
    289            endPointDesc_t *epDesc = NULL;
    290            uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   74FF         MOV     A,#-0x1
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
    291            epList_t *pList;
    292          #if !defined ( APS_NO_GROUPS )    
    293            uint8 grpEp;
    294          #endif  
    295          
    296            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   000034   7402         MOV     A,#0x2
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   2404         ADD     A,#0x4
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   3400         ADDC    A,#0x0
   \   000041   F9           MOV     R1,A
   \   000042   7408         MOV     A,#0x8
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00004A   7402         MOV     A,#0x2
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   2402         ADD     A,#0x2
   \   000052   F8           MOV     R0,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   3400         ADDC    A,#0x0
   \   000057   F9           MOV     R1,A
   \   000058   7406         MOV     A,#0x6
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000068   701F         JNZ     ??afIncomingData_0
    297            {
    298          #if !defined ( APS_NO_GROUPS )    
    299              // Find the first endpoint for this group
    300              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   00006A                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00006A   79FE         MOV     R1,#-0x2
   \   00006C   7408         MOV     A,#0x8
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ?Subroutine7 & 0xFFFF
    301              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_8:
   \   000074   7003         JNZ     $+5
   \   000076   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    302                return;   // No endpoint found
    303          
    304              epDesc = afFindEndPointDesc( grpEp );
   \   000079                ; Setup parameters for call to function afFindEndPointDesc
   \   000079   12....       LCALL   ?Subroutine24 & 0xFFFF
    305              if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_38:
   \   00007C   7001         JNZ     ??afIncomingData_2
   \   00007E   EF           MOV     A,R7
   \                     ??afIncomingData_2:
   \   00007F   7003         JNZ     $+5
   \   000081   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    306                return;   // Endpoint descriptor not found
    307          
    308              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_3:
   \   000084                ; Setup parameters for call to function afFindEndPointDescList
   \   000084   12....       LCALL   ?Subroutine10 & 0xFFFF
    309          #else
    310              return; // Not supported
    311          #endif    
    312            }
   \                     ??CrossCallReturnLabel_15:
   \   000087   803F         SJMP    ??afIncomingData_4
    313            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000089   7406         MOV     A,#0x6
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000091   F9           MOV     R1,A
   \   000092   74FF         MOV     A,#-0x1
   \   000094   69           XRL     A,R1
   \   000095   7011         JNZ     ??afIncomingData_5
    314            {
    315              // Set the list
    316              if ( (pList = epList) )
   \   000097   90....       MOV     DPTR,#epList
   \   00009A   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00009D   7002         JNZ     ??afIncomingData_6
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \                     ??afIncomingData_6:
   \   0000A1   7003         JNZ     $+5
   \   0000A3   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    317              {
    318                epDesc = pList->epDesc;
   \   0000A6   8013         SJMP    ??afIncomingData_7
    319              }
    320            }
    321            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_5:
   \   0000A8                ; Setup parameters for call to function afFindEndPointDesc
   \   0000A8   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000AB   A8..         MOV     R0,?V0 + 4
   \   0000AD   A9..         MOV     R1,?V0 + 5
   \   0000AF   E8           MOV     A,R0
   \   0000B0   FE           MOV     R6,A
   \   0000B1   E9           MOV     A,R1
   \   0000B2   FF           MOV     R7,A
   \   0000B3   E8           MOV     A,R0
   \   0000B4   7001         JNZ     ??afIncomingData_8
   \   0000B6   E9           MOV     A,R1
   \                     ??afIncomingData_8:
   \   0000B7   600F         JZ      ??afIncomingData_4
   \   0000B9   80C9         SJMP    ??afIncomingData_3
    322            {
    323              pList = afFindEndPointDescList( epDesc->endPoint );
    324            }
    325          
    326            while ( epDesc )
    327            {
    328              if ( pList->pfnDescCB )
    329              {
    330                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    331                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    332                if ( pID )
    333                {
    334                  epProfileID = *pID;
    335                  osal_mem_free( pID );
    336                }
    337              }
    338              else if ( epDesc->simpleDesc )
    339              {
    340                epProfileID = epDesc->simpleDesc->AppProfId;
    341              }
    342          
    343              if ( (aff->ProfileID == epProfileID) ||
    344                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    345              {
    346                {
    347                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    348                }
    349              }
    350          
    351              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    352              {
    353          #if !defined ( APS_NO_GROUPS )      
    354                // Find the next endpoint for this group
    355                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    356                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    357                  return;   // No endpoint found
    358          
    359                epDesc = afFindEndPointDesc( grpEp );
    360                if ( epDesc == NULL )
    361                  return;   // Endpoint descriptor not found
    362          
    363                pList = afFindEndPointDescList( epDesc->endPoint );
    364          #else
    365                return;
    366          #endif      
    367              }
    368              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    369              {
    370                pList = pList->nextDesc;
    371                if ( pList )
    372                  epDesc = pList->epDesc;
   \                     ??afIncomingData_7:
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000C4   FE           MOV     R6,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   FF           MOV     R7,A
   \                     ??afIncomingData_4:
   \   0000C8   EE           MOV     A,R6
   \   0000C9   7001         JNZ     ??afIncomingData_9
   \   0000CB   EF           MOV     A,R7
   \                     ??afIncomingData_9:
   \   0000CC   7003         JNZ     $+5
   \   0000CE   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000D1   801D         SJMP    ??CrossCallReturnLabel_16
   \                     ??afIncomingData_10:
   \   0000D3                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0000D3   A9..         MOV     R1,?V0 + 6
   \   0000D5   7408         MOV     A,#0x8
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000DD   7003         JNZ     $+5
   \   0000DF   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000E2                ; Setup parameters for call to function afFindEndPointDesc
   \   0000E2   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000E5   7001         JNZ     ??afIncomingData_11
   \   0000E7   EF           MOV     A,R7
   \                     ??afIncomingData_11:
   \   0000E8   7003         JNZ     $+5
   \   0000EA   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000ED                ; Setup parameters for call to function afFindEndPointDescList
   \   0000ED   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000F0   85..82       MOV     DPL,?XSP + 0
   \   0000F3   85..83       MOV     DPH,?XSP + 1
   \   0000F6   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000F9   E8           MOV     A,R0
   \   0000FA   FC           MOV     R4,A
   \   0000FB   E9           MOV     A,R1
   \   0000FC   FD           MOV     R5,A
   \   0000FD   EC           MOV     A,R4
   \   0000FE   7001         JNZ     ??afIncomingData_12
   \   000100   ED           MOV     A,R5
   \                     ??afIncomingData_12:
   \   000101   8E82         MOV     DPL,R6
   \   000103   8F83         MOV     DPH,R7
   \   000105   601B         JZ      ??afIncomingData_13
   \   000107                ; Setup parameters for indirect call
   \   000107   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00010A   12....       LCALL   ?CALL_IND
   \   00010D   EA           MOV     A,R2
   \   00010E   7001         JNZ     ??afIncomingData_14
   \   000110   EB           MOV     A,R3
   \                     ??afIncomingData_14:
   \   000111   6021         JZ      ??CrossCallReturnLabel_83
   \   000113   8A82         MOV     DPL,R2
   \   000115   8B83         MOV     DPH,R3
   \   000117   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000120   8012         SJMP    ??CrossCallReturnLabel_83
   \                     ??afIncomingData_13:
   \   000122   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000125   7002         JNZ     ??afIncomingData_15
   \   000127   E583         MOV     A,DPH
   \                     ??afIncomingData_15:
   \   000129   6009         JZ      ??CrossCallReturnLabel_83
   \   00012B   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000134   7402         MOV     A,#0x2
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   68           XRL     A,R0
   \   000146   7003         JNZ     ??afIncomingData_16
   \   000148   A3           INC     DPTR
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   69           XRL     A,R1
   \                     ??afIncomingData_16:
   \   00014B   600D         JZ      ??afIncomingData_17
   \   00014D   8E82         MOV     DPL,R6
   \   00014F   8F83         MOV     DPH,R7
   \   000151   E0           MOVX    A,@DPTR
   \   000152   7039         JNZ     ??afIncomingData_18
   \   000154   E8           MOV     A,R0
   \   000155   7001         JNZ     ??afIncomingData_19
   \   000157   E9           MOV     A,R1
   \                     ??afIncomingData_19:
   \   000158   7033         JNZ     ??afIncomingData_18
   \                     ??afIncomingData_17:
   \   00015A                ; Setup parameters for call to function afBuildMSGIncoming
   \   00015A   78..         MOV     R0,#?V0 + 0
   \   00015C   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00015F   7422         MOV     A,#0x22
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000167   7422         MOV     A,#0x22
   \   000169   12....       LCALL   ?XSTACK_DISP0_8
   \   00016C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00016F   7412         MOV     A,#0x12
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000177   A9..         MOV     R1,?V0 + 7
   \   000179   EE           MOV     A,R6
   \   00017A   FC           MOV     R4,A
   \   00017B   EF           MOV     A,R7
   \   00017C   FD           MOV     R5,A
   \   00017D   740C         MOV     A,#0xc
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000185   12....       LCALL   ??afBuildMSGIncoming?relay
   \   000188   740A         MOV     A,#0xa
   \   00018A   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??afIncomingData_18:
   \   00018D   7402         MOV     A,#0x2
   \   00018F   12....       LCALL   ?XSTACK_DISP0_8
   \   000192   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000195   7003         JNZ     $+5
   \   000197   02....       LJMP    ??afIncomingData_10 & 0xFFFF
   \   00019A   7406         MOV     A,#0x6
   \   00019C   12....       LCALL   ?XSTACK_DISP0_8
   \   00019F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001A2   64FF         XRL     A,#0xff
   \   0001A4   7015         JNZ     ??afIncomingData_1
   \   0001A6   85..82       MOV     DPL,?XSP + 0
   \   0001A9   85..83       MOV     DPH,?XSP + 1
   \   0001AC   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0001AF   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0001B2   7002         JNZ     ??afIncomingData_20
   \   0001B4   A3           INC     DPTR
   \   0001B5   E0           MOVX    A,@DPTR
   \                     ??afIncomingData_20:
   \   0001B6   6003         JZ      $+5
   \   0001B8   02....       LJMP    ??afIncomingData_7 & 0xFFFF
    373                else
    374                  epDesc = NULL;
   \                     ??afIncomingData_1:
   \   0001BB   740C         MOV     A,#0xc
   \   0001BD                REQUIRE ?Subroutine37
   \   0001BD                ; // Fall through to label ?Subroutine37
    375              }
    376              else
    377                epDesc = NULL;
    378            }
    379          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   AE..         MOV     R6,?V0 + 4
   \   000005   AF..         MOV     R7,?V0 + 5
   \   000007   EE           MOV     A,R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003                REQUIRE ?Subroutine35
   \   000003                ; // Fall through to label ?Subroutine35

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   540C         ANL     A,#0xc
   \   000005   640C         XRL     A,#0xc
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   12....       LCALL   ??afFindEndPointDescList?relay
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ??aps_FindGroupForEndpoint?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   F5..         MOV     ?V0 + 6,A
   \   00000D   74FE         MOV     A,#-0x2
   \   00000F   65..         XRL     A,?V0 + 6
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D                REQUIRE ??Subroutine40_0
   \   00000D                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7902         MOV     R1,#0x2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005   12....       LCALL   ??osal_mem_free?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0
    380          
    381          /*********************************************************************
    382           * @fn          afBuildMSGIncoming
    383           *
    384           * @brief       Build the message for the app
    385           *
    386           * @param
    387           *
    388           * @return      pointer to next in data buffer
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    391                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    392                           byte SecurityUse, uint32 timestamp )
    393          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8A..         MOV     ?V0 + 4,R2
   \   00001E   8B..         MOV     ?V0 + 5,R3
    394            afIncomingMSGPacket_t *MSGpkt;
    395            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    396            byte *asdu = aff->asdu;
   \   000020   EA           MOV     A,R2
   \   000021   240E         ADD     A,#0xe
   \   000023   F582         MOV     DPL,A
   \   000025   EB           MOV     A,R3
   \   000026   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000029   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00002C   7403         MOV     A,#0x3
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    397            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_84:
   \   000034   EA           MOV     A,R2
   \   000035   2410         ADD     A,#0x10
   \   000037   F5..         MOV     ?V0 + 6,A
   \   000039   EB           MOV     A,R3
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F5..         MOV     ?V0 + 7,A
   \   00003E                ; Setup parameters for call to function osal_msg_allocate
   \   00003E   85..82       MOV     DPL,?V0 + 6
   \   000041   F583         MOV     DPH,A
   \   000043   E0           MOVX    A,@DPTR
   \   000044   2423         ADD     A,#0x23
   \   000046   FA           MOV     R2,A
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??osal_msg_allocate?relay
   \   00004C   8A..         MOV     ?V0 + 0,R2
   \   00004E   8B..         MOV     ?V0 + 1,R3
   \   000050   AE..         MOV     R6,?V0 + 0
   \   000052   AF..         MOV     R7,?V0 + 1
    398          
    399            if ( MSGpkt == NULL )
   \   000054   EE           MOV     A,R6
   \   000055   7001         JNZ     ??afBuildMSGIncoming_0
   \   000057   EF           MOV     A,R7
   \                     ??afBuildMSGIncoming_0:
   \   000058   7003         JNZ     $+5
   \   00005A   02....       LJMP    ??CrossCallReturnLabel_18 & 0xFFFF
    400            {
    401              return;
    402            }
    403          
    404            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   00005D   741A         MOV     A,#0x1a
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   12....       LCALL   ?Subroutine2 & 0xFFFF
    405            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_0:
   \   000066   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000069   E8           MOV     A,R0
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E9           MOV     A,R1
   \   00006D   12....       LCALL   ?Subroutine2 & 0xFFFF
    406            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_1:
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    407            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_85:
   \   00007A                ; Setup parameters for call to function afCopyAddress
   \   00007A   7415         MOV     A,#0x15
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FC           MOV     R4,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   FD           MOV     R5,A
   \   000084   EE           MOV     A,R6
   \   000085   2406         ADD     A,#0x6
   \   000087   FA           MOV     R2,A
   \   000088   EF           MOV     A,R7
   \   000089   3400         ADDC    A,#0x0
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   ??afCopyAddress?relay
    408            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00008F   85..82       MOV     DPL,?V0 + 4
   \   000092   85..83       MOV     DPH,?V0 + 5
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   C0E0         PUSH    A
   \   00009B   EE           MOV     A,R6
   \   00009C   240F         ADD     A,#0xf
   \   00009E   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000A1   D0E0         POP     A
   \   0000A3   F0           MOVX    @DPTR,A
    409            MSGpkt->endPoint = epDesc->endPoint;
   \   0000A4   7401         MOV     A,#0x1
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000AC   C0E0         PUSH    A
   \   0000AE   EE           MOV     A,R6
   \   0000AF   2414         ADD     A,#0x14
   \   0000B1   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000B4   D0E0         POP     A
   \   0000B6   F0           MOVX    @DPTR,A
    410            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000B7   E5..         MOV     A,?V0 + 4
   \   0000B9   240C         ADD     A,#0xc
   \   0000BB   F582         MOV     DPL,A
   \   0000BD   E5..         MOV     A,?V0 + 5
   \   0000BF   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   C0E0         PUSH    A
   \   0000C5   EE           MOV     A,R6
   \   0000C6   2415         ADD     A,#0x15
   \   0000C8   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000CB   D0E0         POP     A
   \   0000CD   F0           MOVX    @DPTR,A
    411            MSGpkt->LinkQuality = sig->LinkQuality;
   \   0000CE   7419         MOV     A,#0x19
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000D6   C0E0         PUSH    A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   2416         ADD     A,#0x16
   \   0000DB   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
    412            MSGpkt->correlation = sig->correlation;
   \   0000E1   7419         MOV     A,#0x19
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   C0E0         PUSH    A
   \   0000EC   EE           MOV     A,R6
   \   0000ED   2417         ADD     A,#0x17
   \   0000EF   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000F2   D0E0         POP     A
   \   0000F4   F0           MOVX    @DPTR,A
    413            MSGpkt->rssi = sig->rssi;
   \   0000F5   7419         MOV     A,#0x19
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   C0E0         PUSH    A
   \   000101   EE           MOV     A,R6
   \   000102   2418         ADD     A,#0x18
   \   000104   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000107   D0E0         POP     A
   \   000109   12....       LCALL   ??Subroutine40_0 & 0xFFFF
    414            MSGpkt->SecurityUse = SecurityUse;
   \                     ??CrossCallReturnLabel_66:
   \   00010C   C0E0         PUSH    A
   \   00010E   EE           MOV     A,R6
   \   00010F   2419         ADD     A,#0x19
   \   000111   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000114   D0E0         POP     A
   \   000116   F0           MOVX    @DPTR,A
    415            MSGpkt->timestamp = timestamp;
   \   000117   741B         MOV     A,#0x1b
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   78..         MOV     R0,#?V0 + 0
   \   00011E   12....       LCALL   ?L_MOV_X
   \   000121   EE           MOV     A,R6
   \   000122   241A         ADD     A,#0x1a
   \   000124   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000127   E5..         MOV     A,?V0 + 0
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   E5..         MOV     A,?V0 + 1
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   A3           INC     DPTR
   \   00012F   E5..         MOV     A,?V0 + 2
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   E5..         MOV     A,?V0 + 3
   \   000135   12....       LCALL   ?Subroutine0 & 0xFFFF
    416            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_56:
   \   000138   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00013B   EE           MOV     A,R6
   \   00013C   2412         ADD     A,#0x12
   \   00013E   12....       LCALL   ?Subroutine4 & 0xFFFF
    417            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_93:
   \   000141   7417         MOV     A,#0x17
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000149   EE           MOV     A,R6
   \   00014A   2410         ADD     A,#0x10
   \   00014C   12....       LCALL   ?Subroutine4 & 0xFFFF
    418            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_94:
   \   00014F   EE           MOV     A,R6
   \   000150   241E         ADD     A,#0x1e
   \   000152   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000155   E4           CLR     A
   \   000156   12....       LCALL   ?Subroutine6 & 0xFFFF
    419            MSGpkt->cmd.DataLength = aff->asduLength;
   \                     ??CrossCallReturnLabel_6:
   \   000159   FC           MOV     R4,A
   \   00015A   7D00         MOV     R5,#0x0
   \   00015C   EE           MOV     A,R6
   \   00015D   241F         ADD     A,#0x1f
   \   00015F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000162   EC           MOV     A,R4
   \   000163   F0           MOVX    @DPTR,A
   \   000164   A3           INC     DPTR
   \   000165   E4           CLR     A
   \   000166   F0           MOVX    @DPTR,A
    420          
    421            if ( MSGpkt->cmd.DataLength )
   \   000167   EE           MOV     A,R6
   \   000168   2421         ADD     A,#0x21
   \   00016A   F8           MOV     R0,A
   \   00016B   EF           MOV     A,R7
   \   00016C   3400         ADDC    A,#0x0
   \   00016E   F9           MOV     R1,A
   \   00016F   E8           MOV     A,R0
   \   000170   FA           MOV     R2,A
   \   000171   E9           MOV     A,R1
   \   000172   FB           MOV     R3,A
   \   000173   EC           MOV     A,R4
   \   000174   7001         JNZ     ??afBuildMSGIncoming_1
   \   000176   E4           CLR     A
   \                     ??afBuildMSGIncoming_1:
   \   000177   6032         JZ      ??afBuildMSGIncoming_2
    422            {
    423              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   000179   EE           MOV     A,R6
   \   00017A   2423         ADD     A,#0x23
   \   00017C   08           INC     R0
   \   00017D   08           INC     R0
   \   00017E   EF           MOV     A,R7
   \   00017F   3400         ADDC    A,#0x0
   \   000181   F9           MOV     R1,A
   \   000182   8A82         MOV     DPL,R2
   \   000184   8B83         MOV     DPH,R3
   \   000186   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    424              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_86:
   \   000189                ; Setup parameters for call to function osal_memcpy
   \   000189   7403         MOV     A,#0x3
   \   00018B   12....       LCALL   ?XSTACK_DISP0_8
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F5..         MOV     ?V0 + 0,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F5..         MOV     ?V0 + 1,A
   \   000195   8D..         MOV     ?V0 + 2,R5
   \   000197   78..         MOV     R0,#?V0 + 0
   \   000199   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00019C   8A82         MOV     DPL,R2
   \   00019E   12....       LCALL   ?Subroutine11 & 0xFFFF
    425            }
   \                     ??CrossCallReturnLabel_100:
   \   0001A1   12....       LCALL   ??osal_memcpy?relay
   \   0001A4   7403         MOV     A,#0x3
   \   0001A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A9   8008         SJMP    ??afBuildMSGIncoming_3
    426            else
    427            {
    428              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_2:
   \   0001AB   8A82         MOV     DPL,R2
   \   0001AD   8B83         MOV     DPH,R3
   \   0001AF   E4           CLR     A
   \   0001B0   F0           MOVX    @DPTR,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   F0           MOVX    @DPTR,A
    429            }
    430          
    431          #if defined ( MT_AF_CB_FUNC )
    432            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    433            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    434            {
    435              MT_AfIncomingMsg( (void *)MSGpkt );
    436              // Release the memory.
    437              osal_msg_deallocate( (void *)MSGpkt );
    438            }
    439            else
    440          #endif
    441            {
    442              // Send message through task message.
    443              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_3:
   \   0001B3                ; Setup parameters for call to function osal_msg_send
   \   0001B3   EE           MOV     A,R6
   \   0001B4   FA           MOV     R2,A
   \   0001B5   EF           MOV     A,R7
   \   0001B6   FB           MOV     R3,A
   \   0001B7   7401         MOV     A,#0x1
   \   0001B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BC   12....       LCALL   ?Subroutine22 & 0xFFFF
    444            }
   \                     ??CrossCallReturnLabel_36:
   \   0001BF   12....       LCALL   ?Subroutine12 & 0xFFFF
    445          }
   \                     ??CrossCallReturnLabel_18:
   \   0001C2   7405         MOV     A,#0x5
   \   0001C4   02....       LJMP    ?Subroutine37 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 4
   \   000004   85..83       MOV     DPH,?V0 + 5
   \   000007   02....       LJMP    ?Subroutine35 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 6
   \   000004   85..83       MOV     DPH,?V0 + 7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007                REQUIRE ??Subroutine42_0
   \   000007                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   A3           INC     DPTR
   \   000004   02....       LJMP    ?Subroutine35 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8B83         MOV     DPH,R3
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    446          
    447          /*********************************************************************
    448           * @fn      AF_DataRequest
    449           *
    450           * @brief   Common functionality for invoking APSDE_DataReq() for both
    451           *          SendMulti and MSG-Send.
    452           *
    453           * input parameters
    454           *
    455           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    456           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    457           * @param   cID - A valid cluster ID as specified by the Profile.
    458           * @param   len - Number of bytes of data pointed to by next param.
    459           * @param  *buf - A pointer to the data bytes to send.
    460           * @param  *transID - A pointer to a byte which can be modified and which will
    461           *                    be used as the transaction sequence number of the msg.
    462           * @param   options - Valid bit mask of Tx options.
    463           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    464           *
    465           * output parameters
    466           *
    467           * @param  *transID - Incremented by one if the return value is success.
    468           *
    469           * @return  afStatus_t - See previous definition of afStatus_... types.
    470           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    471          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    473                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    474                                     uint8 options, uint8 radius )
    475          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 2,R1
   \   000014   7434         MOV     A,#0x34
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 6,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 7,A
   \   000020   7436         MOV     A,#0x36
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 3,A
    476            pDescCB pfnDescCB;
    477            ZStatus_t stat;
    478            APSDE_DataReq_t req;
    479            afDataReqMTU_t mtu;
    480          
    481            // Verify source end point
    482            if ( srcEP == NULL )
   \   000028   EE           MOV     A,R6
   \   000029   7001         JNZ     ??AF_DataRequest_0
   \   00002B   EF           MOV     A,R7
   \                     ??AF_DataRequest_0:
   \   00002C   7005         JNZ     ??AF_DataRequest_1
    483            {
    484              return afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_2:
   \   00002E   7902         MOV     R1,#0x2
   \   000030   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    485            }
    486          
    487          #if !defined( REFLECTOR )
    488            if ( dstAddr->addrMode == afAddrNotPresent )
    489            {
    490              return afStatus_INVALID_PARAMETER;
    491            }
    492          #endif
    493          
    494            // Validate broadcasting
    495            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    496                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000033   EA           MOV     A,R2
   \   000034   2408         ADD     A,#0x8
   \   000036   F5..         MOV     ?V0 + 0,A
   \   000038   EB           MOV     A,R3
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F5..         MOV     ?V0 + 1,A
   \   00003D   85..82       MOV     DPL,?V0 + 0
   \   000040   F583         MOV     DPH,A
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   7402         MOV     A,#0x2
   \   000046   6A           XRL     A,R2
   \   000047   6005         JZ      ??AF_DataRequest_4
   \   000049   740F         MOV     A,#0xf
   \   00004B   6A           XRL     A,R2
   \   00004C   7024         JNZ     ??AF_DataRequest_5
    497            {
    498              // Check for valid broadcast values
    499              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   00004E                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00004E   85..82       MOV     DPL,?V0 + 4
   \   000051   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000054   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   000057   E9           MOV     A,R1
   \   000058   600B         JZ      ??AF_DataRequest_6
    500              {
    501                // Force mode to broadcast
    502                dstAddr->addrMode = afAddrBroadcast;
   \   00005A   740F         MOV     A,#0xf
   \   00005C   85..82       MOV     DPL,?V0 + 0
   \   00005F   85..83       MOV     DPH,?V0 + 1
   \   000062   F0           MOVX    @DPTR,A
   \   000063   801A         SJMP    ??AF_DataRequest_7
    503              }
    504              else
    505              {
    506                // Address is not a valid broadcast type
    507                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_6:
   \   000065   85..82       MOV     DPL,?V0 + 0
   \   000068   85..83       MOV     DPH,?V0 + 1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   640F         XRL     A,#0xf
   \   00006E   700F         JNZ     ??AF_DataRequest_7
   \   000070   80BC         SJMP    ??AF_DataRequest_2
    508                {
    509                  return afStatus_INVALID_PARAMETER;
    510                }
    511              }
    512            }
    513            else if ( dstAddr->addrMode != afAddr64Bit &&
    514                      dstAddr->addrMode != afAddrGroup &&
    515                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_5:
   \   000072   7403         MOV     A,#0x3
   \   000074   6A           XRL     A,R2
   \   000075   6008         JZ      ??AF_DataRequest_7
   \   000077   7401         MOV     A,#0x1
   \   000079   6A           XRL     A,R2
   \   00007A   6003         JZ      ??AF_DataRequest_7
   \   00007C   EA           MOV     A,R2
   \   00007D   70AF         JNZ     ??AF_DataRequest_2
    516            {
    517              return afStatus_INVALID_PARAMETER;
    518            }
    519            
    520            // Set destination address
    521            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C0E0         PUSH    A
   \   000082   740A         MOV     A,#0xa
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
    522            if ( dstAddr->addrMode == afAddr64Bit )
   \   00008A   85..82       MOV     DPL,?V0 + 0
   \   00008D   85..83       MOV     DPH,?V0 + 1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   6403         XRL     A,#0x3
   \   000093   7012         JNZ     ??AF_DataRequest_8
    523              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   000095                ; Setup parameters for call to function sAddrExtCpy
   \   000095   AC..         MOV     R4,?V0 + 4
   \   000097   AD..         MOV     R5,?V0 + 5
   \   000099   7402         MOV     A,#0x2
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   AA82         MOV     R2,DPL
   \   0000A0   AB83         MOV     R3,DPH
   \   0000A2   12....       LCALL   ??sAddrExtCpy?relay
   \   0000A5   8011         SJMP    ??CrossCallReturnLabel_87
    524            else
    525              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000A7   85..82       MOV     DPL,?V0 + 4
   \   0000AA   85..83       MOV     DPH,?V0 + 5
   \   0000AD   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    526            
    527            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_87:
   \   0000B8   7411         MOV     A,#0x11
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E4           CLR     A
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   F0           MOVX    @DPTR,A
    528          
    529            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000C1   90....       MOV     DPTR,#epList
   \   0000C4   8002         SJMP    ??AF_DataRequest_9
   \                     ??AF_DataRequest_10:
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \                     ??AF_DataRequest_9:
   \   0000C8   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000CB   7001         JNZ     ??AF_DataRequest_11
   \   0000CD   E9           MOV     A,R1
   \                     ??AF_DataRequest_11:
   \   0000CE   6042         JZ      ??AF_DataRequest_12
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000D7   EE           MOV     A,R6
   \   0000D8   6A           XRL     A,R2
   \   0000D9   7002         JNZ     ??AF_DataRequest_13
   \   0000DB   EF           MOV     A,R7
   \   0000DC   6B           XRL     A,R3
   \                     ??AF_DataRequest_13:
   \   0000DD   8882         MOV     DPL,R0
   \   0000DF   8983         MOV     DPH,R1
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   70E0         JNZ     ??AF_DataRequest_10
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   FC           MOV     R4,A
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FD           MOV     R5,A
   \   0000EB   EC           MOV     A,R4
   \   0000EC   7001         JNZ     ??AF_DataRequest_14
   \   0000EE   ED           MOV     A,R5
   \                     ??AF_DataRequest_14:
   \   0000EF   6021         JZ      ??AF_DataRequest_12
    530            {
    531              uint16 *pID = (uint16 *)(pfnDescCB(
    532                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   0000F1                ; Setup parameters for indirect call
   \   0000F1   8E82         MOV     DPL,R6
   \   0000F3   8F83         MOV     DPH,R7
   \   0000F5   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000F8   12....       LCALL   ?CALL_IND
    533              if ( pID )
   \   0000FB   EA           MOV     A,R2
   \   0000FC   7001         JNZ     ??AF_DataRequest_15
   \   0000FE   EB           MOV     A,R3
   \                     ??AF_DataRequest_15:
   \   0000FF   6029         JZ      ??CrossCallReturnLabel_88
    534              {
    535                req.profileID = *pID;
   \   000101   8A82         MOV     DPL,R2
   \   000103   8B83         MOV     DPH,R3
   \   000105   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    536                osal_mem_free( pID );
    537              }
    538            }
   \                     ??CrossCallReturnLabel_72:
   \   000108   7411         MOV     A,#0x11
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000110   8018         SJMP    ??CrossCallReturnLabel_88
    539            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   000112   8E82         MOV     DPL,R6
   \   000114   8F83         MOV     DPH,R7
   \   000116   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000119   7002         JNZ     ??AF_DataRequest_16
   \   00011B   E583         MOV     A,DPH
   \                     ??AF_DataRequest_16:
   \   00011D   600B         JZ      ??CrossCallReturnLabel_88
    540            {
    541              req.profileID = srcEP->simpleDesc->AppProfId;
   \   00011F   12....       LCALL   ?Subroutine19 & 0xFFFF
    542            }
   \                     ??CrossCallReturnLabel_80:
   \   000122   7411         MOV     A,#0x11
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    543          
    544            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_88:
   \   00012A   7417         MOV     A,#0x17
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   E4           CLR     A
   \   000130   F0           MOVX    @DPTR,A
   \   000131   A3           INC     DPTR
   \   000132   F0           MOVX    @DPTR,A
    545          
    546            if ( ( options & AF_ACK_REQUEST              ) &&
    547                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    548                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000133   E5..         MOV     A,?V0 + 2
   \   000135   A2E4         MOV     C,0xE0 /* A   */.4
   \   000137   501C         JNC     ??AF_DataRequest_17
   \   000139   740A         MOV     A,#0xa
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   FA           MOV     R2,A
   \   000140   740F         MOV     A,#0xf
   \   000142   6A           XRL     A,R2
   \   000143   6010         JZ      ??AF_DataRequest_17
   \   000145   7401         MOV     A,#0x1
   \   000147   6A           XRL     A,R2
   \   000148   600B         JZ      ??AF_DataRequest_17
    549            {
    550              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00014A   7417         MOV     A,#0x17
   \   00014C   12....       LCALL   ?XSTACK_DISP0_8
   \   00014F   7404         MOV     A,#0x4
   \   000151   F0           MOVX    @DPTR,A
   \   000152   A3           INC     DPTR
   \   000153   E4           CLR     A
   \   000154   F0           MOVX    @DPTR,A
    551            }
    552          
    553            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_17:
   \   000155   E5..         MOV     A,?V0 + 2
   \   000157   A2E7         MOV     C,0xE0 /* A   */.7
   \   000159   500C         JNC     ??AF_DataRequest_18
    554            {
    555              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   00015B   7417         MOV     A,#0x17
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   E0           MOVX    A,@DPTR
   \   000161   4410         ORL     A,#0x10
   \   000163   F0           MOVX    @DPTR,A
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   F0           MOVX    @DPTR,A
    556            }
    557          
    558            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_18:
   \   000167   E5..         MOV     A,?V0 + 2
   \   000169   A2E6         MOV     C,0xE0 /* A   */.6
   \   00016B   5015         JNC     ??AF_DataRequest_19
    559            {
    560              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   00016D   7417         MOV     A,#0x17
   \   00016F   12....       LCALL   ?XSTACK_DISP0_8
   \   000172   E0           MOVX    A,@DPTR
   \   000173   4401         ORL     A,#0x1
   \   000175   F0           MOVX    @DPTR,A
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F0           MOVX    @DPTR,A
    561              mtu.aps.secure = TRUE;
   \   000179   7401         MOV     A,#0x1
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   7401         MOV     A,#0x1
   \   000180   8006         SJMP    ??AF_DataRequest_20
    562            }
    563            else
    564            {
    565              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_19:
   \   000182   7401         MOV     A,#0x1
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   E4           CLR     A
   \                     ??AF_DataRequest_20:
   \   000188   F0           MOVX    @DPTR,A
    566            }
    567          
    568            mtu.kvp = FALSE;
   \   000189   E4           CLR     A
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   12....       LCALL   ?Subroutine6 & 0xFFFF
    569          
    570            req.transID       = *transID;
   \                     ??CrossCallReturnLabel_7:
   \   000193   C0E0         PUSH    A
   \   000195   7419         MOV     A,#0x19
   \   000197   12....       LCALL   ?XSTACK_DISP0_8
   \   00019A   D0E0         POP     A
   \   00019C   F0           MOVX    @DPTR,A
    571            req.srcEP         = srcEP->endPoint;
   \   00019D   8E82         MOV     DPL,R6
   \   00019F   8F83         MOV     DPH,R7
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   C0E0         PUSH    A
   \   0001A4   740B         MOV     A,#0xb
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   D0E0         POP     A
   \   0001AB   12....       LCALL   ?Subroutine0 & 0xFFFF
    572            req.dstEP         = dstAddr->endPoint;
   \                     ??CrossCallReturnLabel_57:
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   C0E0         PUSH    A
   \   0001B1   740C         MOV     A,#0xc
   \   0001B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B6   D0E0         POP     A
   \   0001B8   F0           MOVX    @DPTR,A
    573            req.clusterID     = cID;
   \   0001B9   742E         MOV     A,#0x2e
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0001C1   740F         MOV     A,#0xf
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    574            req.asduLen       = len;
   \                     ??CrossCallReturnLabel_89:
   \   0001C9   7430         MOV     A,#0x30
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0001D1   7413         MOV     A,#0x13
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    575            req.asdu          = buf;
   \                     ??CrossCallReturnLabel_90:
   \   0001D9   7432         MOV     A,#0x32
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0001E1   7415         MOV     A,#0x15
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    576            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \                     ??CrossCallReturnLabel_91:
   \   0001E9   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   C0E0         PUSH    A
   \   0001EF   741A         MOV     A,#0x1a
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   D0E0         POP     A
   \   0001F6   F0           MOVX    @DPTR,A
    577            req.radiusCounter = radius;
   \   0001F7   741B         MOV     A,#0x1b
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   E5..         MOV     A,?V0 + 3
   \   0001FE   F0           MOVX    @DPTR,A
    578          #if defined ( INTER_PAN )
    579            req.dstPanId      = dstAddr->panId;
    580          
    581            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    582            {
    583              if ( len > INTERP_DataReqMTU() )
    584              {
    585                stat = afStatus_INVALID_PARAMETER;
    586              }
    587              else
    588              {
    589                stat = INTERP_DataReq( &req );
    590              }
    591            }
    592            else
    593          #endif // INTER_PAN
    594            {
    595              if (len > afDataReqMTU( &mtu ) )
   \   0001FF                ; Setup parameters for call to function afDataReqMTU
   \   0001FF   85..82       MOV     DPL,?XSP + 0
   \   000202   85..83       MOV     DPH,?XSP + 1
   \   000205   AA82         MOV     R2,DPL
   \   000207   AB83         MOV     R3,DPH
   \   000209   12....       LCALL   ??afDataReqMTU?relay
   \   00020C   E9           MOV     A,R1
   \   00020D   FA           MOV     R2,A
   \   00020E   7430         MOV     A,#0x30
   \   000210   12....       LCALL   ?XSTACK_DISP0_8
   \   000213   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000216   C3           CLR     C
   \   000217   EA           MOV     A,R2
   \   000218   98           SUBB    A,R0
   \   000219   E4           CLR     A
   \   00021A   99           SUBB    A,R1
   \   00021B   5023         JNC     ??AF_DataRequest_21
    596              {
    597                if (apsfSendFragmented)
   \   00021D   90....       MOV     DPTR,#apsfSendFragmented
   \   000220   E0           MOVX    A,@DPTR
   \   000221   7002         JNZ     ??AF_DataRequest_22
   \   000223   A3           INC     DPTR
   \   000224   E0           MOVX    A,@DPTR
   \                     ??AF_DataRequest_22:
   \   000225   6014         JZ      ??AF_DataRequest_23
    598                {
    599                  stat = (*apsfSendFragmented)( &req );
   \   000227                ; Setup parameters for indirect call
   \   000227   7402         MOV     A,#0x2
   \   000229   12....       LCALL   ?XSTACK_DISP0_8
   \   00022C   AA82         MOV     R2,DPL
   \   00022E   AB83         MOV     R3,DPH
   \   000230   90....       MOV     DPTR,#apsfSendFragmented
   \   000233   12....       LCALL   ?Subroutine22 & 0xFFFF
    600                }
   \                     ??CrossCallReturnLabel_37:
   \   000236   12....       LCALL   ?CALL_IND
   \   000239   8011         SJMP    ??AF_DataRequest_24
    601                else
    602                {
    603                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_23:
   \   00023B   75..02       MOV     ?V0 + 0,#0x2
   \   00023E   800F         SJMP    ??AF_DataRequest_25
    604                }
    605              }
    606              else
    607              {
    608                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_21:
   \   000240                ; Setup parameters for call to function APSDE_DataReq
   \   000240   7402         MOV     A,#0x2
   \   000242   12....       LCALL   ?XSTACK_DISP0_8
   \   000245   AA82         MOV     R2,DPL
   \   000247   AB83         MOV     R3,DPH
   \   000249   12....       LCALL   ??APSDE_DataReq?relay
   \                     ??AF_DataRequest_24:
   \   00024C   E9           MOV     A,R1
   \   00024D   F5..         MOV     ?V0 + 0,A
    609              }
    610            }
    611          
    612            /*
    613             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    614             * get added to the NWK databufs. So it will not go OTA and it will not get
    615             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    616             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    617             * message with the first in line TransSeqNumber, even on a multi message.
    618             * Also note that a reflected msg will not have its confirmation generated
    619             * here.
    620             */
    621            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    622                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_25:
   \   00024F   740A         MOV     A,#0xa
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   E0           MOVX    A,@DPTR
   \   000255   6402         XRL     A,#0x2
   \   000257   702C         JNZ     ??AF_DataRequest_26
   \   000259                ; Setup parameters for call to function NLME_GetShortAddr
   \   000259   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00025C   8A..         MOV     ?V0 + 2,R2
   \   00025E   8B..         MOV     ?V0 + 3,R3
   \   000260   A8..         MOV     R0,?V0 + 2
   \   000262   A9..         MOV     R1,?V0 + 3
   \   000264   7402         MOV     A,#0x2
   \   000266   12....       LCALL   ?XSTACK_DISP0_8
   \   000269   E0           MOVX    A,@DPTR
   \   00026A   68           XRL     A,R0
   \   00026B   7003         JNZ     ??AF_DataRequest_27
   \   00026D   A3           INC     DPTR
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   69           XRL     A,R1
   \                     ??AF_DataRequest_27:
   \   000270   7013         JNZ     ??AF_DataRequest_26
    623            {
    624              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000272                ; Setup parameters for call to function afDataConfirm
   \   000272   AB..         MOV     R3,?V0 + 0
   \   000274   85..82       MOV     DPL,?V0 + 6
   \   000277   85..83       MOV     DPH,?V0 + 7
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   FA           MOV     R2,A
   \   00027C   8E82         MOV     DPL,R6
   \   00027E   8F83         MOV     DPH,R7
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F9           MOV     R1,A
   \   000282   12....       LCALL   ??afDataConfirm?relay
    625            }
    626          
    627            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_26:
   \   000285   E5..         MOV     A,?V0 + 0
   \   000287   7009         JNZ     ??AF_DataRequest_28
    628            {
    629              (*transID)++;
   \   000289   85..82       MOV     DPL,?V0 + 6
   \   00028C   85..83       MOV     DPH,?V0 + 7
   \   00028F   E0           MOVX    A,@DPTR
   \   000290   04           INC     A
   \   000291   F0           MOVX    @DPTR,A
    630            }
    631          
    632            return (afStatus_t)stat;
   \                     ??AF_DataRequest_28:
   \   000292   A9..         MOV     R1,?V0 + 0
   \                     ??AF_DataRequest_3:
   \   000294   741E         MOV     A,#0x1e
   \   000296   02....       LJMP    ?Subroutine37 & 0xFFFF
    633          }
    634          
    635          /*********************************************************************
    636           * @fn      afFindEndPointDescList
    637           *
    638           * @brief   Find the endpoint description entry from the endpoint
    639           *          number.
    640           *
    641           * @param   EndPoint - Application Endpoint to look for
    642           *
    643           * @return  the address to the endpoint/interface description entry
    644           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    646          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    647            epList_t *epSearch;
    648          
    649            // Start at the beginning
    650            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8009         SJMP    ??afFindEndPointDescList_0
    651          
    652            // Look through the list until the end
    653            while ( epSearch )
    654            {
    655              // Is there a match?
    656              if ( epSearch->epDesc->endPoint == EndPoint )
    657              {
    658                return ( epSearch );
    659              }
    660              else
    661                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \                     ??afFindEndPointDescList_0:
   \   000012   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000015   EA           MOV     A,R2
   \   000016   7001         JNZ     ??afFindEndPointDescList_2
   \   000018   EB           MOV     A,R3
   \                     ??afFindEndPointDescList_2:
   \   000019   600C         JZ      ??afFindEndPointDescList_3
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000022   69           XRL     A,R1
   \   000023   70E4         JNZ     ??afFindEndPointDescList_1
   \   000025   8004         SJMP    ??afFindEndPointDescList_4
    662            }
    663          
    664            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_3:
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDescList_4:
   \   00002B   02....       LJMP    ?Subroutine33 & 0xFFFF
    665          }
    666          
    667          /*********************************************************************
    668           * @fn      afFindEndPointDesc
    669           *
    670           * @brief   Find the endpoint description entry from the endpoint
    671           *          number.
    672           *
    673           * @param   EndPoint - Application Endpoint to look for
    674           *
    675           * @return  the address to the endpoint/interface description entry
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    678          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    679            epList_t *epSearch;
    680          
    681            // Look for the endpoint
    682            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
    683          
    684            if ( epSearch )
   \                     ??CrossCallReturnLabel_40:
   \   000008   7002         JNZ     ??afFindEndPointDesc_0
   \   00000A   E583         MOV     A,DPH
   \                     ??afFindEndPointDesc_0:
   \   00000C   6005         JZ      ??afFindEndPointDesc_1
    685              return ( epSearch->epDesc );
   \   00000E   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000011   8004         SJMP    ??afFindEndPointDesc_2
    686            else
    687              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_1:
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_2:
   \   000017   02....       LJMP    ?Subroutine36 & 0xFFFF
    688          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ??afFindEndPointDescList?relay
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET
    689          
    690          /*********************************************************************
    691           * @fn      afFindSimpleDesc
    692           *
    693           * @brief   Find the Simple Descriptor from the endpoint number.
    694           *
    695           * @param   EP - Application Endpoint to look for.
    696           *
    697           * @return  Non-zero to indicate that the descriptor memory must be freed.
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    700          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
    701            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL   ??afFindEndPointDescList?relay
   \   00000E   8A..         MOV     ?V0 + 2,R2
   \   000010   8B..         MOV     ?V0 + 3,R3
   \   000012   AC..         MOV     R4,?V0 + 2
   \   000014   AD..         MOV     R5,?V0 + 3
    702            byte rtrn = FALSE;
   \   000016   7A00         MOV     R2,#0x0
    703          
    704            if ( epItem )
   \   000018   EC           MOV     A,R4
   \   000019   7001         JNZ     ??afFindSimpleDesc_0
   \   00001B   ED           MOV     A,R5
   \                     ??afFindSimpleDesc_0:
   \   00001C   6032         JZ      ??afFindSimpleDesc_1
    705            {
    706              if ( epItem->pfnDescCB )
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000025   7002         JNZ     ??afFindSimpleDesc_2
   \   000027   E583         MOV     A,DPH
   \                     ??afFindSimpleDesc_2:
   \   000029   6014         JZ      ??afFindSimpleDesc_3
    707              {
    708                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00002B                ; Setup parameters for indirect call
   \   00002B   AA..         MOV     R2,?V0 + 0
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   12....       LCALL   ?CALL_IND
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   EA           MOV     A,R2
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   EB           MOV     A,R3
   \   00003A   F0           MOVX    @DPTR,A
    709                rtrn = TRUE;
   \   00003B   7A01         MOV     R2,#0x1
   \   00003D   8019         SJMP    ??afFindSimpleDesc_4
    710              }
    711              else
    712              {
    713                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_3:
   \   00003F   8C82         MOV     DPL,R4
   \   000041   8D83         MOV     DPH,R5
   \   000043   12....       LCALL   ?Subroutine9 & 0xFFFF
    714              }
    715            }
   \                     ??CrossCallReturnLabel_14:
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   E8           MOV     A,R0
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E9           MOV     A,R1
   \   00004E   8007         SJMP    ??afFindSimpleDesc_5
    716            else
    717            {
    718              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_1:
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   E4           CLR     A
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \                     ??afFindSimpleDesc_5:
   \   000057   F0           MOVX    @DPTR,A
    719            }
    720          
    721            return rtrn;
   \                     ??afFindSimpleDesc_4:
   \   000058   EA           MOV     A,R2
   \   000059   F9           MOV     R1,A
   \   00005A   02....       LJMP    ?Subroutine34 & 0xFFFF
    722          }
    723          
    724          /*********************************************************************
    725           * @fn      afGetDescCB
    726           *
    727           * @brief   Get the Descriptor callback function.
    728           *
    729           * @param   epDesc - pointer to the endpoint descriptor
    730           *
    731           * @return  function pointer or NULL
    732           */
    733          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    734          {
    735            epList_t *epSearch;
    736          
    737            // Start at the beginning
    738            epSearch = epList;
    739          
    740            // Look through the list until the end
    741            while ( epSearch )
    742            {
    743              // Is there a match?
    744              if ( epSearch->epDesc == epDesc )
    745              {
    746                return ( epSearch->pfnDescCB );
    747              }
    748              else
    749                epSearch = epSearch->nextDesc;  // Next entry
    750            }
    751          
    752            return ( (pDescCB)NULL );
    753          }
    754          
    755          /*********************************************************************
    756           * @fn      afDataReqMTU
    757           *
    758           * @brief   Get the Data Request MTU(Max Transport Unit).
    759           *
    760           * @param   fields - afDataReqMTU_t
    761           *
    762           * @return  uint8(MTU)
    763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    765          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    766            uint8 len;
    767            uint8 hdr;
    768          
    769            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    770            {
    771              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    772            }
    773            else
    774            {
    775              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    776            }
    777          
    778            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??APSDE_DataReqMTU?relay
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
    779          
    780            return len;
   \   000020                REQUIRE ?Subroutine38
   \   000020                ; // Fall through to label ?Subroutine38
    781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    782          
    783          /*********************************************************************
    784           * @fn      afGetMatch
    785           *
    786           * @brief   Set the allow response flag.
    787           *
    788           * @param   ep - Application Endpoint to look for
    789           * @param   action - true - allow response, false - no response
    790           *
    791           * @return  TRUE allow responses, FALSE no response
    792           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    793          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    794          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    795            epList_t *epSearch;
    796          
    797            // Look for the endpoint
    798            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
    799          
    800            if ( epSearch )
   \                     ??CrossCallReturnLabel_41:
   \   000008   7002         JNZ     ??afGetMatch_0
   \   00000A   E583         MOV     A,DPH
   \                     ??afGetMatch_0:
   \   00000C   600B         JZ      ??afGetMatch_1
    801            {
    802              if ( epSearch->flags & eEP_AllowMatch )
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5004         JNC     ??afGetMatch_1
    803                return ( TRUE );
   \   000015   7901         MOV     R1,#0x1
   \   000017   8002         SJMP    ??afGetMatch_2
    804              else
    805                return ( FALSE );
   \                     ??afGetMatch_1:
   \   000019   7900         MOV     R1,#0x0
    806            }
   \                     ??afGetMatch_2:
   \   00001B                REQUIRE ?Subroutine36
   \   00001B                ; // Fall through to label ?Subroutine36
    807            else
    808              return ( FALSE );
    809          }
    810          
    811          /*********************************************************************
    812           * @fn      afSetMatch
    813           *
    814           * @brief   Set the allow response flag.
    815           *
    816           * @param   ep - Application Endpoint to look for
    817           * @param   action - true - allow response, false - no response
    818           *
    819           * @return  TRUE if success, FALSE if endpoint not found
    820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    821          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    822          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    823            epList_t *epSearch;
    824          
    825            // Look for the endpoint
    826            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL   ??afFindEndPointDescList?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
    827          
    828            if ( epSearch )
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??afSetMatch_0
   \   000015   E9           MOV     A,R1
   \                     ??afSetMatch_0:
   \   000016   6019         JZ      ??afSetMatch_1
    829            {
    830              if ( action )
   \   000018   E8           MOV     A,R0
   \   000019   2402         ADD     A,#0x2
   \   00001B   F582         MOV     DPL,A
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000021   EE           MOV     A,R6
   \   000022   6005         JZ      ??afSetMatch_2
    831              {
    832                epSearch->flags |= eEP_AllowMatch;
   \   000024   E0           MOVX    A,@DPTR
   \   000025   D2E0         SETB    0xE0 /* A   */.0
   \   000027   8003         SJMP    ??afSetMatch_3
    833              }
    834              else
    835              {
    836                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_2:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_3:
   \   00002C   F0           MOVX    @DPTR,A
    837              }
    838              return ( TRUE );
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   8002         SJMP    ??afSetMatch_4
    839            }
    840            else
    841              return ( FALSE );
   \                     ??afSetMatch_1:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afSetMatch_4:
   \   000033   80..         SJMP    ?Subroutine36
    842          }
    843          
    844          /*********************************************************************
    845           * @fn      afNumEndPoints
    846           *
    847           * @brief   Returns the number of endpoints defined (including 0)
    848           *
    849           * @param   none
    850           *
    851           * @return  number of endpoints
    852           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    853          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    854          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    855            epList_t *epSearch;
    856            byte endpoints;
    857          
    858            // Start at the beginning
    859            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
    860            endpoints = 0;
   \   00000E   7900         MOV     R1,#0x0
   \   000010   800D         SJMP    ??afNumEndPoints_0
    861          
    862            while ( epSearch )
    863            {
    864              endpoints++;
   \                     ??afNumEndPoints_1:
   \   000012   09           INC     R1
    865              epSearch = epSearch->nextDesc;
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine43_0 & 0xFFFF
    866            }
   \                     ??CrossCallReturnLabel_99:
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \                     ??afNumEndPoints_0:
   \   00001F   E582         MOV     A,DPL
   \   000021   7002         JNZ     ??afNumEndPoints_2
   \   000023   E583         MOV     A,DPH
   \                     ??afNumEndPoints_2:
   \   000025   70EB         JNZ     ??afNumEndPoints_1
    867          
    868            return ( endpoints );
   \   000027                REQUIRE ?Subroutine33
   \   000027                ; // Fall through to label ?Subroutine33
    869          }
    870          
    871          /*********************************************************************
    872           * @fn      afEndPoints
    873           *
    874           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    875           *          Use afNumEndPoints to find out how big a buffer to supply.
    876           *
    877           * @param   epBuf - pointer to mem used
    878           *
    879           * @return  void
    880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    881          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    882          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    883            epList_t *epSearch;
    884            byte endPoint;
    885          
    886            // Start at the beginning
    887            epSearch = epList;
   \   000006   90....       MOV     DPTR,#epList
   \   000009   8028         SJMP    ??afEndPoints_0
    888          
    889            while ( epSearch )
    890            {
    891              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FD           MOV     R5,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8D82         MOV     DPL,R5
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FD           MOV     R5,A
    892          
    893              if ( !skipZDO || endPoint != 0 )
   \   000019   EC           MOV     A,R4
   \   00001A   6003         JZ      ??afEndPoints_2
   \   00001C   ED           MOV     A,R5
   \   00001D   600B         JZ      ??afEndPoints_3
    894                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00001F   ED           MOV     A,R5
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
    895          
    896              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
    897            }
   \                     ??afEndPoints_0:
   \   000033   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000036   7001         JNZ     ??afEndPoints_4
   \   000038   E9           MOV     A,R1
   \                     ??afEndPoints_4:
   \   000039   70D0         JNZ     ??afEndPoints_1
    898          }
   \   00003B   80..         SJMP    ?Subroutine33
    899          
    900          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    901          void afCopyAddress ( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    902          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    903            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000005   EC           MOV     A,R4
   \   000006   2408         ADD     A,#0x8
   \   000008   F8           MOV     R0,A
   \   000009   ED           MOV     A,R5
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    904            if ( zAddr->addrMode == Addr64Bit )
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6403         XRL     A,#0x3
   \   000026   7005         JNZ     ??afCopyAddress_0
    905              osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000028                ; Setup parameters for call to function sAddrExtCpy
   \   000028   12....       LCALL   ??sAddrExtCpy?relay
   \   00002B   800E         SJMP    ??CrossCallReturnLabel_92
    906            else
    907              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    908          }
   \                     ??CrossCallReturnLabel_92:
   \   00003B   02....       LJMP    ?Subroutine38 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegisterExtended?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afIncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afBuildMSGIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDescList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindSimpleDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataReqMTU?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afGetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afSetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afNumEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afCopyAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
    909          
    910          /*********************************************************************
    911          *********************************************************************/
    912          

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     AF_DataRequest                    1      0     55
       -> NLME_IsAddressBroadcast      0      0     92
       -> sAddrExtCpy                  0      0     92
       -> osal_mem_free                0      0     92
       -> afDataReqMTU                 0      0     92
       -> APSDE_DataReq                0      0     92
       -> NLME_GetShortAddr            0      0     92
       -> afDataConfirm                0      0     92
     afBuildMSGIncoming                1      0     62
       -> osal_msg_allocate            0      0     42
       -> afCopyAddress                0      0     42
       -> osal_memcpy                  0      0     48
       -> osal_msg_send                0      0     42
     afCopyAddress                     1      0     30
       -> sAddrExtCpy                  0      0     18
     afDataConfirm                     1      0     60
       -> afFindEndPointDesc           0      0     28
       -> osal_msg_allocate            0      0     28
       -> osal_msg_send                0      0     28
     afDataReqMTU                      0      0     55
       -> APSDE_DataReqMTU             0      0     18
     afEndPoints                       3      0      0
     afFindEndPointDesc                0      0     38
       -> afFindEndPointDescList       0      0     20
     afFindEndPointDescList            2      0     28
     afFindSimpleDesc                  0      0     12
       -> afFindEndPointDescList       0      0     24
     afGetMatch                        0      0     10
       -> afFindEndPointDescList       0      0     20
     afIncomingData                    0      0     46
       -> aps_FindGroupForEndpoint     0      0     56
       -> afFindEndPointDesc           0      0     56
       -> afFindEndPointDescList       0      0     56
       -> afFindEndPointDesc           0      0     56
       -> aps_FindGroupForEndpoint     0      0     56
       -> afFindEndPointDesc           0      0     56
       -> afFindEndPointDescList       0      0     56
       -> osal_mem_free                0      0     56
       -> afBuildMSGIncoming           0      0     76
     afInit                            2      0      0
     afNumEndPoints                    2      0      0
     afRegister                        0      0     10
       -> afFindEndPointDescList       0      0     20
       -> afRegisterExtended           0      0     20
     afRegisterExtended                1      0     22
       -> osal_mem_alloc               0      0     24
     afSetMatch                        0      0     10
       -> afFindEndPointDescList       0      0     20


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     epList                                            2
     afInit                                           14
     ?Subroutine33                                     7
     afRegisterExtended                              110
     ?Subroutine34                                     5
     ?Subroutine5                                      9
     ??Subroutine41_0                                  4
     ?Subroutine18                                     5
     ??Subroutine44_0                                  6
     afRegister                                       54
     ?Subroutine36                                     5
     afDataConfirm                                    75
     ?Subroutine31                                     8
     ?Subroutine27                                     5
     ?Subroutine12                                     9
     ?Subroutine32                                     9
     afIncomingData                                  445
     ?Subroutine37                                     8
     ?Subroutine24                                     9
     ?Subroutine16                                     1
     ??Subroutine39_0                                  6
     ?Subroutine15                                     3
     ?Subroutine35                                     5
     ?Subroutine13                                     8
     ?Subroutine10                                    21
     ?Subroutine7                                     18
     ?Subroutine1                                     13
     ??Subroutine40_0                                  9
     ?Subroutine29                                     5
     ?Subroutine14                                     4
     ?Subroutine30                                     4
     ?Subroutine21                                     9
     ?Subroutine8                                     10
     ??Subroutine42_0                                  6
     ?Subroutine3                                      9
     ??Subroutine43_0                                  6
     ?Subroutine9                                      7
     ?Subroutine28                                     3
     afBuildMSGIncoming                              455
     ?Subroutine20                                     4
     ?Subroutine17                                    10
     ?Subroutine2                                      4
     ?Subroutine26                                    10
     ?Subroutine22                                     4
     ?Subroutine19                                     1
     ?Subroutine6                                      9
     ?Subroutine4                                      7
     ?Subroutine0                                      7
     ?Subroutine11                                     2
     ?Subroutine23                                     3
     ??Subroutine45_0                                  5
     AF_DataRequestDiscoverRoute                       1
     AF_DataRequest                                  665
     afFindEndPointDescList                           46
     afFindEndPointDesc                               26
     ?Subroutine25                                    10
     afFindSimpleDesc                                 93
     afDataReqMTU                                     32
     ?Subroutine38                                     5
     afGetMatch                                       27
     afSetMatch                                       53
     afNumEndPoints                                   39
     afEndPoints                                      61
     afCopyAddress                                    62
     ?<Initializer for AF_DataRequestDiscoverRoute>    1
     ??afInit?relay                                    6
     ??afRegisterExtended?relay                        6
     ??afRegister?relay                                6
     ??afDataConfirm?relay                             6
     ??afIncomingData?relay                            6
     ??afBuildMSGIncoming?relay                        6
     ??AF_DataRequest?relay                            6
     ??afFindEndPointDescList?relay                    6
     ??afFindEndPointDesc?relay                        6
     ??afFindSimpleDesc?relay                          6
     ??afDataReqMTU?relay                              6
     ??afGetMatch?relay                                6
     ??afSetMatch?relay                                6
     ??afNumEndPoints?relay                            6
     ??afEndPoints?relay                               6
     ??afCopyAddress?relay                             6

 
 2 574 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 2 671 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
