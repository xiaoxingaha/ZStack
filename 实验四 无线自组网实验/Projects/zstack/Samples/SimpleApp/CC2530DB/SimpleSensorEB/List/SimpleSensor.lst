###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                01/Dec/2011  14:24:32 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\S #
#                          ource\SimpleSensor.c                               #
#    Command line       =  -f F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg    #
#                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f    #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\S #
#                          ource\SimpleSensor.c -D NWK_AUTO_POLL -D           #
#                          HOLD_AUTO_START -D REFLECTOR -D POWER_SAVING -D    #
#                          NV_INIT -D xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK    #
#                          -D xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                #
#                          xMT_SAPI_CB_FUNC -lC F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹ #
#                          âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-C #
#                          C2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstac #
#                          k\Samples\SimpleApp\CC2530DB\SimpleSensorEB\List\  #
#                          -lA F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ #
#                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0 #
#                          _Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleA #
#                          pp\CC2530DB\SimpleSensorEB\List\ --diag_suppress   #
#                          Pe001,Pa010 -o F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10 #
#                          __CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530- #
#                          2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samp #
#                          les\SimpleApp\CC2530DB\SimpleSensorEB\Obj\ -e      #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼ #
#                          þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack #
#                          -CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zst #
#                          ack\Samples\SimpleApp\CC2530DB\ -I                 #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\SOURCE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ #
#                          ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack- #
#                          CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zsta #
#                          ck\Samples\SimpleApp\CC2530DB\..\..\..\ZMAIN\TI253 #
#                          0DB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC253 #
#                          0EB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC #
#                          2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3. #
#                          0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\ #
#                          SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ #
#                          INCLUDE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__C #
#                          C2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3 #
#                          .0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples #
#                          \SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC #
#                          K\AF\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N #
#                          WK\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC #
#                          \ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³Ì #
#                          Ðò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4. #
#                          0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simple #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ #
#                           -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ #
#                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0 #
#                          _Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\   #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\    #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\  #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDAT #
#                          A\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD #
#                          E\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L #
#                          EVEL\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW #
#                          _LEVEL\srf04\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\ #
#                          10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC253 #
#                          0-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Sa #
#                          mples\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS #
#                          \MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\" -I "C:\Program       #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleSensorEB\List\SimpleSensor.lst       #
#    Object file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleSensorEB\Obj\SimpleSensor.r51        #
#                                                                             #
#                                                                             #
###############################################################################

F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\Source\SimpleSensor.c
      1          
      2          /**************************************************************************************************
      3            Filename:       SimpleSensor.c
      4            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      5            Revision:       $Revision: 19453 $
      6          
      7            Description:    Sample application for a simple sensor utilizing the Simple API.
      8          
      9          
     10            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /******************************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "sapi.h"
     48          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1
     49          #include "hal_led.h"
     50          #include "hal_adc.h"
     51          #include "hal_mcu.h"
     52          #include "SimpleApp.h"
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          // Application States
     59          #define APP_INIT                           0    // Initial state
     60          #define APP_START                          1    // Sensor has joined network
     61          #define APP_BOUND                          2    // Sensor is bound to collector
     62          
     63          // Application osal event identifiers
     64          // Bit mask of events ( from 0x0000 to 0x00FF )
     65          #define MY_START_EVT                0x0001
     66          #define MY_REPORT_TEMP_EVT          0x0002
     67          #define MY_REPORT_BATT_EVT          0x0004
     68          #define MY_FIND_COLLECTOR_EVT       0x0008
     69          
     70          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
     71          #if defined (HAL_MCU_CC2430) || defined (HAL_MCU_CC2530)
     72          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     73          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     74          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     75          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     76          #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
     77          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     78          #endif //HAL_MCU_CC2430 || HAL_MCU_CC2530
     79          
     80          /*********************************************************************
     81           * TYPEDEFS
     82           */
     83          
     84          /*********************************************************************
     85           * LOCAL VARIABLES
     86           */
     87          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          static uint8 myAppState = APP_INIT;
   \                     myAppState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     89          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          static uint16 myStartRetryDelay = 10000;      // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     91          static uint16 myTempReportPeriod = 5000;     // milliseconds
   \                     myTempReportPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myTempReportPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          static uint16 myBatteryCheckPeriod = 21000;   // milliseconds
   \                     myBatteryCheckPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBatteryCheckPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     93          static uint16 myBindRetryDelay = 10000;       // milliseconds
   \                     myBindRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBindRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I
     94          /*********************************************************************
     95           * GLOBAL VARIABLES
     96           */
     97          
     98          // Inputs and Outputs for Sensor device
     99          #define NUM_OUT_CMD_SENSOR                1
    100          #define NUM_IN_CMD_SENSOR                 0
    101          
    102          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    103          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   0200         DW 2
    104          {
    105            SENSOR_REPORT_CMD_ID
    106          };
    107          
    108          
    109          #define TEMP_REPORT     0x01
    110          #define BATTERY_REPORT 0x02
    111          
    112          
    113          // Define SimpleDescriptor for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    114          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   100F0300     DW 3856, 3
   \   000005   0100         DB 1, 0
   \   000007   0000         DW 0H
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    115          {
    116            MY_ENDPOINT_ID,             //  Endpoint
    117            MY_PROFILE_ID,              //  Profile ID
    118            DEV_ID_SENSOR,              //  Device ID
    119            DEVICE_VERSION_SENSOR,      //  Device Version
    120            0,                          //  Reserved
    121            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
    122            (cId_t *) NULL,             //  Input Command List
    123            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
    124            (cId_t *) zb_OutCmdList     //  Output Command List
    125          };
    126          
    127          
    128          /*********************************************************************
    129           * LOCAL FUNCTIONS
    130           */
    131          static void myApp_StartReporting( void );
    132          static void myApp_StopReporting( void );
    133          
    134          static uint8 myApp_ReadTemperature( void );
    135          static uint8 myApp_ReadBattery( void );
    136          
    137          /*****************************************************************************
    138           * @fn          zb_HandleOsalEvent
    139           *
    140           * @brief       The zb_HandleOsalEvent function is called by the operating
    141           *              system when a task event is set
    142           *
    143           * @param       event - Bitmask containing the events that have been set
    144           *
    145           * @return      none
    146           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    148          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    149            uint8 pData[2];
    150          
    151            if ( event & MY_START_EVT )
   \   00000C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000E   5003         JNC     ??zb_HandleOsalEvent_0
    152            {
    153              zb_StartRequest();
   \   000010                ; Setup parameters for call to function zb_StartRequest
   \   000010   12....       LCALL   ??zb_StartRequest?relay
    154            }
    155            if ( event & MY_REPORT_TEMP_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000013   EE           MOV     A,R6
   \   000014   5402         ANL     A,#0x2
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??CrossCallReturnLabel_0 & 0xFFFF
    156            {
    157              // Read and report temperature value
    158              pData[0] = TEMP_REPORT;
   \   00001B   7401         MOV     A,#0x1
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   F0           MOVX    @DPTR,A
    159              pData[1] =  myApp_ReadTemperature();
   \   000024   C28D         CLR     0x88.5
   \   000026   75B63E       MOV     0xb6,#0x3e
   \                     ??zb_HandleOsalEvent_1:
   \   000029   A28D         MOV     C,0x88.5
   \   00002B   50FC         JNC     ??zb_HandleOsalEvent_1
   \   00002D   AABA         MOV     R2,0xba
   \   00002F   8A82         MOV     DPL,R2
   \   000031   A882         MOV     R0,DPL
   \   000033   E5BB         MOV     A,0xbb
   \   000035   F9           MOV     R1,A
   \   000036   C3           CLR     C
   \   000037   E8           MOV     A,R0
   \   000038   9426         SUBB    A,#0x26
   \   00003A   E9           MOV     A,R1
   \   00003B   9414         SUBB    A,#0x14
   \   00003D   5004         JNC     ??zb_HandleOsalEvent_2
   \   00003F   7826         MOV     R0,#0x26
   \   000041   7914         MOV     R1,#0x14
   \                     ??zb_HandleOsalEvent_2:
   \   000043   E8           MOV     A,R0
   \   000044   24DA         ADD     A,#-0x26
   \   000046   F8           MOV     R0,A
   \   000047   E9           MOV     A,R1
   \   000048   34EB         ADDC    A,#-0x15
   \   00004A   F9           MOV     R1,A
   \   00004B   C3           CLR     C
   \   00004C   E8           MOV     A,R0
   \   00004D   946B         SUBB    A,#0x6b
   \   00004F   E9           MOV     A,R1
   \   000050   9405         SUBB    A,#0x5
   \   000052   4004         JC      ??zb_HandleOsalEvent_3
   \   000054   786A         MOV     R0,#0x6a
   \   000056   7905         MOV     R1,#0x5
   \                     ??zb_HandleOsalEvent_3:
   \   000058   7A0E         MOV     R2,#0xe
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   12....       LCALL   ?US_DIV_MOD
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E8           MOV     A,R0
   \   000065   F0           MOVX    @DPTR,A
    160              zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, 2, pData, 0, AF_ACK_REQUEST, 0 );
   \   000066                ; Setup parameters for call to function zb_SendDataRequest
   \   000066   75..00       MOV     ?V0 + 0,#0x0
   \   000069   78..         MOV     R0,#?V0 + 0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006E   75..10       MOV     ?V0 + 0,#0x10
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000076   75..00       MOV     ?V0 + 0,#0x0
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   7403         MOV     A,#0x3
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   8582..       MOV     ?V0 + 0,DPL
   \   000086   8583..       MOV     ?V0 + 1,DPH
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   7902         MOV     R1,#0x2
   \   000090   7C02         MOV     R4,#0x2
   \   000092   7D00         MOV     R5,#0x0
   \   000094   7AFE         MOV     R2,#-0x2
   \   000096   7BFF         MOV     R3,#-0x1
   \   000098   12....       LCALL   ??zb_SendDataRequest?relay
   \   00009B   7405         MOV     A,#0x5
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
    161              osal_start_timerEx( sapi_TaskID, MY_REPORT_TEMP_EVT, myTempReportPeriod );
   \   0000A0                ; Setup parameters for call to function osal_start_timerEx
   \   0000A0   12....       LCALL   ?Subroutine0 & 0xFFFF
    162            }
    163          
    164            if ( event & MY_REPORT_BATT_EVT )
   \                     ??CrossCallReturnLabel_0:
   \   0000A3   EE           MOV     A,R6
   \   0000A4   5404         ANL     A,#0x4
   \   0000A6   7003         JNZ     $+5
   \   0000A8   02....       LJMP    ??CrossCallReturnLabel_2 & 0xFFFF
    165            {
    166              // Read battery value
    167              // If battery level low, report battery value
    168              pData[0] = BATTERY_REPORT;
   \   0000AB   7402         MOV     A,#0x2
   \   0000AD   85..82       MOV     DPL,?XSP + 0
   \   0000B0   85..83       MOV     DPH,?XSP + 1
   \   0000B3   F0           MOVX    @DPTR,A
    169              pData[1] =  myApp_ReadBattery();
   \   0000B4   C28D         CLR     0x88.5
   \   0000B6   75B61F       MOV     0xb6,#0x1f
   \                     ??zb_HandleOsalEvent_4:
   \   0000B9   A28D         MOV     C,0x88.5
   \   0000BB   50FC         JNC     ??zb_HandleOsalEvent_4
   \   0000BD   AABA         MOV     R2,0xba
   \   0000BF   8A82         MOV     DPL,R2
   \   0000C1   8582..       MOV     ?V0 + 4,DPL
   \   0000C4   E5BB         MOV     A,0xbb
   \   0000C6   F5..         MOV     ?V0 + 5,A
   \   0000C8   7406         MOV     A,#0x6
   \   0000CA   78..         MOV     R0,#?V0 + 4
   \   0000CC   12....       LCALL   ?US_SHR
   \   0000CF   F5..         MOV     ?V0 + 6,A
   \   0000D1   F5..         MOV     ?V0 + 7,A
   \   0000D3   78..         MOV     R0,#?V0 + 4
   \   0000D5   12....       LCALL   ?UL_TO_FLT
   \   0000D8   90....       MOV     DPTR,#__Constant_42160000
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?L_MOV_X
   \   0000E0   78..         MOV     R0,#?V0 + 4
   \   0000E2   79..         MOV     R1,#?V0 + 0
   \   0000E4   12....       LCALL   ?FLT_MUL
   \   0000E7   78..         MOV     R0,#?V0 + 4
   \   0000E9   12....       LCALL   ?FLT_TO_L
   \   0000EC   7409         MOV     A,#0x9
   \   0000EE   78..         MOV     R0,#?V0 + 4
   \   0000F0   12....       LCALL   ?US_SHR
   \   0000F3   7401         MOV     A,#0x1
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   E5..         MOV     A,?V0 + 4
   \   0000FA   F0           MOVX    @DPTR,A
    170              zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, 2, pData, 0, AF_ACK_REQUEST, 0 );
   \   0000FB                ; Setup parameters for call to function zb_SendDataRequest
   \   0000FB   75..00       MOV     ?V0 + 0,#0x0
   \   0000FE   78..         MOV     R0,#?V0 + 0
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000103   75..10       MOV     ?V0 + 0,#0x10
   \   000106   78..         MOV     R0,#?V0 + 0
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010B   75..00       MOV     ?V0 + 0,#0x0
   \   00010E   78..         MOV     R0,#?V0 + 0
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000113   7403         MOV     A,#0x3
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   8582..       MOV     ?V0 + 0,DPL
   \   00011B   8583..       MOV     ?V0 + 1,DPH
   \   00011E   78..         MOV     R0,#?V0 + 0
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000123   7902         MOV     R1,#0x2
   \   000125   7C02         MOV     R4,#0x2
   \   000127   7D00         MOV     R5,#0x0
   \   000129   7AFE         MOV     R2,#-0x2
   \   00012B   7BFF         MOV     R3,#-0x1
   \   00012D   12....       LCALL   ??zb_SendDataRequest?relay
   \   000130   7405         MOV     A,#0x5
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
    171              osal_start_timerEx( sapi_TaskID, MY_REPORT_BATT_EVT, myBatteryCheckPeriod );
   \   000135                ; Setup parameters for call to function osal_start_timerEx
   \   000135   12....       LCALL   ?Subroutine1 & 0xFFFF
    172            }
    173          
    174            if ( event & MY_FIND_COLLECTOR_EVT )
   \                     ??CrossCallReturnLabel_2:
   \   000138   EE           MOV     A,R6
   \   000139   5408         ANL     A,#0x8
   \   00013B   600D         JZ      ??zb_HandleOsalEvent_5
    175            {
    176              // Find and bind to a collector device
    177              zb_BindDevice( TRUE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
   \   00013D                ; Setup parameters for call to function zb_BindDevice
   \   00013D   7C00         MOV     R4,#0x0
   \   00013F   7D00         MOV     R5,#0x0
   \   000141   7A02         MOV     R2,#0x2
   \   000143   7B00         MOV     R3,#0x0
   \   000145   7901         MOV     R1,#0x1
   \   000147   12....       LCALL   ??zb_BindDevice?relay
    178            }
    179          
    180          }
   \                     ??zb_HandleOsalEvent_5:
   \   00014A   7402         MOV     A,#0x2
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014F   7F08         MOV     R7,#0x8
   \   000151   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000154                REQUIRE _A_TCON
   \   000154                REQUIRE ADCCON3
   \   000154                REQUIRE ADCL
   \   000154                REQUIRE ADCH

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#myBatteryCheckPeriod
   \   000003   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000006   7A04         MOV     R2,#0x4
   \   000008   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#sapi_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#myTempReportPeriod
   \   000003   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000006   7A02         MOV     R2,#0x2
   \   000008   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET
    181          /*********************************************************************
    182           * @fn      zb_HandleKeys
    183           *
    184           * @brief   Handles all key events for this device.
    185           *
    186           * @param   shift - true if in shift/alt.
    187           * @param   keys - bit field for key events. Valid entries:
    188           *                 EVAL_SW4
    189           *                 EVAL_SW3
    190           *                 EVAL_SW2
    191           *                 EVAL_SW1
    192           *
    193           * @return  none
    194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    196          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    197            uint8 startOptions;
    198            uint8 logicalType;
    199          
    200              if ( keys & HAL_KEY_SW_6 )
   \   000009   EA           MOV     A,R2
   \   00000A   A2E5         MOV     C,0xE0 /* A   */.5
   \   00000C   5041         JNC     ??zb_HandleKeys_0
    201              {
    202                if ( myAppState == APP_INIT )
   \   00000E   90....       MOV     DPTR,#myAppState
   \   000011   E0           MOVX    A,@DPTR
   \   000012   703B         JNZ     ??zb_HandleKeys_0
    203                {
    204                  // In the init state, keys are used to indicate the logical mode.
    205                  // The Sensor device is always an end-device
    206                  logicalType = ZG_DEVICETYPE_ENDDEVICE;
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7402         MOV     A,#0x2
   \   00001B   F0           MOVX    @DPTR,A
    207                  zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
   \   00001C                ; Setup parameters for call to function zb_WriteConfiguration
   \   00001C   AC82         MOV     R4,DPL
   \   00001E   AD83         MOV     R5,DPH
   \   000020   7A01         MOV     R2,#0x1
   \   000022   7987         MOV     R1,#-0x79
   \   000024   12....       LCALL   ??zb_WriteConfiguration?relay
    208          
    209                  // Do more configuration if necessary and then restart device with auto-start bit set
    210          
    211                  zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   000027                ; Setup parameters for call to function zb_ReadConfiguration
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AC82         MOV     R4,DPL
   \   00002F   AD83         MOV     R5,DPH
   \   000031   7A01         MOV     R2,#0x1
   \   000033   7903         MOV     R1,#0x3
   \   000035   12....       LCALL   ??zb_ReadConfiguration?relay
    212                  startOptions = ZCD_STARTOPT_AUTO_START;
   \   000038   7404         MOV     A,#0x4
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   F0           MOVX    @DPTR,A
    213                  zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   000041                ; Setup parameters for call to function zb_WriteConfiguration
   \   000041   AC82         MOV     R4,DPL
   \   000043   AD83         MOV     R5,DPH
   \   000045   7A01         MOV     R2,#0x1
   \   000047   7903         MOV     R1,#0x3
   \   000049   12....       LCALL   ??zb_WriteConfiguration?relay
    214                  zb_SystemReset();
   \   00004C                ; Setup parameters for call to function zb_SystemReset
   \   00004C   12....       LCALL   ??zb_SystemReset?relay
    215          
    216                }
    217              }
    218          }
   \                     ??zb_HandleKeys_0:
   \   00004F   7402         MOV     A,#0x2
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   80..         SJMP    ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    219          /******************************************************************************
    220           * @fn          zb_StartConfirm
    221           *
    222           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    223           *              after a start request operation completes
    224           *
    225           * @param       status - The status of the start operation.  Status of
    226           *                       ZB_SUCCESS indicates the start operation completed
    227           *                       successfully.  Else the status is an error code.
    228           *
    229           * @return      none
    230           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    231          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    232          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    233            if ( status == ZB_SUCCESS )
   \   000004   E9           MOV     A,R1
   \   000005   700D         JNZ     ??zb_StartConfirm_0
    234            {
    235              myAppState = APP_START;
   \   000007   7401         MOV     A,#0x1
   \   000009   90....       MOV     DPTR,#myAppState
   \   00000C   F0           MOVX    @DPTR,A
    236          
    237              // Set event to bind to a collector
    238              osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   12....       LCALL   ?Subroutine3 & 0xFFFF
    239            }
   \                     ??CrossCallReturnLabel_13:
   \   000010   7A08         MOV     R2,#0x8
   \   000012   8008         SJMP    ??zb_StartConfirm_1
    240            else
    241            {
    242              // Try joining again later with a delay
    243              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   000014                ; Setup parameters for call to function osal_start_timerEx
   \   000014   90....       MOV     DPTR,#myStartRetryDelay
   \   000017   12....       LCALL   ??Subroutine7_0 & 0xFFFF
    244            }
   \                     ??CrossCallReturnLabel_10:
   \   00001A   7A01         MOV     R2,#0x1
   \                     ??zb_StartConfirm_1:
   \   00001C   12....       LCALL   ??Subroutine6_0 & 0xFFFF
    245          }
   \                     ??CrossCallReturnLabel_6:
   \   00001F   80..         SJMP    ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#myBindRetryDelay
   \   000003                REQUIRE ??Subroutine7_0
   \   000003                ; // Fall through to label ??Subroutine7_0
    246          /******************************************************************************
    247           * @fn          zb_SendDataConfirm
    248           *
    249           * @brief       The zb_SendDataConfirm callback function is called by the
    250           *              ZigBee after a send data operation completes
    251           *
    252           * @param       handle - The handle identifying the data transmission.
    253           *              status - The status of the operation.
    254           *
    255           * @return      none
    256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    258          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    259            (void)handle; // Intentionally unreferenced parameter
    260            
    261            if ( status != ZSuccess )
   \   000004   EA           MOV     A,R2
   \   000005   6039         JZ      ??CrossCallReturnLabel_4
    262            {
    263              // Remove bindings to the existing collector
    264              zb_BindDevice( FALSE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
   \   000007                ; Setup parameters for call to function zb_BindDevice
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   \   00000B   7A02         MOV     R2,#0x2
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   7900         MOV     R1,#0x0
   \   000011   12....       LCALL   ??zb_BindDevice?relay
    265          
    266              myAppState = APP_START;
   \   000014   7401         MOV     A,#0x1
   \   000016   90....       MOV     DPTR,#myAppState
   \   000019   F0           MOVX    @DPTR,A
    267              myApp_StopReporting();
   \   00001A                ; Setup parameters for call to function osal_stop_timerEx
   \   00001A   7A02         MOV     R2,#0x2
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   90....       MOV     DPTR,#sapi_TaskID
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   12....       LCALL   ??osal_stop_timerEx?relay
   \   000026                ; Setup parameters for call to function osal_stop_timerEx
   \   000026   7A04         MOV     R2,#0x4
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   90....       MOV     DPTR,#sapi_TaskID
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??osal_stop_timerEx?relay
   \   000032                ; Setup parameters for call to function HalLedSet
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7901         MOV     R1,#0x1
   \   000036   12....       LCALL   ??HalLedSet?relay
    268          
    269              // Start process of finding new collector with minimal delay
    270              osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, 1 );
   \   000039                ; Setup parameters for call to function osal_start_timerEx
   \   000039   7C01         MOV     R4,#0x1
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   12....       LCALL   ?Subroutine2 & 0xFFFF
    271            }
    272            else
    273            {
    274              // send data ??
    275            }
    276          }
   \                     ??CrossCallReturnLabel_4:
   \   000040                REQUIRE ?Subroutine5
   \   000040                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A08         MOV     R2,#0x8
   \   000002                REQUIRE ??Subroutine6_0
   \   000002                ; // Fall through to label ??Subroutine6_0
    277          /******************************************************************************
    278           * @fn          zb_BindConfirm
    279           *
    280           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    281           *              after a bind operation completes.
    282           *
    283           * @param       commandId - The command ID of the binding being confirmed.
    284           *              status - The status of the bind operation.
    285           *
    286           * @return      none
    287           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    289          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    290            (void)commandId;
    291            
    292            if ( ( status == ZB_SUCCESS ) && ( myAppState == APP_START ) )
   \   000004   E9           MOV     A,R1
   \   000005   701A         JNZ     ??zb_BindConfirm_0
   \   000007   90....       MOV     DPTR,#myAppState
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6401         XRL     A,#0x1
   \   00000D   7012         JNZ     ??zb_BindConfirm_0
    293            {
    294              myAppState = APP_BOUND;
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    295          
    296              //Start reporting sensor values
    297              myApp_StartReporting();
   \   000012                ; Setup parameters for call to function osal_start_timerEx
   \   000012   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000015                ; Setup parameters for call to function osal_start_timerEx
   \   000015   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000018                ; Setup parameters for call to function HalLedSet
   \   000018   7A01         MOV     R2,#0x1
   \   00001A   7901         MOV     R1,#0x1
   \   00001C   12....       LCALL   ??HalLedSet?relay
    298            }
   \   00001F   8006         SJMP    ??CrossCallReturnLabel_5
    299            else
    300            {
    301              // Continue to discover a collector
    302              osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \                     ??zb_BindConfirm_0:
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   12....       LCALL   ?Subroutine3 & 0xFFFF
    303            }
   \                     ??CrossCallReturnLabel_14:
   \   000024   12....       LCALL   ?Subroutine2 & 0xFFFF
    304          }
   \                     ??CrossCallReturnLabel_5:
   \   000027   80..         SJMP    ?Subroutine5
    305          /******************************************************************************
    306           * @fn          zb_AllowBindConfirm
    307           *
    308           * @brief       Indicates when another device attempted to bind to this device
    309           *
    310           * @param
    311           *
    312           * @return      none
    313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    314          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    315          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    316            (void)source; 
    317          }
   \   000000   02....       LJMP    ?BRET
    318          /******************************************************************************
    319           * @fn          zb_FindDeviceConfirm
    320           *
    321           * @brief       The zb_FindDeviceConfirm callback function is called by the
    322           *              ZigBee stack when a find device operation completes.
    323           *
    324           * @param       searchType - The type of search that was performed.
    325           *              searchKey - Value that the search was executed on.
    326           *              result - The result of the search.
    327           *
    328           * @return      none
    329           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    330          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    331          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    332            // Add your code here and remove the "(void)" lines.
    333            (void)searchType;
    334            (void)searchKey;
    335            (void)result;
    336          }
   \   000000   02....       LJMP    ?BRET
    337          
    338          /******************************************************************************
    339           * @fn          zb_ReceiveDataIndication
    340           *
    341           * @brief       The zb_ReceiveDataIndication callback function is called
    342           *              asynchronously by the ZigBee stack to notify the application
    343           *              when data is received from a peer device.
    344           *
    345           * @param       source - The short address of the peer device that sent the data
    346           *              command - The commandId associated with the data
    347           *              len - The number of bytes in the pData parameter
    348           *              pData - The data sent by the peer device
    349           *
    350           * @return      none
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    353          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    354            // Add your code here and remove the "(void)" lines.
    355            (void)source;
    356            (void)command;
    357            (void)len;
    358            (void)pData;
    359          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   1027         DW 10000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myTempReportPeriod>`:
   \   000000   8813         DW 5000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBatteryCheckPeriod>`:
   \   000000   0852         DW 21000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBindRetryDelay>`:
   \   000000   1027         DW 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42160000:
   \   000000   00001642     DD 42160000H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleOsalEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_StartConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_SendDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_BindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_AllowBindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_FindDeviceConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_ReceiveDataIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication
    360          /******************************************************************************
    361           * @fn          my_StartReporting
    362           *
    363           * @brief       Starts the process to periodically report sensor readings
    364           *
    365           * @param
    366           *
    367           * @return      none
    368           */
    369          void myApp_StartReporting( void )
    370          {
    371            osal_start_timerEx( sapi_TaskID, MY_REPORT_TEMP_EVT, myTempReportPeriod );
    372            osal_start_timerEx( sapi_TaskID, MY_REPORT_BATT_EVT, myBatteryCheckPeriod );
    373            HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
    374          
    375          }
    376          /******************************************************************************
    377           * @fn          my_StopReporting
    378           *
    379           * @brief       Stops the process to periodically report sensor readings
    380           *
    381           * @param
    382           *
    383           * @return      none
    384           */
    385          void myApp_StopReporting( void )
    386          {
    387            osal_stop_timerEx( sapi_TaskID, MY_REPORT_TEMP_EVT );
    388            osal_stop_timerEx( sapi_TaskID, MY_REPORT_BATT_EVT );
    389            HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
    390          }
    391          /******************************************************************************
    392           * @fn          myApp_ReadBattery
    393           *
    394           * @brief       Reports battery sensor reading
    395           *
    396           * @param
    397           *
    398           * @return
    399           ******************************************************************************/
    400          uint8 myApp_ReadBattery( void )
    401          {
    402          
    403          #if defined (HAL_MCU_CC2430) || defined (HAL_MCU_CC2530)
    404          
    405            uint16 value;
    406          
    407            /* Clear ADC interrupt flag */
    408            ADCIF = 0;
    409          
    410            ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_128 | HAL_ADC_CHN_VDD3);
    411          
    412            /* Wait for the conversion to finish */
    413            while ( !ADCIF );
    414          
    415            /* Get the result */
    416            value = ADCL;
    417            value |= ((uint16) ADCH) << 8;
    418          
    419            /*
    420             * value now contains measurement of Vdd/3
    421             * 0 indicates 0V and 32767 indicates 1.25V
    422             * voltage = (value*3*1.25)/32767 volts
    423             * we will multiply by this by 10 to allow units of 0.1 volts
    424             */
    425          
    426            value = value >> 6;   // divide first by 2^6
    427            value = (uint16)(value * 37.5);
    428            value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
    429          
    430            return value;
    431          
    432          #endif    // CC2430 or CC2530
    433          
    434          #if defined HAL_MCU_MSP430
    435          
    436            uint16 value;
    437          
    438          /*
    439            There are more than MSP430 board now. Idealy, ADC read should be called
    440          */
    441          #if defined (HAL_BOARD_F5438)
    442          
    443            value = HalAdcRead (HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
    444            value = value * 50;
    445            value = value / 4096;
    446          
    447          #else
    448          
    449            ADC12CTL0 = ADC12ON+SHT0_2+REFON;             // Turn on and set up ADC12
    450            ADC12CTL1 = SHP;                              // Use sampling timer
    451            ADC12MCTL0 = SREF_1+INCH_11;                  // Vr+=Vref+
    452          
    453            ADC12CTL0 |= ENC | ADC12SC;                   // Start conversion
    454            while ((ADC12IFG & BIT0)==0);
    455          
    456            value = ADC12MEM0;
    457          
    458            /*
    459             * value now contains measurement of AVcc/2
    460             * value is in range 0 to 4095 indicating voltage from 0 to 1.5V
    461             * voltage = (value*2*1.5)/4095 volts
    462             * we will multiply by this by 10 to allow units of 0.1 volts
    463             */
    464          
    465            value = value >> 1;     // value is now in range of 0 to 2048
    466            value = value * 30;
    467            value = value >> 11;
    468          
    469          #endif
    470          
    471            return ( value );
    472          
    473          #endif // MSP430
    474          
    475          #if defined HAL_MCU_AVR
    476          
    477            // If platform doesnt support a battery sensor, just return random value
    478          
    479            uint8 value;
    480            value = 20 + ( osal_rand() & 0x000F );
    481            return ( value );
    482          
    483          #endif  // AVR
    484          
    485          }
    486          /******************************************************************************
    487           * @fn          myApp_ReadTemperature
    488           *
    489           * @brief       Reports temperature sensor reading
    490           *
    491           * @param
    492           *
    493           * @return
    494           ******************************************************************************/
    495          uint8 myApp_ReadTemperature( void )
    496          {
    497          
    498          #if defined (HAL_MCU_CC2430) || defined (HAL_MCU_CC2530)
    499          
    500            uint16 value;
    501          
    502            /* Clear ADC interrupt flag */
    503            ADCIF = 0;
    504          
    505            ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_512 | HAL_ADC_CHN_TEMP);
    506          
    507            /* Wait for the conversion to finish */
    508            while ( !ADCIF );
    509          
    510            /* Get the result */
    511            value = ADCL;
    512            value |= ((uint16) ADCH) << 8;
    513          
    514            /*
    515             * value ranges from 0 to 0x8000 indicating 0V and 1.25V
    516             * VOLTAGE_AT_TEMP_ZERO = 0.743 V = 19477
    517             * TEMP_COEFFICIENT = 0.0024 V/C = 62.9 /C
    518             * These parameters are typical values and need to be calibrated
    519             * See the datasheet for the appropriate chip for more details
    520             * also, the math below may not be very accurate
    521             */
    522          #if defined (HAL_MCU_CC2430)
    523            #define VOLTAGE_AT_TEMP_ZERO      19477   // 0.743 V
    524            #define TEMP_COEFFICIENT          62.9    // 0.0024 V/C
    525          #elif defined (HAL_MCU_CC2530)
    526              /* Assume ADC = 5158 at 0C and ADC = 15/C */
    527            #define VOLTAGE_AT_TEMP_ZERO      5158
    528            #define TEMP_COEFFICIENT          14
    529          #endif
    530          
    531            // limit min temp to 0 C
    532            if ( value < VOLTAGE_AT_TEMP_ZERO )
    533              value = VOLTAGE_AT_TEMP_ZERO;
    534          
    535            value = value - VOLTAGE_AT_TEMP_ZERO;
    536          
    537            // limit max temp to 99 C
    538            if ( value > TEMP_COEFFICIENT * 99 )
    539              value = TEMP_COEFFICIENT * 99;
    540          
    541            return ( (uint8)(value/TEMP_COEFFICIENT) );
    542          
    543          #endif  // CC2430 || CC2530
    544          
    545          
    546          #if defined HAL_MCU_MSP430
    547          
    548            uint16 value;
    549          
    550          /*
    551            There are more than MSP430 board now. Idealy, ADC read should be called
    552          */
    553          #if defined (HAL_BOARD_F5438)
    554          
    555            long multiplier, offset;
    556          
    557            value = HalAdcRead (HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
    558          
    559            multiplier = (long) 7040 * 9 /5 ;
    560            offset = (long) 2620 * 9 / 5 - 320;
    561          
    562            value = (long) value * multiplier/4096 - offset;
    563          
    564            return (value);
    565          
    566          #else
    567            ADC12CTL0 = ADC12ON+SHT0_7+REFON;         // Turn on and set up ADC12
    568            ADC12CTL1 = SHP;                          // Use sampling timer
    569            ADC12MCTL0 = SREF_1+INCH_10;              // Vr+=Vref+
    570          
    571            ADC12CTL0 |= ENC | ADC12SC;               // Start conversion
    572            while ((ADC12IFG & BIT0)==0);
    573          
    574            value = ADC12MEM0;
    575          
    576            /*
    577             * value ranges from 0 to 0x0FFF indicating 0V and 1.5V
    578             * VOLTAGE_AT_TEMP_ZERO = 0.986 V = 2692
    579             * TEMP_COEFFICIENT = 0.00355 V/C = 9.69 /C
    580             * These parameters are typical values and need to be calibrated
    581             * See the datasheet for the appropriate chip for more details
    582             * also, the math below is not very accurate
    583             */
    584          
    585          #define VOLTAGE_AT_TEMP_ZERO      2692      // 0.986 V
    586          #define TEMP_COEFFICIENT          9.69      // 0.00355 V/C
    587          
    588            // limit min temp to 0 C
    589            if ( value < VOLTAGE_AT_TEMP_ZERO )
    590              value = VOLTAGE_AT_TEMP_ZERO;
    591          
    592            value = value - VOLTAGE_AT_TEMP_ZERO;
    593          
    594            // limit max temp to 99 C
    595            if ( value > TEMP_COEFFICIENT * 99 )
    596              value = TEMP_COEFFICIENT * 99;
    597          
    598            return ( (uint8)(value/TEMP_COEFFICIENT) );
    599          #endif // HAL_BOARD_F5438
    600          
    601          #endif // MSP430
    602          
    603          #if defined HAL_MCU_AVR
    604          
    605            // If platform doesnt support a temperature sensor, just return random value
    606            uint8 value;
    607            value = 20 + ( osal_rand() & 0x000F );
    608            return ( value );
    609          
    610          #endif  // AVR
    611          
    612          }

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     zb_AllowBindConfirm            0      0      0
     zb_BindConfirm                 2      0      0
       -> osal_start_timerEx        4      0      0
       -> osal_start_timerEx        4      0      0
       -> HalLedSet                 4      0      0
       -> osal_start_timerEx        4      0      0
     zb_FindDeviceConfirm           0      0      0
     zb_HandleKeys                  3      0      2
       -> zb_WriteConfiguration     4      0      4
       -> zb_ReadConfiguration      4      0      4
       -> zb_WriteConfiguration     4      0      4
       -> zb_SystemReset            4      0      4
     zb_HandleOsalEvent             1      0     23
       -> zb_StartRequest           0      0     36
       -> zb_SendDataRequest        0      0     46
       -> osal_start_timerEx        0      0     36
       -> zb_SendDataRequest        0      0     46
       -> osal_start_timerEx        0      0     36
       -> zb_BindDevice             0      0     36
     zb_ReceiveDataIndication       0      0      4
     zb_SendDataConfirm             2      0      0
       -> zb_BindDevice             4      0      0
       -> osal_stop_timerEx         4      0      0
       -> osal_stop_timerEx         4      0      0
       -> HalLedSet                 4      0      0
       -> osal_start_timerEx        4      0      0
     zb_StartConfirm                2      0      0
       -> osal_start_timerEx        4      0      0
       -> osal_start_timerEx        4      0      0


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     _A_TCON                                    1
     ADCCON3                                    1
     ADCL                                       1
     ADCH                                       1
     myAppState                                 1
     myStartRetryDelay                          2
     myTempReportPeriod                         2
     myBatteryCheckPeriod                       2
     myBindRetryDelay                           2
     zb_OutCmdList                              2
     zb_SimpleDesc                             12
     zb_HandleOsalEvent                       340
     ?Subroutine1                              12
     ?Subroutine4                              11
     ?Subroutine0                              12
     ??Subroutine7_0                            6
     zb_HandleKeys                             86
     ?Subroutine5                               7
     zb_StartConfirm                           33
     ??Subroutine6_0                            4
     ?Subroutine3                               3
     zb_SendDataConfirm                        64
     ?Subroutine2                               2
     zb_BindConfirm                            41
     zb_AllowBindConfirm                        3
     zb_FindDeviceConfirm                       3
     zb_ReceiveDataIndication                   3
     ?<Initializer for myStartRetryDelay>       2
     ?<Initializer for myTempReportPeriod>      2
     ?<Initializer for myBatteryCheckPeriod>    2
     ?<Initializer for myBindRetryDelay>        2
     __Constant_42160000                        4
     ??zb_HandleOsalEvent?relay                 6
     ??zb_HandleKeys?relay                      6
     ??zb_StartConfirm?relay                    6
     ??zb_SendDataConfirm?relay                 6
     ??zb_BindConfirm?relay                     6
     ??zb_AllowBindConfirm?relay                6
     ??zb_FindDeviceConfirm?relay               6
     ??zb_ReceiveDataIndication?relay           6

 
 630 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   4 bytes in segment SFR_AN
   8 bytes in segment XDATA_I
   8 bytes in segment XDATA_ID
  18 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 686 bytes of CODE  memory
  14 bytes of CONST memory (+ 4 bytes shared)
   0 bytes of DATA  memory (+ 4 bytes shared)
   9 bytes of XDATA memory

Errors: none
Warnings: none
