###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                01/Dec/2011  14:24:49 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Components\mac\low_level\srf04\mac_ #
#                          autopend.c                                         #
#    Command line       =  -f F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg    #
#                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f    #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Components\mac\low_level\srf04\mac_ #
#                          autopend.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D  #
#                          REFLECTOR -D POWER_SAVING -D NV_INIT -D            #
#                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D            #
#                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC  #
#                          -lC F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ #
#                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0 #
#                          _Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleA #
#                          pp\CC2530DB\SimpleSensorEB\List\ -lA               #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleSensorEB\List\ --diag_suppress       #
#                          Pe001,Pa010 -o F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10 #
#                          __CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530- #
#                          2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samp #
#                          les\SimpleApp\CC2530DB\SimpleSensorEB\Obj\ -e      #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼ #
#                          þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack #
#                          -CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zst #
#                          ack\Samples\SimpleApp\CC2530DB\ -I                 #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\SOURCE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ #
#                          ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack- #
#                          CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zsta #
#                          ck\Samples\SimpleApp\CC2530DB\..\..\..\ZMAIN\TI253 #
#                          0DB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I   #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC253 #
#                          0EB\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC253 #
#                          0³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1 #
#                          .4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Sim #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC #
#                          2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3. #
#                          0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\ #
#                          SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ #
#                          INCLUDE\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__C #
#                          C2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3 #
#                          .0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples #
#                          \SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC #
#                          K\AF\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N #
#                          WK\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530 #
#                          ³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1. #
#                          4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC #
#                          \ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³Ì #
#                          Ðò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4. #
#                          0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simple #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ #
#                           -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐ #
#                          ò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0 #
#                          _Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\   #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\    #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I  #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         #
#                          F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\  #
#                          -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò #
#                          °üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_ #
#                          Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDAT #
#                          A\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD #
#                          E\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ #
#                          ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4 #
#                          .0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Simpl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L #
#                          EVEL\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC25 #
#                          30³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0- #
#                          1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\Si #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW #
#                          _LEVEL\srf04\ -I F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\ #
#                          10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC253 #
#                          0-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Sa #
#                          mples\SimpleApp\CC2530DB\..\..\..\..\..\COMPONENTS #
#                          \MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\" -I "C:\Program       #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleSensorEB\List\mac_autopend.lst       #
#    Object file        =  F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB #
#                          _Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸ #
#                          öÊµÑé_×¨ÒµÉÐÑô\Projects\zstack\Samples\SimpleApp\C #
#                          C2530DB\SimpleSensorEB\Obj\mac_autopend.r51        #
#                                                                             #
#                                                                             #
###############################################################################

F:\fancong\×ÊÁÏ\ÉÐÑô2530Ì×¼þ¹âÅÌ\10__CC2530³ÌÐò°üB_Ð­ÒéÕ»ÊµÑé\Ê®ºÍÊ®¶þ_ZStack-CC2530-2.3.0-1.4.0_Á½¸öÊµÑé_×¨ÒµÉÐÑô\Components\mac\low_level\srf04\mac_autopend.c
      1          /**************************************************************************************************
      2            Filename:       mac_autopend.c
      3            Revised:        $Date: 2008-07-31 17:11:07 -0700 (Thu, 31 Jul 2008) $
      4            Revision:       $Revision: 17677 $
      5          
      6            Description:    This file implements the TIMAC Autopend feature.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* low-level */
     41          #include "mac_api.h"
     42          #include "mac_radio_defs.h"
     43          
     44          /* osal */
     45          #include "OSAL.h"
     46          #include "saddr.h"
     47          #include "ZComDef.h"
     48          
     49          #include "mac_autopend.h"
     50          
     51          /* ------------------------------------------------------------------------------------------------
     52           *                                           Defines
     53           * ------------------------------------------------------------------------------------------------
     54           */
     55          #define MAC_SRCMATCH_INVALID_INDEX           0xFF
     56          
     57          #define MAC_SRCMATCH_SHORT_ENTRY_SIZE        4
     58          #define MAC_SRCMATCH_EXT_ENTRY_SIZE          Z_EXTADDR_LEN
     59          
     60          #define MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES   24
     61          #define MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES     12
     62          
     63          #define MAC_SRCMATCH_ENABLE_BITMAP_LEN       3
     64                    
     65          
     66          /* ------------------------------------------------------------------------------------------------
     67           *                                      Global Variables
     68           * ------------------------------------------------------------------------------------------------
     69           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          bool macSrcMatchIsEnabled = FALSE; 
   \                     macSrcMatchIsEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          
     73          /* ------------------------------------------------------------------------------------------------
     74           *                                         Local Variables
     75           * ------------------------------------------------------------------------------------------------
     76           */
     77          
     78          /* 
     79           The following local Varables are only set in MAC_SrcMatchEnable()  
     80           They are read only to the rest of the module.
     81           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          uint8 macSrcMatchMaxNumEntries = 0;   
   \                     macSrcMatchMaxNumEntries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          uint8 macSrcMatchAddrMode = SADDR_MODE_SHORT;  
   \                     macSrcMatchAddrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for macSrcMatchAddrMode>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          bool macSrcMatchIsAckAllPending = FALSE;
   \                     macSrcMatchIsAckAllPending:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     85          
     86          /* ------------------------------------------------------------------------------------------------
     87           *                                         Local Functions
     88           * ------------------------------------------------------------------------------------------------
     89           */
     90          static uint8 macSrcMatchFindEmptyEntry( void );
     91          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  );
     92          static void macSrcMatchSetPendEnBit( uint8 index );
     93          static void macSrcMatchSetEnableBit( uint8 index, bool option );
     94          static bool macSrcMatchCheckEnableBit( uint8 index );
     95          static uint24 macSrcMatchGetEnableBit( void );
     96          static uint24 macSrcMatchGetPendEnBit( void );
     97          
     98          
     99          
    100          /*********************************************************************
    101           * @fn          MAC_SrcMatchEnable
    102           *
    103           * @brief      Enabled AUTOPEND and source address matching. If number of source
    104           *             address table entries asked for is more than the hardware
    105           *             supports. It will allocate maximum number of entries and return 
    106           *             MAC_INVALID_PARAMETER. This function shall be not be called from 
    107           *             ISR. It is not thread safe.
    108           *
    109           * @param      addressType - address type that the application uses
    110           *                           SADDR_MODE_SHORT or SADDR_MODE_EXT
    111           * @param      num - number of source address table entries to be used
    112           *
    113           * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER
    114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    115          uint8 MAC_SrcMatchEnable ( uint8 addrType, uint8 num  )
   \                     MAC_SrcMatchEnable:
    116          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
    117            uint8 rtn;
    118            uint8 maxNum;
    119              
    120            /* Verify the address type */
    121            if( addrType != SADDR_MODE_SHORT && addrType != SADDR_MODE_EXT )
   \   000006   7402         MOV     A,#0x2
   \   000008   6B           XRL     A,R3
   \   000009   6009         JZ      ??MAC_SrcMatchEnable_0
   \   00000B   7403         MOV     A,#0x3
   \   00000D   6B           XRL     A,R3
   \   00000E   6008         JZ      ??MAC_SrcMatchEnable_1
    122            {
    123              return MAC_INVALID_PARAMETER;
   \   000010   79E8         MOV     R1,#-0x18
   \   000012   803C         SJMP    ??MAC_SrcMatchEnable_2
    124            }
   \                     ??MAC_SrcMatchEnable_0:
   \   000014   7C18         MOV     R4,#0x18
   \   000016   8002         SJMP    ??MAC_SrcMatchEnable_3
   \                     ??MAC_SrcMatchEnable_1:
   \   000018   7C0C         MOV     R4,#0xc
    125            
    126            maxNum = ( addrType == SADDR_MODE_SHORT ) ? 
    127                     MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES : MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES;
    128                     
    129            if( num > maxNum )
   \                     ??MAC_SrcMatchEnable_3:
   \   00001A   EC           MOV     A,R4
   \   00001B   C3           CLR     C
   \   00001C   9A           SUBB    A,R2
   \   00001D   5006         JNC     ??MAC_SrcMatchEnable_4
    130            {
    131              rtn = MAC_INVALID_PARAMETER;
   \   00001F   79E8         MOV     R1,#-0x18
    132              num = maxNum;
   \   000021   EC           MOV     A,R4
   \   000022   FA           MOV     R2,A
   \   000023   8002         SJMP    ??MAC_SrcMatchEnable_5
    133            }
    134            else
    135            {
    136              rtn = MAC_SUCCESS;
   \                     ??MAC_SrcMatchEnable_4:
   \   000025   7900         MOV     R1,#0x0
    137            }
    138              
    139            /* Turn on Frame Filter (TIMAC enables frame filter by default), TBD */
    140            MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \                     ??MAC_SrcMatchEnable_5:
   \   000027   906180       MOV     DPTR,#0x6180
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   D2E0         SETB    0xE0 /* A   */.0
   \   00002D   F0           MOVX    @DPTR,A
    141            
    142            /* Turn on Auto ACK (TIMAC turn on Auto ACK by default), TBD */
    143            MAC_RADIO_TURN_ON_AUTO_ACK();
   \   00002E   906189       MOV     DPTR,#0x6189
   \   000031   E0           MOVX    A,@DPTR
   \   000032   D2E5         SETB    0xE0 /* A   */.5
   \   000034   F0           MOVX    @DPTR,A
    144            
    145            /* Turn on Autopend: set SRCMATCH.AUTOPEND and SRCMATCH.SRC_MATCH_EN */
    146            MAC_RADIO_TURN_ON_SRC_MATCH();
   \   000035   906182       MOV     DPTR,#0x6182
   \   000038   E0           MOVX    A,@DPTR
   \   000039   D2E0         SETB    0xE0 /* A   */.0
   \   00003B   F0           MOVX    @DPTR,A
    147           
    148            /* Set SRCMATCH.AUTOPEND */
    149            MAC_RADIO_TURN_ON_AUTOPEND();
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   D2E1         SETB    0xE0 /* A   */.1
   \   00003F   F0           MOVX    @DPTR,A
    150            
    151            /* Configure all the globals */
    152            macSrcMatchIsEnabled = TRUE;
   \   000040   7401         MOV     A,#0x1
   \   000042   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000045   F0           MOVX    @DPTR,A
    153            macSrcMatchMaxNumEntries = num;
   \   000046   EA           MOV     A,R2
   \   000047   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   00004A   F0           MOVX    @DPTR,A
    154            macSrcMatchAddrMode = addrType;           
   \   00004B   EB           MOV     A,R3
   \   00004C   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00004F   F0           MOVX    @DPTR,A
    155          
    156            return rtn;
   \                     ??MAC_SrcMatchEnable_2:
   \   000050   02....       LJMP    ?Subroutine6 & 0xFFFF
    157          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    158          
    159          /*********************************************************************
    160           * @fn          MAC_SrcMatchAddEntry
    161           *
    162           * @brief       Add a short or extended address to source address table. This 
    163           *              function shall be not be called from ISR. It is not thread safe.
    164           *
    165           * @param       addr - a pointer to sAddr_t which contains addrMode 
    166           *                     and a union of a short 16-bit MAC address or an extended 
    167           *                     64-bit MAC address to be added to the source address table. 
    168           * @param       panID - the device PAN ID. It is only used when the addr is 
    169           *                      using short address 
    170          
    171           * @return      MAC_SUCCESS or MAC_NO_RESOURCES (source address table full) 
    172           *              or MAC_DUPLICATED_ENTRY (the entry added is duplicated),
    173           *              or MAC_INVALID_PARAMETER if the input parameters are invalid.
    174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          uint8 MAC_SrcMatchAddEntry ( sAddr_t *addr, uint16 panID )
   \                     MAC_SrcMatchAddEntry:
    176          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   EC           MOV     A,R4
   \   000015   FE           MOV     R6,A
   \   000016   ED           MOV     A,R5
   \   000017   FF           MOV     R7,A
    177            uint8 index;
    178            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];
    179            
    180            /* Check if the input parameters are valid */
    181            if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
   \   000018   7401         MOV     A,#0x1
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   7002         JNZ     ??MAC_SrcMatchAddEntry_0
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \                     ??MAC_SrcMatchAddEntry_0:
   \   000022   6018         JZ      ??MAC_SrcMatchAddEntry_1
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6A           XRL     A,R2
   \   00003A   6005         JZ      ??MAC_SrcMatchAddEntry_2
    182            {
    183              return MAC_INVALID_PARAMETER;  
   \                     ??MAC_SrcMatchAddEntry_1:
   \   00003C   79E8         MOV     R1,#-0x18
   \   00003E   02....       LJMP    ??MAC_SrcMatchAddEntry_3 & 0xFFFF
    184            }
    185            
    186            /* Check if the entry already exists. Do not add duplicated entry */
    187            if ( macSrcMatchCheckSrcAddr( addr, panID ) != MAC_SRCMATCH_INVALID_INDEX )
   \                     ??MAC_SrcMatchAddEntry_2:
   \   000041                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FA           MOV     R2,A
   \   000048   12....       LCALL   ??macSrcMatchCheckSrcAddr?relay
   \   00004B   E9           MOV     A,R1
   \   00004C   64FF         XRL     A,#0xff
   \   00004E   6005         JZ      ??MAC_SrcMatchAddEntry_4
    188            {
    189              return MAC_DUPLICATED_ENTRY; 
   \   000050   791E         MOV     R1,#0x1e
   \   000052   02....       LJMP    ??MAC_SrcMatchAddEntry_3 & 0xFFFF
    190            }
    191            
    192            /* If not duplicated, write to the radio RAM and enable the control bit */
    193            
    194            /* Find the first empty entry */
    195            index = macSrcMatchFindEmptyEntry();
   \                     ??MAC_SrcMatchAddEntry_4:
   \   000055                ; Setup parameters for call to function macSrcMatchGetEnableBit
   \   000055   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000058   740D         MOV     A,#0xd
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?L_MOV_TO_X
   \   000062   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   000065   E0           MOVX    A,@DPTR
   \   000066   6402         XRL     A,#0x2
   \   000068   7068         JNZ     ??MAC_SrcMatchAddEntry_5
   \   00006A   E4           CLR     A
   \   00006B   85..82       MOV     DPL,?XSP + 0
   \   00006E   85..83       MOV     DPH,?XSP + 1
   \   000071   803C         SJMP    ??MAC_SrcMatchAddEntry_6
   \                     ??MAC_SrcMatchAddEntry_7:
   \   000073   740D         MOV     A,#0xd
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   C082         PUSH    DPL
   \   00007A   C083         PUSH    DPH
   \   00007C   75..01       MOV     ?V0 + 0,#0x1
   \   00007F   75..00       MOV     ?V0 + 1,#0x0
   \   000082   85..82       MOV     DPL,?XSP + 0
   \   000085   85..83       MOV     DPH,?XSP + 1
   \   000088   E0           MOVX    A,@DPTR
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?S_SHL
   \   00008E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000091   D083         POP     DPH
   \   000093   D082         POP     DPL
   \   000095   78..         MOV     R0,#?V0 + 0
   \   000097   12....       LCALL   ?L_AND_X
   \   00009A   90....       MOV     DPTR,#__Constant_0
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?L_EQ_X
   \   0000A2   7003         JNZ     $+5
   \   0000A4   02....       LJMP    ??MAC_SrcMatchAddEntry_8 & 0xFFFF
   \   0000A7   85..82       MOV     DPL,?XSP + 0
   \   0000AA   85..83       MOV     DPH,?XSP + 1
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   04           INC     A
   \                     ??MAC_SrcMatchAddEntry_6:
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   C0E0         PUSH    A
   \   0000B3   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FA           MOV     R2,A
   \   0000B8   D0E0         POP     A
   \   0000BA   C3           CLR     C
   \   0000BB   9A           SUBB    A,R2
   \   0000BC   40B5         JC      ??MAC_SrcMatchAddEntry_7
    196            if ( index == macSrcMatchMaxNumEntries )
   \                     ??MAC_SrcMatchAddEntry_9:
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FA           MOV     R2,A
   \   0000C6   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   6A           XRL     A,R2
   \   0000CB   7058         JNZ     ??MAC_SrcMatchAddEntry_10
    197            {
    198              return MAC_NO_RESOURCES;   /* Table is full */
   \   0000CD   791A         MOV     R1,#0x1a
   \   0000CF   02....       LJMP    ??MAC_SrcMatchAddEntry_3 & 0xFFFF
   \                     ??MAC_SrcMatchAddEntry_5:
   \   0000D2   E4           CLR     A
   \   0000D3   85..82       MOV     DPL,?XSP + 0
   \   0000D6   85..83       MOV     DPH,?XSP + 1
   \                     ??MAC_SrcMatchAddEntry_11:
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   C0E0         PUSH    A
   \   0000DD   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FA           MOV     R2,A
   \   0000E2   D0E0         POP     A
   \   0000E4   C3           CLR     C
   \   0000E5   9A           SUBB    A,R2
   \   0000E6   50D6         JNC     ??MAC_SrcMatchAddEntry_9
   \   0000E8   740D         MOV     A,#0xd
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   C082         PUSH    DPL
   \   0000EF   C083         PUSH    DPH
   \   0000F1   75..01       MOV     ?V0 + 0,#0x1
   \   0000F4   75..00       MOV     ?V0 + 1,#0x0
   \   0000F7   85..82       MOV     DPL,?XSP + 0
   \   0000FA   85..83       MOV     DPH,?XSP + 1
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   C3           CLR     C
   \   0000FF   33           RLC     A
   \   000100   78..         MOV     R0,#?V0 + 0
   \   000102   12....       LCALL   ?S_SHL
   \   000105   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000108   D083         POP     DPH
   \   00010A   D082         POP     DPL
   \   00010C   78..         MOV     R0,#?V0 + 0
   \   00010E   12....       LCALL   ?L_AND_X
   \   000111   90....       MOV     DPTR,#__Constant_0
   \   000114   78..         MOV     R0,#?V0 + 0
   \   000116   12....       LCALL   ?L_EQ_X
   \   000119   6061         JZ      ??MAC_SrcMatchAddEntry_12
   \   00011B   85..82       MOV     DPL,?XSP + 0
   \   00011E   85..83       MOV     DPH,?XSP + 1
   \   000121   E0           MOVX    A,@DPTR
   \   000122   04           INC     A
   \   000123   80B4         SJMP    ??MAC_SrcMatchAddEntry_11
    199            }
    200            
    201            if ( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \                     ??MAC_SrcMatchAddEntry_10:
   \   000125   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   000128   E0           MOVX    A,@DPTR
   \   000129   6402         XRL     A,#0x2
   \   00012B   704F         JNZ     ??MAC_SrcMatchAddEntry_12
    202            {
    203              /* Write the PanID and short address */
    204              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \                     ??MAC_SrcMatchAddEntry_8:
   \   00012D   7406         MOV     A,#0x6
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   EE           MOV     A,R6
   \   000133   F0           MOVX    @DPTR,A
    205              entry[1] = HI_UINT16( panID );
   \   000134   7407         MOV     A,#0x7
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   EF           MOV     A,R7
   \   00013A   F0           MOVX    @DPTR,A
    206              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   00013B   7401         MOV     A,#0x1
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000143   E0           MOVX    A,@DPTR
   \   000144   C0E0         PUSH    A
   \   000146   7408         MOV     A,#0x8
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   D0E0         POP     A
   \   00014D   F0           MOVX    @DPTR,A
    207              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   00014E   7401         MOV     A,#0x1
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000156   E0           MOVX    A,@DPTR
   \   000157   C0E0         PUSH    A
   \   000159   7409         MOV     A,#0x9
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   D0E0         POP     A
   \   000160   F0           MOVX    @DPTR,A
    208              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_SHORT_ENTRY_SIZE ), 
    209                             entry, MAC_SRCMATCH_SHORT_ENTRY_SIZE );
   \   000161                ; Setup parameters for call to function macMemWriteRam
   \   000161   7904         MOV     R1,#0x4
   \   000163   7406         MOV     A,#0x6
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   AC82         MOV     R4,DPL
   \   00016A   AD83         MOV     R5,DPH
   \   00016C   85..82       MOV     DPL,?XSP + 0
   \   00016F   85..83       MOV     DPH,?XSP + 1
   \   000172   E0           MOVX    A,@DPTR
   \   000173   F5..         MOV     ?V0 + 0,A
   \   000175   75..00       MOV     ?V0 + 1,#0x0
   \   000178   7402         MOV     A,#0x2
   \   00017A   801A         SJMP    ??MAC_SrcMatchAddEntry_13
    210            }
    211            else
    212            {
    213              /* Write the extended address */
    214              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_EXT_ENTRY_SIZE ), 
    215                             addr->addr.extAddr, MAC_SRCMATCH_EXT_ENTRY_SIZE ); 
   \                     ??MAC_SrcMatchAddEntry_12:
   \   00017C                ; Setup parameters for call to function macMemWriteRam
   \   00017C   7908         MOV     R1,#0x8
   \   00017E   7401         MOV     A,#0x1
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   E0           MOVX    A,@DPTR
   \   000184   FC           MOV     R4,A
   \   000185   A3           INC     DPTR
   \   000186   E0           MOVX    A,@DPTR
   \   000187   FD           MOV     R5,A
   \   000188   85..82       MOV     DPL,?XSP + 0
   \   00018B   85..83       MOV     DPH,?XSP + 1
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F5..         MOV     ?V0 + 0,A
   \   000191   75..00       MOV     ?V0 + 1,#0x0
   \   000194   7403         MOV     A,#0x3
   \                     ??MAC_SrcMatchAddEntry_13:
   \   000196   78..         MOV     R0,#?V0 + 0
   \   000198   12....       LCALL   ?S_SHL
   \   00019B   E5..         MOV     A,?V0 + 0
   \   00019D   2400         ADD     A,#0x0
   \   00019F   FA           MOV     R2,A
   \   0001A0   E5..         MOV     A,?V0 + 1
   \   0001A2   3461         ADDC    A,#0x61
   \   0001A4   FB           MOV     R3,A
   \   0001A5   12....       LCALL   ??macMemWriteRam?relay
    216            }
    217            
    218            /* Set the Autopend enable bits */
    219            macSrcMatchSetPendEnBit( index );
   \   0001A8   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   6402         XRL     A,#0x2
   \   0001AE   7903         MOV     R1,#0x3
   \   0001B0   700D         JNZ     ??MAC_SrcMatchAddEntry_14
   \   0001B2                ; Setup parameters for call to function macMemReadRam
   \   0001B2   740A         MOV     A,#0xa
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   AC82         MOV     R4,DPL
   \   0001B9   AD83         MOV     R5,DPH
   \   0001BB   7A67         MOV     R2,#0x67
   \   0001BD   800B         SJMP    ??MAC_SrcMatchAddEntry_15
   \                     ??MAC_SrcMatchAddEntry_14:
   \   0001BF                ; Setup parameters for call to function macMemReadRam
   \   0001BF   740A         MOV     A,#0xa
   \   0001C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C4   AC82         MOV     R4,DPL
   \   0001C6   AD83         MOV     R5,DPH
   \   0001C8   7A64         MOV     R2,#0x64
   \                     ??MAC_SrcMatchAddEntry_15:
   \   0001CA   7B61         MOV     R3,#0x61
   \   0001CC   12....       LCALL   ??macMemReadRam?relay
   \   0001CF                ; Setup parameters for call to function osal_build_uint32
   \   0001CF   7903         MOV     R1,#0x3
   \   0001D1   740A         MOV     A,#0xa
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   AA82         MOV     R2,DPL
   \   0001D8   AB83         MOV     R3,DPH
   \   0001DA   12....       LCALL   ??osal_build_uint32?relay
   \   0001DD   8A..         MOV     ?V0 + 0,R2
   \   0001DF   8B..         MOV     ?V0 + 1,R3
   \   0001E1   8C..         MOV     ?V0 + 2,R4
   \   0001E3   8D..         MOV     ?V0 + 3,R5
   \   0001E5   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   6402         XRL     A,#0x2
   \   0001EB   75..01       MOV     ?V0 + 4,#0x1
   \   0001EE   75..00       MOV     ?V0 + 5,#0x0
   \   0001F1   85..82       MOV     DPL,?XSP + 0
   \   0001F4   85..83       MOV     DPH,?XSP + 1
   \   0001F7   7032         JNZ     ??MAC_SrcMatchAddEntry_16
   \   0001F9                ; Setup parameters for call to function osal_buffer_uint24
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   78..         MOV     R0,#?V0 + 4
   \   0001FC   12....       LCALL   ?S_SHL
   \   0001FF   E5..         MOV     A,?V0 + 5
   \   000201   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000204   12....       LCALL   ?L_IOR
   \   000207   78..         MOV     R0,#?V0 + 0
   \   000209   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00020C   7407         MOV     A,#0x7
   \   00020E   12....       LCALL   ?XSTACK_DISP0_8
   \   000211   AA82         MOV     R2,DPL
   \   000213   AB83         MOV     R3,DPH
   \   000215   12....       LCALL   ??osal_buffer_uint24?relay
   \   000218   7404         MOV     A,#0x4
   \   00021A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00021D                ; Setup parameters for call to function macMemWriteRam
   \   00021D   7903         MOV     R1,#0x3
   \   00021F   E9           MOV     A,R1
   \   000220   12....       LCALL   ?XSTACK_DISP0_8
   \   000223   AC82         MOV     R4,DPL
   \   000225   AD83         MOV     R5,DPH
   \   000227   7A67         MOV     R2,#0x67
   \   000229   8032         SJMP    ??MAC_SrcMatchAddEntry_17
   \                     ??MAC_SrcMatchAddEntry_16:
   \   00022B                ; Setup parameters for call to function osal_buffer_uint24
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   C3           CLR     C
   \   00022D   33           RLC     A
   \   00022E   78..         MOV     R0,#?V0 + 4
   \   000230   12....       LCALL   ?S_SHL
   \   000233   E5..         MOV     A,?V0 + 5
   \   000235   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000238   12....       LCALL   ?L_IOR
   \   00023B   78..         MOV     R0,#?V0 + 0
   \   00023D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000240   7407         MOV     A,#0x7
   \   000242   12....       LCALL   ?XSTACK_DISP0_8
   \   000245   AA82         MOV     R2,DPL
   \   000247   AB83         MOV     R3,DPH
   \   000249   12....       LCALL   ??osal_buffer_uint24?relay
   \   00024C   7404         MOV     A,#0x4
   \   00024E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000251                ; Setup parameters for call to function macMemWriteRam
   \   000251   7903         MOV     R1,#0x3
   \   000253   E9           MOV     A,R1
   \   000254   12....       LCALL   ?XSTACK_DISP0_8
   \   000257   AC82         MOV     R4,DPL
   \   000259   AD83         MOV     R5,DPH
   \   00025B   7A64         MOV     R2,#0x64
   \                     ??MAC_SrcMatchAddEntry_17:
   \   00025D   7B61         MOV     R3,#0x61
   \   00025F   12....       LCALL   ??macMemWriteRam?relay
    220            
    221            /* Set the Src Match enable bits */
    222            macSrcMatchSetEnableBit( index, TRUE );
   \   000262                ; Setup parameters for call to function macSrcMatchSetEnableBit
   \   000262   7A01         MOV     R2,#0x1
   \   000264   85..82       MOV     DPL,?XSP + 0
   \   000267   85..83       MOV     DPH,?XSP + 1
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   F9           MOV     R1,A
   \   00026C   12....       LCALL   ??macSrcMatchSetEnableBit?relay
    223            
    224            return MAC_SUCCESS;
   \   00026F   7900         MOV     R1,#0x0
   \                     ??MAC_SrcMatchAddEntry_3:
   \   000271   7411         MOV     A,#0x11
   \   000273                REQUIRE ?Subroutine7
   \   000273                ; // Fall through to label ?Subroutine7
    225            
    226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    227          
    228          /*********************************************************************
    229           * @fn         MAC_SrcMatchDeleteEntry
    230           *
    231           * @brief      Delete a short or extended address from source address table. 
    232           *             This function shall be not be called from ISR. It is not thread safe.
    233           *
    234           * @param      addr - a pointer to sAddr_t which contains addrMode 
    235           *                    and a union of a short 16-bit MAC address or an extended 
    236           *                    64-bit MAC address to be deleted from the source address table. 
    237           * @param      panID - the device PAN ID. It is only used when the addr is 
    238           *                     using short address  
    239           *
    240           * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER (address to be deleted 
    241           *                  cannot be found in the source address table).
    242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    243          uint8 MAC_SrcMatchDeleteEntry ( sAddr_t *addr, uint16 panID  )
   \                     MAC_SrcMatchDeleteEntry:
    244          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    245            uint8 index;
    246            
    247            if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
   \   000005   EA           MOV     A,R2
   \   000006   7001         JNZ     ??MAC_SrcMatchDeleteEntry_0
   \   000008   EB           MOV     A,R3
   \                     ??MAC_SrcMatchDeleteEntry_0:
   \   000009   6015         JZ      ??MAC_SrcMatchDeleteEntry_1
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6E           XRL     A,R6
   \   00001E   6004         JZ      ??MAC_SrcMatchDeleteEntry_2
    248            {
    249              return MAC_INVALID_PARAMETER;  
   \                     ??MAC_SrcMatchDeleteEntry_1:
   \   000020   79E8         MOV     R1,#-0x18
   \   000022   800F         SJMP    ??MAC_SrcMatchDeleteEntry_3
    250            }
    251            
    252            /* Look up the source address table and find the entry. */
    253            index = macSrcMatchCheckSrcAddr( addr, panID );
   \                     ??MAC_SrcMatchDeleteEntry_2:
   \   000024                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   000024   12....       LCALL   ??macSrcMatchCheckSrcAddr?relay
    254          
    255            if( index == MAC_SRCMATCH_INVALID_INDEX )
   \   000027   74FF         MOV     A,#-0x1
   \   000029   69           XRL     A,R1
   \   00002A   60F4         JZ      ??MAC_SrcMatchDeleteEntry_1
    256            {
    257              return MAC_INVALID_PARAMETER; 
    258            }
    259            
    260            /* Clear Src Match enable bits */
    261            macSrcMatchSetEnableBit( index, FALSE );
   \   00002C                ; Setup parameters for call to function macSrcMatchSetEnableBit
   \   00002C   7A00         MOV     R2,#0x0
   \   00002E   12....       LCALL   ??macSrcMatchSetEnableBit?relay
    262          
    263            return MAC_SUCCESS;
   \   000031   7900         MOV     R1,#0x0
   \                     ??MAC_SrcMatchDeleteEntry_3:
   \   000033   7F01         MOV     R7,#0x1
   \   000035   02....       LJMP    ?BANKED_LEAVE_XDATA
    264          }
    265                            
    266          
    267          /*********************************************************************
    268           * @fn          MAC_SrcMatchAckAllPending
    269           *
    270           * @brief       Enabled/disable acknowledging all packets with pending bit set
    271           *              The application normally enables it when adding new entries to 
    272           *              the source address table fails due to the table is full, or 
    273           *              disables it when more entries are deleted and the table has
    274           *              empty slots.
    275           *
    276           * @param       option - TRUE (acknowledging all packets with pending field set)
    277           *                       FALSE (acknowledging all packets with pending field cleared) 
    278           *
    279           * @return      none
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          void MAC_SrcMatchAckAllPending ( uint8 option  ) 
   \                     MAC_SrcMatchAckAllPending:
    282          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    283            if( option == TRUE )
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   700E         JNZ     ??MAC_SrcMatchAckAllPending_0
    284            {
    285              macSrcMatchIsAckAllPending = TRUE;
   \   000009   7401         MOV     A,#0x1
   \   00000B   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   00000E   F0           MOVX    @DPTR,A
    286              
    287              /* Set the PENDING_OR register */
    288              MAC_RADIO_TURN_ON_PENDING_OR();
   \   00000F   90618A       MOV     DPTR,#0x618a
   \   000012   E0           MOVX    A,@DPTR
   \   000013   D2E2         SETB    0xE0 /* A   */.2
   \   000015   800B         SJMP    ??MAC_SrcMatchAckAllPending_1
    289            }
    290            else
    291            {
    292              macSrcMatchIsAckAllPending = FALSE;
   \                     ??MAC_SrcMatchAckAllPending_0:
   \   000017   E4           CLR     A
   \   000018   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   00001B   F0           MOVX    @DPTR,A
    293              
    294              /* Clear the PENDING_OR register */
    295              MAC_RADIO_TURN_OFF_PENDING_OR();
   \   00001C   90618A       MOV     DPTR,#0x618a
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C2E2         CLR     0xE0 /* A   */.2
   \                     ??MAC_SrcMatchAckAllPending_1:
   \   000022   F0           MOVX    @DPTR,A
    296            }
    297          }
   \   000023   80..         SJMP    ?Subroutine6
    298          
    299          /*********************************************************************
    300           * @fn          MAC_SrcMatchCheckAllPending
    301           *
    302           * @brief       Check if acknowledging all packets with pending bit set
    303           *              is enabled. 
    304           *
    305           * @param       none 
    306           *
    307           * @return      MAC_AUTOACK_PENDING_ALL_ON or MAC_AUTOACK_PENDING_ALL_OFF
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          uint8 MAC_SrcMatchCheckAllPending ( void )
   \                     MAC_SrcMatchCheckAllPending:
    310          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    311            if( macSrcMatchIsAckAllPending == TRUE )
   \   000004   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7004         JNZ     ??MAC_SrcMatchCheckAllPending_0
    312            {
    313              return MAC_AUTOACK_PENDING_ALL_ON; 
   \   00000C   79FE         MOV     R1,#-0x2
   \   00000E   8002         SJMP    ??MAC_SrcMatchCheckAllPending_1
    314            }
    315            
    316            return MAC_AUTOACK_PENDING_ALL_OFF;
   \                     ??MAC_SrcMatchCheckAllPending_0:
   \   000010   79FF         MOV     R1,#-0x1
   \                     ??MAC_SrcMatchCheckAllPending_1:
   \   000012                REQUIRE ?Subroutine6
   \   000012                ; // Fall through to label ?Subroutine6
    317          }
    318          
    319          /*********************************************************************
    320           * @fn          MAC_SrcMatchCheckResult
    321           *
    322           * @brief       Check the result of source matching
    323           *
    324           * @param       index - index of the entry in the source address table
    325           *
    326           * @return      TRUE or FALSE
    327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    328          bool MAC_SrcMatchCheckResult( void )
   \                     MAC_SrcMatchCheckResult:
    329          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    330            uint8 resIndex;
    331            
    332            if ( macSrcMatchIsAckAllPending )
   \   000004   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6004         JZ      ??MAC_SrcMatchCheckResult_0
    333            {
    334              return (TRUE);
   \   00000A   7901         MOV     R1,#0x1
   \   00000C   8009         SJMP    ??MAC_SrcMatchCheckResult_1
    335            }
    336            
    337            MAC_RADIO_SRC_MATCH_RESINDEX( resIndex );
   \                     ??MAC_SrcMatchCheckResult_0:
   \   00000E   906163       MOV     DPTR,#0x6163
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
    338            
    339            return ( resIndex & AUTOPEND_RES );
   \   000013   7440         MOV     A,#0x40
   \   000015   5A           ANL     A,R2
   \   000016   F9           MOV     R1,A
   \                     ??MAC_SrcMatchCheckResult_1:
   \   000017   80..         SJMP    ?Subroutine6
    340          }
    341          
    342          /*********************************************************************
    343           * @fn          macSrcMatchFindEmptyEntry
    344           *
    345           * @brief       return index of the first empty entry found
    346           *
    347           * @param       none
    348           *
    349           * @return      uint8 - return index of the first empty entry found
    350           */
    351          static uint8 macSrcMatchFindEmptyEntry( void )
    352          {
    353            uint8  index;
    354            uint24 enable;
    355               
    356            enable = MAC_RADIO_SRC_MATCH_GET_EN();
    357                  
    358            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    359            {
    360              for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
    361              {  
    362                if( ( enable & ( 0x01 << index ) ) == 0 )
    363                {
    364                  return index;
    365                }
    366              }
    367            }
    368            else
    369            {
    370              for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
    371              {  
    372                if( ( enable & ( 0x01 << ( index * 2 ) ) ) == 0 )
    373                {
    374                  return index;
    375                }
    376              }
    377            }
    378            
    379            /* 
    380             The value of index shall be macSrcMatchMaxNumEntries when it executes
    381             here. The table is full.
    382            */
    383            return index;
    384          }
    385          
    386          /*********************************************************************
    387           * @fn         macSrcMatchCheckSrcAddr
    388           *
    389           * @brief      Check if a short or extended address is in the source address table.
    390           *             This function shall not be called from ISR. It is not thread safe.
    391           *
    392           * @param      addr - a pointer to sAddr_t which contains addrMode 
    393           *                    and a union of a short 16-bit MAC address or an extended 
    394           *                    64-bit MAC address to be checked in the source address table. 
    395           * @param      panID - the device PAN ID. It is only used when the addr is 
    396           *                     using short address 
    397          
    398           * @return     uint8 - index of the entry in the table. Return 
    399           *                     MAC_SRCMATCH_INVALID_INDEX (0xFF) if address not found.
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  )
   \                     macSrcMatchCheckSrcAddr:
    402          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    403            
    404            uint8 index;     
    405            uint8 *pAddr;
    406            uint8 entrySize;
    407            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];  
    408            uint8 ramEntry[MAC_SRCMATCH_EXT_ENTRY_SIZE];
    409                
    410            /*
    411             Currently, shadow memory is not supported to optimize SPI traffic.
    412            */
    413            
    414            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   00000A   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6402         XRL     A,#0x2
   \   000010   7044         JNZ     ??macSrcMatchCheckSrcAddr_0
    415            {
    416              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EC           MOV     A,R4
   \   000018   F0           MOVX    @DPTR,A
    417              entry[1] = HI_UINT16( panID );
   \   000019   7404         MOV     A,#0x4
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   ED           MOV     A,R5
   \   00001F   F0           MOVX    @DPTR,A
    418              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   E0           MOVX    A,@DPTR
   \   000025   C0E0         PUSH    A
   \   000027   7405         MOV     A,#0x5
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
    419              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   C0E0         PUSH    A
   \   000037   7406         MOV     A,#0x6
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
    420              pAddr = entry;
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   A882         MOV     R0,DPL
   \   000046   A983         MOV     R1,DPH
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E8           MOV     A,R0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E9           MOV     A,R1
   \   000051   F0           MOVX    @DPTR,A
    421              entrySize = MAC_SRCMATCH_SHORT_ENTRY_SIZE;
   \   000052   7404         MOV     A,#0x4
   \   000054   800C         SJMP    ??macSrcMatchCheckSrcAddr_1
    422            }
    423            else
    424            {
    425              pAddr = addr->addr.extAddr;
   \                     ??macSrcMatchCheckSrcAddr_0:
   \   000056   7401         MOV     A,#0x1
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   EA           MOV     A,R2
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   EB           MOV     A,R3
   \   00005F   F0           MOVX    @DPTR,A
    426              entrySize = MAC_SRCMATCH_EXT_ENTRY_SIZE;
   \   000060   7408         MOV     A,#0x8
   \                     ??macSrcMatchCheckSrcAddr_1:
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   F0           MOVX    @DPTR,A
    427            }
    428            
    429            for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
   \   000069   7E00         MOV     R6,#0x0
   \   00006B   8001         SJMP    ??macSrcMatchCheckSrcAddr_2
   \                     ??macSrcMatchCheckSrcAddr_3:
   \   00006D   0E           INC     R6
   \                     ??macSrcMatchCheckSrcAddr_2:
   \   00006E   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   EE           MOV     A,R6
   \   000074   C3           CLR     C
   \   000075   9A           SUBB    A,R2
   \   000076   4003         JC      $+5
   \   000078   02....       LJMP    ??macSrcMatchCheckSrcAddr_4 & 0xFFFF
    430            {
    431              /* Check if the entry is enabled */
    432              if( macSrcMatchCheckEnableBit( index ) == FALSE )
   \   00007B   EE           MOV     A,R6
   \   00007C   FF           MOV     R7,A
   \   00007D   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6403         XRL     A,#0x3
   \   000083   7004         JNZ     ??macSrcMatchCheckSrcAddr_5
   \   000085   EF           MOV     A,R7
   \   000086   C3           CLR     C
   \   000087   33           RLC     A
   \   000088   FF           MOV     R7,A
   \                     ??macSrcMatchCheckSrcAddr_5:
   \   000089                ; Setup parameters for call to function macSrcMatchGetEnableBit
   \   000089   12....       LCALL   ??macSrcMatchGetEnableBit?relay
   \   00008C   8A..         MOV     ?V0 + 4,R2
   \   00008E   8B..         MOV     ?V0 + 5,R3
   \   000090   8C..         MOV     ?V0 + 6,R4
   \   000092   8D..         MOV     ?V0 + 7,R5
   \   000094   75..01       MOV     ?V0 + 0,#0x1
   \   000097   75..00       MOV     ?V0 + 1,#0x0
   \   00009A   EF           MOV     A,R7
   \   00009B   78..         MOV     R0,#?V0 + 0
   \   00009D   12....       LCALL   ?S_SHL
   \   0000A0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A3   78..         MOV     R0,#?V0 + 4
   \   0000A5   79..         MOV     R1,#?V0 + 0
   \   0000A7   12....       LCALL   ?L_AND
   \   0000AA   90....       MOV     DPTR,#__Constant_0
   \   0000AD   78..         MOV     R0,#?V0 + 4
   \   0000AF   12....       LCALL   ?L_EQ_X
   \   0000B2   60B9         JZ      ??macSrcMatchCheckSrcAddr_3
    433              {
    434                continue; 
    435              }
    436                
    437              /* Compare the short address and pan ID */
    438              MAC_RADIO_SRC_MATCH_TABLE_READ( ( index * entrySize ), ramEntry, entrySize );
   \   0000B4                ; Setup parameters for call to function macMemReadRam
   \   0000B4   85..82       MOV     DPL,?XSP + 0
   \   0000B7   85..83       MOV     DPH,?XSP + 1
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   7407         MOV     A,#0x7
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   AC82         MOV     R4,DPL
   \   0000C3   AD83         MOV     R5,DPH
   \   0000C5   8E..         MOV     ?V0 + 0,R6
   \   0000C7   85..82       MOV     DPL,?XSP + 0
   \   0000CA   85..83       MOV     DPH,?XSP + 1
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   85..F0       MOV     B,?V0 + 0
   \   0000D1   A4           MUL     AB
   \   0000D2   FA           MOV     R2,A
   \   0000D3   AFF0         MOV     R7,B
   \   0000D5   E4           CLR     A
   \   0000D6   2F           ADD     A,R7
   \   0000D7   3461         ADDC    A,#0x61
   \   0000D9   FB           MOV     R3,A
   \   0000DA   12....       LCALL   ??macMemReadRam?relay
    439               
    440              if( osal_memcmp( pAddr, ramEntry, entrySize ) == TRUE )
   \   0000DD                ; Setup parameters for call to function osal_memcmp
   \   0000DD   7407         MOV     A,#0x7
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   A982         MOV     R1,DPL
   \   0000E4   AA83         MOV     R2,DPH
   \   0000E6   89..         MOV     ?V0 + 0,R1
   \   0000E8   8A..         MOV     ?V0 + 1,R2
   \   0000EA   75..00       MOV     ?V0 + 2,#0x0
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7403         MOV     A,#0x3
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   FC           MOV     R4,A
   \   0000F9   7D00         MOV     R5,#0x0
   \   0000FB   7404         MOV     A,#0x4
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000103   A982         MOV     R1,DPL
   \   000105   AA83         MOV     R2,DPH
   \   000107   7B00         MOV     R3,#0x0
   \   000109   12....       LCALL   ??osal_memcmp?relay
   \   00010C   7403         MOV     A,#0x3
   \   00010E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000111   E9           MOV     A,R1
   \   000112   6401         XRL     A,#0x1
   \   000114   6003         JZ      $+5
   \   000116   02....       LJMP    ??macSrcMatchCheckSrcAddr_3 & 0xFFFF
    441              {
    442                /* Match found */
    443                return index;
   \   000119   EE           MOV     A,R6
   \   00011A   F9           MOV     R1,A
   \   00011B   8002         SJMP    ??macSrcMatchCheckSrcAddr_6
    444              }
    445            }
    446            
    447            return MAC_SRCMATCH_INVALID_INDEX;
   \                     ??macSrcMatchCheckSrcAddr_4:
   \   00011D   79FF         MOV     R1,#-0x1
   \                     ??macSrcMatchCheckSrcAddr_6:
   \   00011F   740F         MOV     A,#0xf
   \   000121   02....       LJMP    ?Subroutine7 & 0xFFFF
    448          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E5..         MOV     A,?V0 + 1
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 2,A
   \   000007   F5..         MOV     ?V0 + 3,A
   \   000009   22           RET
    449          
    450          
    451          /*********************************************************************
    452           * @fn          macSrcMatchSetPendEnBit
    453           *
    454           * @brief       Set the enable bit in the source address table
    455           *
    456           * @param       index - index of the entry in the source address table
    457           *
    458           * @return      none
    459           */
    460          static void macSrcMatchSetPendEnBit( uint8 index )
    461          {
    462            uint24 enable;
    463            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    464                 
    465            enable = MAC_RADIO_SRC_MATCH_GET_PENDEN(); 
    466                
    467            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    468            {
    469              enable |= ( 0x01 << index );
    470              osal_buffer_uint24( buf, enable );
    471              MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN( buf );
    472            }
    473            else
    474            {
    475              enable |= ( 0x01 << ( index * 2 ) );
    476              osal_buffer_uint24( buf, enable );
    477              MAC_RADIO_SRC_MATCH_SET_EXTPENDEN( buf );
    478            }
    479          }
    480          
    481          /*********************************************************************
    482           * @fn          macSrcMatchSetEnableBit
    483           *
    484           * @brief       Set or clear the enable bit in the SRCMATCH EN register
    485           *
    486           * @param       index - index of the entry in the source address table
    487           * @param       option - true (set the enable bit), or false (clear the enable bit)
    488           *
    489           * @return      none
    490           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    491          static void macSrcMatchSetEnableBit( uint8 index, bool option )
   \                     macSrcMatchSetEnableBit:
    492          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    493            uint24 enable;  
    494            
    495            enable = MAC_RADIO_SRC_MATCH_GET_EN(); 
   \   000009                ; Setup parameters for call to function macSrcMatchGetEnableBit
   \   000009   12....       LCALL   ?Subroutine0 & 0xFFFF
    496                
    497            if( option == TRUE )
   \                     ??CrossCallReturnLabel_1:
   \   00000C   75..01       MOV     ?V0 + 4,#0x1
   \   00000F   75..00       MOV     ?V0 + 5,#0x0
   \   000012   EE           MOV     A,R6
   \   000013   C3           CLR     C
   \   000014   33           RLC     A
   \   000015   78..         MOV     R0,#?V0 + 4
   \   000017   12....       LCALL   ?S_SHL
   \   00001A   AA..         MOV     R2,?V0 + 4
   \   00001C   AB..         MOV     R3,?V0 + 5
   \   00001E   75..01       MOV     ?V0 + 4,#0x1
   \   000021   F5..         MOV     ?V0 + 5,A
   \   000023   EE           MOV     A,R6
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?S_SHL
   \   000029   A9..         MOV     R1,?V0 + 5
   \   00002B   7401         MOV     A,#0x1
   \   00002D   6F           XRL     A,R7
   \   00002E   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   000031   7020         JNZ     ??macSrcMatchSetEnableBit_0
    498            {
    499              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6402         XRL     A,#0x2
   \   000036   7010         JNZ     ??macSrcMatchSetEnableBit_1
    500              {
    501                enable |= ( 0x01 << index );
    502                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   000038                ; Setup parameters for call to function osal_buffer_uint24
   \   000038   E9           MOV     A,R1
   \   000039   12....       LCALL   ??Subroutine9_0 & 0xFFFF
    503              }
   \                     ??CrossCallReturnLabel_13:
   \   00003C   12....       LCALL   ?L_IOR
   \                     ??macSrcMatchSetEnableBit_2:
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000044   7A83         MOV     R2,#-0x7d
   \   000046   8030         SJMP    ??macSrcMatchSetEnableBit_3
    504              else
    505              {
    506                enable |= ( 0x01 << ( index * 2 ) );
    507                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \                     ??macSrcMatchSetEnableBit_1:
   \   000048                ; Setup parameters for call to function osal_buffer_uint24
   \   000048   8A..         MOV     ?V0 + 4,R2
   \   00004A   EB           MOV     A,R3
   \   00004B   12....       LCALL   ??Subroutine8_0 & 0xFFFF
    508              }
    509            }
   \                     ??CrossCallReturnLabel_14:
   \   00004E   12....       LCALL   ?L_IOR
   \   000051   801E         SJMP    ??macSrcMatchSetEnableBit_4
    510            else
    511            {
    512              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \                     ??macSrcMatchSetEnableBit_0:
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6402         XRL     A,#0x2
   \   000056   700E         JNZ     ??macSrcMatchSetEnableBit_5
    513              {
    514                enable &= ~( 0x01 << index );
    515                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   000058                ; Setup parameters for call to function osal_buffer_uint24
   \   000058   E5..         MOV     A,?V0 + 4
   \   00005A   F4           CPL     A
   \   00005B   F5..         MOV     ?V0 + 4,A
   \   00005D   E9           MOV     A,R1
   \   00005E   12....       LCALL   ?Subroutine3 & 0xFFFF
    516              }
   \                     ??CrossCallReturnLabel_15:
   \   000061   12....       LCALL   ?L_AND
   \   000064   80D9         SJMP    ??macSrcMatchSetEnableBit_2
    517              else
    518              {
    519                enable &= ~( 0x01 << ( index * 2 ) );
    520                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \                     ??macSrcMatchSetEnableBit_5:
   \   000066                ; Setup parameters for call to function osal_buffer_uint24
   \   000066   EA           MOV     A,R2
   \   000067   F4           CPL     A
   \   000068   F5..         MOV     ?V0 + 4,A
   \   00006A   EB           MOV     A,R3
   \   00006B   12....       LCALL   ?Subroutine3 & 0xFFFF
    521              }
    522          
    523            }
   \                     ??CrossCallReturnLabel_16:
   \   00006E   12....       LCALL   ?L_AND
   \                     ??macSrcMatchSetEnableBit_4:
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000076   7A86         MOV     R2,#-0x7a
   \                     ??macSrcMatchSetEnableBit_3:
   \   000078   7B61         MOV     R3,#0x61
   \   00007A   12....       LCALL   ??osal_buffer_uint24?relay
   \   00007D   7404         MOV     A,#0x4
   \   00007F   02....       LJMP    ?Subroutine7 & 0xFFFF
    524          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F4           CPL     A
   \   000001                REQUIRE ??Subroutine8_0
   \   000001                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   F5..         MOV     ?V0 + 5,A
   \   000002                REQUIRE ??Subroutine9_0
   \   000002                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   33           RLC     A
   \   000001   95E0         SUBB    A,0xE0 /* A   */
   \   000003   F5..         MOV     ?V0 + 6,A
   \   000005   F5..         MOV     ?V0 + 7,A
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   79..         MOV     R1,#?V0 + 4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??macSrcMatchGetEnableBit?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   8C..         MOV     ?V0 + 2,R4
   \   000009   8D..         MOV     ?V0 + 3,R5
   \   00000B   22           RET
    525          
    526          /*********************************************************************
    527           * @fn          macSrcMatchCheckEnableBit
    528           *
    529           * @brief       Check the enable bit in the source address table
    530           *
    531           * @param       index - index of the entry in the source address table
    532           *
    533           * @return      TRUE or FALSE
    534           */
    535          static bool macSrcMatchCheckEnableBit( uint8 index )
    536          {
    537            uint24 enable;
    538            
    539            if( macSrcMatchAddrMode == SADDR_MODE_EXT )
    540            {
    541              index *= 2;
    542            }
    543            
    544            enable = MAC_RADIO_SRC_MATCH_GET_EN();
    545               
    546            if( enable & ( 0x01 << index ) )
    547            {
    548              return TRUE;
    549            }
    550          
    551            return FALSE; 
    552          }
    553           
    554          
    555          /*********************************************************************
    556           * @fn          macSrcMatchGetEnableBit
    557           *
    558           * @brief       Return the SRCMATCH enable bitmap
    559           *
    560           * @param       none
    561           *
    562           * @return      uint24 - 24 bits bitmap
    563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          static uint24 macSrcMatchGetEnableBit( void )
   \                     macSrcMatchGetEnableBit:
    565          { 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    566            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    567            
    568            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   000009   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7903         MOV     R1,#0x3
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   AC82         MOV     R4,DPL
   \   000019   AD83         MOV     R5,DPH
   \   00001B   7004         JNZ     ??macSrcMatchGetEnableBit_0
    569            {
    570              MAC_RADIO_GET_SRC_SHORTEN( buf );
   \   00001D                ; Setup parameters for call to function macMemReadRam
   \   00001D   7A83         MOV     R2,#-0x7d
   \   00001F   8002         SJMP    ??macSrcMatchGetEnableBit_1
    571            }
    572            else
    573            {
    574              MAC_RADIO_GET_SRC_EXTEN( buf );
   \                     ??macSrcMatchGetEnableBit_0:
   \   000021                ; Setup parameters for call to function macMemReadRam
   \   000021   7A86         MOV     R2,#-0x7a
   \                     ??macSrcMatchGetEnableBit_1:
   \   000023   7B61         MOV     R3,#0x61
   \   000025   12....       LCALL   ??macMemReadRam?relay
    575            }
    576            
    577            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
   \   000028                ; Setup parameters for call to function osal_build_uint32
   \   000028   7903         MOV     R1,#0x3
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   AA82         MOV     R2,DPL
   \   000032   AB83         MOV     R3,DPH
   \   000034   12....       LCALL   ??osal_build_uint32?relay
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   02....       LJMP    ?Subroutine6 & 0xFFFF
    578          
    579          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for macSrcMatchAddrMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchEnable?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchAddEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchDeleteEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchAckAllPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchCheckAllPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchCheckResult?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckResult

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchCheckSrcAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchCheckSrcAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchSetEnableBit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchSetEnableBit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchGetEnableBit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchGetEnableBit
    580          
    581          
    582          /*********************************************************************
    583           * @fn          macSrcMatchGetPendEnBit
    584           *
    585           * @brief       Return the SRCMATCH Pend enable bitmap
    586           *
    587           * @param       none
    588           *
    589           * @return      uint24 - 24 bits bitmap
    590           */
    591          static uint24 macSrcMatchGetPendEnBit( void )
    592          {
    593            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    594          
    595            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    596            {
    597              MAC_RADIO_GET_SRC_SHORTPENDEN( buf );
    598            }
    599            else
    600            {
    601              MAC_RADIO_GET_SRC_EXTENPEND( buf );
    602            }
    603            
    604            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    605          }
    606          
    607          

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     MAC_SrcMatchAckAllPending        2      0      0
     MAC_SrcMatchAddEntry             2      0     37
       -> macSrcMatchCheckSrcAddr     0      0     66
       -> macSrcMatchGetEnableBit     0      0     66
       -> macMemWriteRam              0      0     66
       -> macMemWriteRam              0      0     66
       -> macMemReadRam               0      0     66
       -> macMemReadRam               0      0     66
       -> osal_build_uint32           0      0     66
       -> osal_buffer_uint24          0      0     74
       -> macMemWriteRam              0      0     66
       -> osal_buffer_uint24          0      0     74
       -> macMemWriteRam              0      0     66
       -> macSrcMatchSetEnableBit     0      0     66
     MAC_SrcMatchCheckAllPending      2      0      0
     MAC_SrcMatchCheckResult          2      0      0
     MAC_SrcMatchDeleteEntry          0      0      9
       -> macSrcMatchCheckSrcAddr     0      0     18
       -> macSrcMatchSetEnableBit     0      0     18
     MAC_SrcMatchEnable               2      0      0
     macSrcMatchCheckSrcAddr          1      0     67
       -> macSrcMatchGetEnableBit     0      0     62
       -> macMemReadRam               0      0     62
       -> osal_memcmp                 0      0     68
     macSrcMatchGetEnableBit          2      0     36
       -> macMemReadRam               4      0      6
       -> macMemReadRam               4      0      6
       -> osal_build_uint32           4      0      6
     macSrcMatchSetEnableBit          0      0     53
       -> macSrcMatchGetEnableBit     0      0     32
       -> osal_buffer_uint24          0      0     40
       -> osal_buffer_uint24          0      0     40
       -> osal_buffer_uint24          0      0     40
       -> osal_buffer_uint24          0      0     40


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     macSrcMatchIsEnabled                      1
     macSrcMatchMaxNumEntries                  1
     macSrcMatchAddrMode                       1
     macSrcMatchIsAckAllPending                1
     MAC_SrcMatchEnable                       83
     ?Subroutine6                              7
     MAC_SrcMatchAddEntry                    627
     ?Subroutine7                              8
     ?Subroutine1                              5
     ?Subroutine2                              4
     ?Subroutine5                              9
     MAC_SrcMatchDeleteEntry                  56
     MAC_SrcMatchAckAllPending                37
     MAC_SrcMatchCheckAllPending              18
     MAC_SrcMatchCheckResult                  25
     macSrcMatchCheckSrcAddr                 292
     ?Subroutine4                             10
     macSrcMatchSetEnableBit                 130
     ?Subroutine3                              1
     ??Subroutine8_0                           2
     ??Subroutine9_0                          12
     ?Subroutine0                             12
     macSrcMatchGetEnableBit                  63
     ?<Initializer for macSrcMatchAddrMode>    1
     __Constant_0                              4
     ??MAC_SrcMatchEnable?relay                6
     ??MAC_SrcMatchAddEntry?relay              6
     ??MAC_SrcMatchDeleteEntry?relay           6
     ??MAC_SrcMatchAckAllPending?relay         6
     ??MAC_SrcMatchCheckAllPending?relay       6
     ??MAC_SrcMatchCheckResult?relay           6
     ??macSrcMatchCheckSrcAddr?relay           6
     ??macSrcMatchSetEnableBit?relay           6
     ??macSrcMatchGetEnableBit?relay           6

 
 1 401 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
     3 bytes in segment XDATA_Z
 
 1 456 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     4 bytes of XDATA memory

Errors: none
Warnings: none
